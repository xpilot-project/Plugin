// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nearbycontrollers.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xpilot {

  /// <summary>Holder for reflection information generated from nearbycontrollers.proto</summary>
  public static partial class NearbycontrollersReflection {

    #region Descriptor
    /// <summary>File descriptor for nearbycontrollers.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NearbycontrollersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChduZWFyYnljb250cm9sbGVycy5wcm90bxIGeHBpbG90IvoBChFOZWFyYnlD",
            "b250cm9sbGVycxIyCgRsaXN0GAEgAygLMiQueHBpbG90Lk5lYXJieUNvbnRy",
            "b2xsZXJzLkNvbnRyb2xsZXIasAEKCkNvbnRyb2xsZXISFQoIY2FsbHNpZ24Y",
            "ASABKAlIAIgBARIdChB4cGxhbmVfZnJlcXVlbmN5GAIgASgFSAGIAQESFgoJ",
            "ZnJlcXVlbmN5GAMgASgJSAKIAQESFgoJcmVhbF9uYW1lGAQgASgJSAOIAQFC",
            "CwoJX2NhbGxzaWduQhMKEV94cGxhbmVfZnJlcXVlbmN5QgwKCl9mcmVxdWVu",
            "Y3lCDAoKX3JlYWxfbmFtZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xpilot.NearbyControllers), global::Xpilot.NearbyControllers.Parser, new[]{ "List" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Xpilot.NearbyControllers.Types.Controller), global::Xpilot.NearbyControllers.Types.Controller.Parser, new[]{ "Callsign", "XplaneFrequency", "Frequency", "RealName" }, new[]{ "Callsign", "XplaneFrequency", "Frequency", "RealName" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NearbyControllers : pb::IMessage<NearbyControllers>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NearbyControllers> _parser = new pb::MessageParser<NearbyControllers>(() => new NearbyControllers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NearbyControllers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xpilot.NearbycontrollersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NearbyControllers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NearbyControllers(NearbyControllers other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NearbyControllers Clone() {
      return new NearbyControllers(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Xpilot.NearbyControllers.Types.Controller> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Xpilot.NearbyControllers.Types.Controller.Parser);
    private readonly pbc::RepeatedField<global::Xpilot.NearbyControllers.Types.Controller> list_ = new pbc::RepeatedField<global::Xpilot.NearbyControllers.Types.Controller>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Xpilot.NearbyControllers.Types.Controller> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NearbyControllers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NearbyControllers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      list_.WriteTo(ref output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NearbyControllers other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            list_.AddEntriesFrom(ref input, _repeated_list_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the NearbyControllers message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Controller : pb::IMessage<Controller>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Controller> _parser = new pb::MessageParser<Controller>(() => new Controller());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Controller> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Xpilot.NearbyControllers.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Controller() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Controller(Controller other) : this() {
          _hasBits0 = other._hasBits0;
          callsign_ = other.callsign_;
          xplaneFrequency_ = other.xplaneFrequency_;
          frequency_ = other.frequency_;
          realName_ = other.realName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Controller Clone() {
          return new Controller(this);
        }

        /// <summary>Field number for the "callsign" field.</summary>
        public const int CallsignFieldNumber = 1;
        private string callsign_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Callsign {
          get { return callsign_ ?? ""; }
          set {
            callsign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "callsign" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCallsign {
          get { return callsign_ != null; }
        }
        /// <summary>Clears the value of the "callsign" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCallsign() {
          callsign_ = null;
        }

        /// <summary>Field number for the "xplane_frequency" field.</summary>
        public const int XplaneFrequencyFieldNumber = 2;
        private int xplaneFrequency_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int XplaneFrequency {
          get { if ((_hasBits0 & 1) != 0) { return xplaneFrequency_; } else { return 0; } }
          set {
            _hasBits0 |= 1;
            xplaneFrequency_ = value;
          }
        }
        /// <summary>Gets whether the "xplane_frequency" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasXplaneFrequency {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "xplane_frequency" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearXplaneFrequency() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "frequency" field.</summary>
        public const int FrequencyFieldNumber = 3;
        private string frequency_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Frequency {
          get { return frequency_ ?? ""; }
          set {
            frequency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "frequency" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFrequency {
          get { return frequency_ != null; }
        }
        /// <summary>Clears the value of the "frequency" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFrequency() {
          frequency_ = null;
        }

        /// <summary>Field number for the "real_name" field.</summary>
        public const int RealNameFieldNumber = 4;
        private string realName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RealName {
          get { return realName_ ?? ""; }
          set {
            realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "real_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRealName {
          get { return realName_ != null; }
        }
        /// <summary>Clears the value of the "real_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRealName() {
          realName_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Controller);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Controller other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Callsign != other.Callsign) return false;
          if (XplaneFrequency != other.XplaneFrequency) return false;
          if (Frequency != other.Frequency) return false;
          if (RealName != other.RealName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCallsign) hash ^= Callsign.GetHashCode();
          if (HasXplaneFrequency) hash ^= XplaneFrequency.GetHashCode();
          if (HasFrequency) hash ^= Frequency.GetHashCode();
          if (HasRealName) hash ^= RealName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasCallsign) {
            output.WriteRawTag(10);
            output.WriteString(Callsign);
          }
          if (HasXplaneFrequency) {
            output.WriteRawTag(16);
            output.WriteInt32(XplaneFrequency);
          }
          if (HasFrequency) {
            output.WriteRawTag(26);
            output.WriteString(Frequency);
          }
          if (HasRealName) {
            output.WriteRawTag(34);
            output.WriteString(RealName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasCallsign) {
            output.WriteRawTag(10);
            output.WriteString(Callsign);
          }
          if (HasXplaneFrequency) {
            output.WriteRawTag(16);
            output.WriteInt32(XplaneFrequency);
          }
          if (HasFrequency) {
            output.WriteRawTag(26);
            output.WriteString(Frequency);
          }
          if (HasRealName) {
            output.WriteRawTag(34);
            output.WriteString(RealName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCallsign) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Callsign);
          }
          if (HasXplaneFrequency) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(XplaneFrequency);
          }
          if (HasFrequency) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Frequency);
          }
          if (HasRealName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Controller other) {
          if (other == null) {
            return;
          }
          if (other.HasCallsign) {
            Callsign = other.Callsign;
          }
          if (other.HasXplaneFrequency) {
            XplaneFrequency = other.XplaneFrequency;
          }
          if (other.HasFrequency) {
            Frequency = other.Frequency;
          }
          if (other.HasRealName) {
            RealName = other.RealName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Callsign = input.ReadString();
                break;
              }
              case 16: {
                XplaneFrequency = input.ReadInt32();
                break;
              }
              case 26: {
                Frequency = input.ReadString();
                break;
              }
              case 34: {
                RealName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Callsign = input.ReadString();
                break;
              }
              case 16: {
                XplaneFrequency = input.ReadInt32();
                break;
              }
              case 26: {
                Frequency = input.ReadString();
                break;
              }
              case 34: {
                RealName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
