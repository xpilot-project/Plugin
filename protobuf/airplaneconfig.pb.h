// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: airplaneconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_airplaneconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_airplaneconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_airplaneconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_airplaneconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_airplaneconfig_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_airplaneconfig_2eproto_metadata_getter(int index);
namespace xpilot {
class AirplaneConfig;
struct AirplaneConfigDefaultTypeInternal;
extern AirplaneConfigDefaultTypeInternal _AirplaneConfig_default_instance_;
class AirplaneConfig_AirplaneConfigLights;
struct AirplaneConfig_AirplaneConfigLightsDefaultTypeInternal;
extern AirplaneConfig_AirplaneConfigLightsDefaultTypeInternal _AirplaneConfig_AirplaneConfigLights_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::AirplaneConfig* Arena::CreateMaybeMessage<::xpilot::AirplaneConfig>(Arena*);
template<> ::xpilot::AirplaneConfig_AirplaneConfigLights* Arena::CreateMaybeMessage<::xpilot::AirplaneConfig_AirplaneConfigLights>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class AirplaneConfig_AirplaneConfigLights PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.AirplaneConfig.AirplaneConfigLights) */ {
 public:
  inline AirplaneConfig_AirplaneConfigLights() : AirplaneConfig_AirplaneConfigLights(nullptr) {}
  virtual ~AirplaneConfig_AirplaneConfigLights();
  explicit constexpr AirplaneConfig_AirplaneConfigLights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AirplaneConfig_AirplaneConfigLights(const AirplaneConfig_AirplaneConfigLights& from);
  AirplaneConfig_AirplaneConfigLights(AirplaneConfig_AirplaneConfigLights&& from) noexcept
    : AirplaneConfig_AirplaneConfigLights() {
    *this = ::std::move(from);
  }

  inline AirplaneConfig_AirplaneConfigLights& operator=(const AirplaneConfig_AirplaneConfigLights& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirplaneConfig_AirplaneConfigLights& operator=(AirplaneConfig_AirplaneConfigLights&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirplaneConfig_AirplaneConfigLights& default_instance() {
    return *internal_default_instance();
  }
  static inline const AirplaneConfig_AirplaneConfigLights* internal_default_instance() {
    return reinterpret_cast<const AirplaneConfig_AirplaneConfigLights*>(
               &_AirplaneConfig_AirplaneConfigLights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AirplaneConfig_AirplaneConfigLights& a, AirplaneConfig_AirplaneConfigLights& b) {
    a.Swap(&b);
  }
  inline void Swap(AirplaneConfig_AirplaneConfigLights* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirplaneConfig_AirplaneConfigLights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirplaneConfig_AirplaneConfigLights* New() const final {
    return CreateMaybeMessage<AirplaneConfig_AirplaneConfigLights>(nullptr);
  }

  AirplaneConfig_AirplaneConfigLights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirplaneConfig_AirplaneConfigLights>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirplaneConfig_AirplaneConfigLights& from);
  void MergeFrom(const AirplaneConfig_AirplaneConfigLights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirplaneConfig_AirplaneConfigLights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.AirplaneConfig.AirplaneConfigLights";
  }
  protected:
  explicit AirplaneConfig_AirplaneConfigLights(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_airplaneconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrobeLightsOnFieldNumber = 1,
    kLandingLightsOnFieldNumber = 2,
    kTaxiLightsOnFieldNumber = 3,
    kBeaconLightsOnFieldNumber = 4,
    kNavLightsOnFieldNumber = 5,
  };
  // bool strobe_lights_on = 1;
  bool has_strobe_lights_on() const;
  private:
  bool _internal_has_strobe_lights_on() const;
  public:
  void clear_strobe_lights_on();
  bool strobe_lights_on() const;
  void set_strobe_lights_on(bool value);
  private:
  bool _internal_strobe_lights_on() const;
  void _internal_set_strobe_lights_on(bool value);
  public:

  // bool landing_lights_on = 2;
  bool has_landing_lights_on() const;
  private:
  bool _internal_has_landing_lights_on() const;
  public:
  void clear_landing_lights_on();
  bool landing_lights_on() const;
  void set_landing_lights_on(bool value);
  private:
  bool _internal_landing_lights_on() const;
  void _internal_set_landing_lights_on(bool value);
  public:

  // bool taxi_lights_on = 3;
  bool has_taxi_lights_on() const;
  private:
  bool _internal_has_taxi_lights_on() const;
  public:
  void clear_taxi_lights_on();
  bool taxi_lights_on() const;
  void set_taxi_lights_on(bool value);
  private:
  bool _internal_taxi_lights_on() const;
  void _internal_set_taxi_lights_on(bool value);
  public:

  // bool beacon_lights_on = 4;
  bool has_beacon_lights_on() const;
  private:
  bool _internal_has_beacon_lights_on() const;
  public:
  void clear_beacon_lights_on();
  bool beacon_lights_on() const;
  void set_beacon_lights_on(bool value);
  private:
  bool _internal_beacon_lights_on() const;
  void _internal_set_beacon_lights_on(bool value);
  public:

  // bool nav_lights_on = 5;
  bool has_nav_lights_on() const;
  private:
  bool _internal_has_nav_lights_on() const;
  public:
  void clear_nav_lights_on();
  bool nav_lights_on() const;
  void set_nav_lights_on(bool value);
  private:
  bool _internal_nav_lights_on() const;
  void _internal_set_nav_lights_on(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.AirplaneConfig.AirplaneConfigLights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool strobe_lights_on_;
  bool landing_lights_on_;
  bool taxi_lights_on_;
  bool beacon_lights_on_;
  bool nav_lights_on_;
  friend struct ::TableStruct_airplaneconfig_2eproto;
};
// -------------------------------------------------------------------

class AirplaneConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.AirplaneConfig) */ {
 public:
  inline AirplaneConfig() : AirplaneConfig(nullptr) {}
  virtual ~AirplaneConfig();
  explicit constexpr AirplaneConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AirplaneConfig(const AirplaneConfig& from);
  AirplaneConfig(AirplaneConfig&& from) noexcept
    : AirplaneConfig() {
    *this = ::std::move(from);
  }

  inline AirplaneConfig& operator=(const AirplaneConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirplaneConfig& operator=(AirplaneConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirplaneConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AirplaneConfig* internal_default_instance() {
    return reinterpret_cast<const AirplaneConfig*>(
               &_AirplaneConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AirplaneConfig& a, AirplaneConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AirplaneConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirplaneConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirplaneConfig* New() const final {
    return CreateMaybeMessage<AirplaneConfig>(nullptr);
  }

  AirplaneConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirplaneConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirplaneConfig& from);
  void MergeFrom(const AirplaneConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirplaneConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.AirplaneConfig";
  }
  protected:
  explicit AirplaneConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_airplaneconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AirplaneConfig_AirplaneConfigLights AirplaneConfigLights;

  // accessors -------------------------------------------------------

  enum : int {
    kCallsignFieldNumber = 1,
    kLightsFieldNumber = 2,
    kFlapsFieldNumber = 4,
    kGearDownFieldNumber = 3,
    kEnginesOnFieldNumber = 5,
    kSpoilersDeployedFieldNumber = 6,
    kReverseThrustFieldNumber = 7,
    kOnGroundFieldNumber = 8,
  };
  // string callsign = 1;
  bool has_callsign() const;
  private:
  bool _internal_has_callsign() const;
  public:
  void clear_callsign();
  const std::string& callsign() const;
  void set_callsign(const std::string& value);
  void set_callsign(std::string&& value);
  void set_callsign(const char* value);
  void set_callsign(const char* value, size_t size);
  std::string* mutable_callsign();
  std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // .xpilot.AirplaneConfig.AirplaneConfigLights lights = 2;
  bool has_lights() const;
  private:
  bool _internal_has_lights() const;
  public:
  void clear_lights();
  const ::xpilot::AirplaneConfig_AirplaneConfigLights& lights() const;
  ::xpilot::AirplaneConfig_AirplaneConfigLights* release_lights();
  ::xpilot::AirplaneConfig_AirplaneConfigLights* mutable_lights();
  void set_allocated_lights(::xpilot::AirplaneConfig_AirplaneConfigLights* lights);
  private:
  const ::xpilot::AirplaneConfig_AirplaneConfigLights& _internal_lights() const;
  ::xpilot::AirplaneConfig_AirplaneConfigLights* _internal_mutable_lights();
  public:
  void unsafe_arena_set_allocated_lights(
      ::xpilot::AirplaneConfig_AirplaneConfigLights* lights);
  ::xpilot::AirplaneConfig_AirplaneConfigLights* unsafe_arena_release_lights();

  // float flaps = 4;
  bool has_flaps() const;
  private:
  bool _internal_has_flaps() const;
  public:
  void clear_flaps();
  float flaps() const;
  void set_flaps(float value);
  private:
  float _internal_flaps() const;
  void _internal_set_flaps(float value);
  public:

  // bool gear_down = 3;
  bool has_gear_down() const;
  private:
  bool _internal_has_gear_down() const;
  public:
  void clear_gear_down();
  bool gear_down() const;
  void set_gear_down(bool value);
  private:
  bool _internal_gear_down() const;
  void _internal_set_gear_down(bool value);
  public:

  // bool engines_on = 5;
  bool has_engines_on() const;
  private:
  bool _internal_has_engines_on() const;
  public:
  void clear_engines_on();
  bool engines_on() const;
  void set_engines_on(bool value);
  private:
  bool _internal_engines_on() const;
  void _internal_set_engines_on(bool value);
  public:

  // bool spoilers_deployed = 6;
  bool has_spoilers_deployed() const;
  private:
  bool _internal_has_spoilers_deployed() const;
  public:
  void clear_spoilers_deployed();
  bool spoilers_deployed() const;
  void set_spoilers_deployed(bool value);
  private:
  bool _internal_spoilers_deployed() const;
  void _internal_set_spoilers_deployed(bool value);
  public:

  // bool reverse_thrust = 7;
  bool has_reverse_thrust() const;
  private:
  bool _internal_has_reverse_thrust() const;
  public:
  void clear_reverse_thrust();
  bool reverse_thrust() const;
  void set_reverse_thrust(bool value);
  private:
  bool _internal_reverse_thrust() const;
  void _internal_set_reverse_thrust(bool value);
  public:

  // bool on_ground = 8;
  bool has_on_ground() const;
  private:
  bool _internal_has_on_ground() const;
  public:
  void clear_on_ground();
  bool on_ground() const;
  void set_on_ground(bool value);
  private:
  bool _internal_on_ground() const;
  void _internal_set_on_ground(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.AirplaneConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  ::xpilot::AirplaneConfig_AirplaneConfigLights* lights_;
  float flaps_;
  bool gear_down_;
  bool engines_on_;
  bool spoilers_deployed_;
  bool reverse_thrust_;
  bool on_ground_;
  friend struct ::TableStruct_airplaneconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AirplaneConfig_AirplaneConfigLights

// bool strobe_lights_on = 1;
inline bool AirplaneConfig_AirplaneConfigLights::_internal_has_strobe_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AirplaneConfig_AirplaneConfigLights::has_strobe_lights_on() const {
  return _internal_has_strobe_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::clear_strobe_lights_on() {
  strobe_lights_on_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool AirplaneConfig_AirplaneConfigLights::_internal_strobe_lights_on() const {
  return strobe_lights_on_;
}
inline bool AirplaneConfig_AirplaneConfigLights::strobe_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.AirplaneConfigLights.strobe_lights_on)
  return _internal_strobe_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::_internal_set_strobe_lights_on(bool value) {
  _has_bits_[0] |= 0x00000001u;
  strobe_lights_on_ = value;
}
inline void AirplaneConfig_AirplaneConfigLights::set_strobe_lights_on(bool value) {
  _internal_set_strobe_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.AirplaneConfigLights.strobe_lights_on)
}

// bool landing_lights_on = 2;
inline bool AirplaneConfig_AirplaneConfigLights::_internal_has_landing_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AirplaneConfig_AirplaneConfigLights::has_landing_lights_on() const {
  return _internal_has_landing_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::clear_landing_lights_on() {
  landing_lights_on_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AirplaneConfig_AirplaneConfigLights::_internal_landing_lights_on() const {
  return landing_lights_on_;
}
inline bool AirplaneConfig_AirplaneConfigLights::landing_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.AirplaneConfigLights.landing_lights_on)
  return _internal_landing_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::_internal_set_landing_lights_on(bool value) {
  _has_bits_[0] |= 0x00000002u;
  landing_lights_on_ = value;
}
inline void AirplaneConfig_AirplaneConfigLights::set_landing_lights_on(bool value) {
  _internal_set_landing_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.AirplaneConfigLights.landing_lights_on)
}

// bool taxi_lights_on = 3;
inline bool AirplaneConfig_AirplaneConfigLights::_internal_has_taxi_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AirplaneConfig_AirplaneConfigLights::has_taxi_lights_on() const {
  return _internal_has_taxi_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::clear_taxi_lights_on() {
  taxi_lights_on_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AirplaneConfig_AirplaneConfigLights::_internal_taxi_lights_on() const {
  return taxi_lights_on_;
}
inline bool AirplaneConfig_AirplaneConfigLights::taxi_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.AirplaneConfigLights.taxi_lights_on)
  return _internal_taxi_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::_internal_set_taxi_lights_on(bool value) {
  _has_bits_[0] |= 0x00000004u;
  taxi_lights_on_ = value;
}
inline void AirplaneConfig_AirplaneConfigLights::set_taxi_lights_on(bool value) {
  _internal_set_taxi_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.AirplaneConfigLights.taxi_lights_on)
}

// bool beacon_lights_on = 4;
inline bool AirplaneConfig_AirplaneConfigLights::_internal_has_beacon_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AirplaneConfig_AirplaneConfigLights::has_beacon_lights_on() const {
  return _internal_has_beacon_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::clear_beacon_lights_on() {
  beacon_lights_on_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AirplaneConfig_AirplaneConfigLights::_internal_beacon_lights_on() const {
  return beacon_lights_on_;
}
inline bool AirplaneConfig_AirplaneConfigLights::beacon_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.AirplaneConfigLights.beacon_lights_on)
  return _internal_beacon_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::_internal_set_beacon_lights_on(bool value) {
  _has_bits_[0] |= 0x00000008u;
  beacon_lights_on_ = value;
}
inline void AirplaneConfig_AirplaneConfigLights::set_beacon_lights_on(bool value) {
  _internal_set_beacon_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.AirplaneConfigLights.beacon_lights_on)
}

// bool nav_lights_on = 5;
inline bool AirplaneConfig_AirplaneConfigLights::_internal_has_nav_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AirplaneConfig_AirplaneConfigLights::has_nav_lights_on() const {
  return _internal_has_nav_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::clear_nav_lights_on() {
  nav_lights_on_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool AirplaneConfig_AirplaneConfigLights::_internal_nav_lights_on() const {
  return nav_lights_on_;
}
inline bool AirplaneConfig_AirplaneConfigLights::nav_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.AirplaneConfigLights.nav_lights_on)
  return _internal_nav_lights_on();
}
inline void AirplaneConfig_AirplaneConfigLights::_internal_set_nav_lights_on(bool value) {
  _has_bits_[0] |= 0x00000010u;
  nav_lights_on_ = value;
}
inline void AirplaneConfig_AirplaneConfigLights::set_nav_lights_on(bool value) {
  _internal_set_nav_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.AirplaneConfigLights.nav_lights_on)
}

// -------------------------------------------------------------------

// AirplaneConfig

// string callsign = 1;
inline bool AirplaneConfig::_internal_has_callsign() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AirplaneConfig::has_callsign() const {
  return _internal_has_callsign();
}
inline void AirplaneConfig::clear_callsign() {
  callsign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AirplaneConfig::callsign() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.callsign)
  return _internal_callsign();
}
inline void AirplaneConfig::set_callsign(const std::string& value) {
  _internal_set_callsign(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.callsign)
}
inline std::string* AirplaneConfig::mutable_callsign() {
  // @@protoc_insertion_point(field_mutable:xpilot.AirplaneConfig.callsign)
  return _internal_mutable_callsign();
}
inline const std::string& AirplaneConfig::_internal_callsign() const {
  return callsign_.Get();
}
inline void AirplaneConfig::_internal_set_callsign(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AirplaneConfig::set_callsign(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xpilot.AirplaneConfig.callsign)
}
inline void AirplaneConfig::set_callsign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xpilot.AirplaneConfig.callsign)
}
inline void AirplaneConfig::set_callsign(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xpilot.AirplaneConfig.callsign)
}
inline std::string* AirplaneConfig::_internal_mutable_callsign() {
  _has_bits_[0] |= 0x00000001u;
  return callsign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AirplaneConfig::release_callsign() {
  // @@protoc_insertion_point(field_release:xpilot.AirplaneConfig.callsign)
  if (!_internal_has_callsign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return callsign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AirplaneConfig::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AirplaneConfig.callsign)
}

// .xpilot.AirplaneConfig.AirplaneConfigLights lights = 2;
inline bool AirplaneConfig::_internal_has_lights() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lights_ != nullptr);
  return value;
}
inline bool AirplaneConfig::has_lights() const {
  return _internal_has_lights();
}
inline void AirplaneConfig::clear_lights() {
  if (GetArena() == nullptr && lights_ != nullptr) {
    delete lights_;
  }
  lights_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::xpilot::AirplaneConfig_AirplaneConfigLights& AirplaneConfig::_internal_lights() const {
  const ::xpilot::AirplaneConfig_AirplaneConfigLights* p = lights_;
  return p != nullptr ? *p : reinterpret_cast<const ::xpilot::AirplaneConfig_AirplaneConfigLights&>(
      ::xpilot::_AirplaneConfig_AirplaneConfigLights_default_instance_);
}
inline const ::xpilot::AirplaneConfig_AirplaneConfigLights& AirplaneConfig::lights() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.lights)
  return _internal_lights();
}
inline void AirplaneConfig::unsafe_arena_set_allocated_lights(
    ::xpilot::AirplaneConfig_AirplaneConfigLights* lights) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lights_);
  }
  lights_ = lights;
  if (lights) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.AirplaneConfig.lights)
}
inline ::xpilot::AirplaneConfig_AirplaneConfigLights* AirplaneConfig::release_lights() {
  _has_bits_[0] &= ~0x00000002u;
  ::xpilot::AirplaneConfig_AirplaneConfigLights* temp = lights_;
  lights_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::AirplaneConfig_AirplaneConfigLights* AirplaneConfig::unsafe_arena_release_lights() {
  // @@protoc_insertion_point(field_release:xpilot.AirplaneConfig.lights)
  _has_bits_[0] &= ~0x00000002u;
  ::xpilot::AirplaneConfig_AirplaneConfigLights* temp = lights_;
  lights_ = nullptr;
  return temp;
}
inline ::xpilot::AirplaneConfig_AirplaneConfigLights* AirplaneConfig::_internal_mutable_lights() {
  _has_bits_[0] |= 0x00000002u;
  if (lights_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::AirplaneConfig_AirplaneConfigLights>(GetArena());
    lights_ = p;
  }
  return lights_;
}
inline ::xpilot::AirplaneConfig_AirplaneConfigLights* AirplaneConfig::mutable_lights() {
  // @@protoc_insertion_point(field_mutable:xpilot.AirplaneConfig.lights)
  return _internal_mutable_lights();
}
inline void AirplaneConfig::set_allocated_lights(::xpilot::AirplaneConfig_AirplaneConfigLights* lights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lights_;
  }
  if (lights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lights);
    if (message_arena != submessage_arena) {
      lights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lights_ = lights;
  // @@protoc_insertion_point(field_set_allocated:xpilot.AirplaneConfig.lights)
}

// bool gear_down = 3;
inline bool AirplaneConfig::_internal_has_gear_down() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AirplaneConfig::has_gear_down() const {
  return _internal_has_gear_down();
}
inline void AirplaneConfig::clear_gear_down() {
  gear_down_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AirplaneConfig::_internal_gear_down() const {
  return gear_down_;
}
inline bool AirplaneConfig::gear_down() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.gear_down)
  return _internal_gear_down();
}
inline void AirplaneConfig::_internal_set_gear_down(bool value) {
  _has_bits_[0] |= 0x00000008u;
  gear_down_ = value;
}
inline void AirplaneConfig::set_gear_down(bool value) {
  _internal_set_gear_down(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.gear_down)
}

// float flaps = 4;
inline bool AirplaneConfig::_internal_has_flaps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AirplaneConfig::has_flaps() const {
  return _internal_has_flaps();
}
inline void AirplaneConfig::clear_flaps() {
  flaps_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float AirplaneConfig::_internal_flaps() const {
  return flaps_;
}
inline float AirplaneConfig::flaps() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.flaps)
  return _internal_flaps();
}
inline void AirplaneConfig::_internal_set_flaps(float value) {
  _has_bits_[0] |= 0x00000004u;
  flaps_ = value;
}
inline void AirplaneConfig::set_flaps(float value) {
  _internal_set_flaps(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.flaps)
}

// bool engines_on = 5;
inline bool AirplaneConfig::_internal_has_engines_on() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AirplaneConfig::has_engines_on() const {
  return _internal_has_engines_on();
}
inline void AirplaneConfig::clear_engines_on() {
  engines_on_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool AirplaneConfig::_internal_engines_on() const {
  return engines_on_;
}
inline bool AirplaneConfig::engines_on() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.engines_on)
  return _internal_engines_on();
}
inline void AirplaneConfig::_internal_set_engines_on(bool value) {
  _has_bits_[0] |= 0x00000010u;
  engines_on_ = value;
}
inline void AirplaneConfig::set_engines_on(bool value) {
  _internal_set_engines_on(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.engines_on)
}

// bool spoilers_deployed = 6;
inline bool AirplaneConfig::_internal_has_spoilers_deployed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AirplaneConfig::has_spoilers_deployed() const {
  return _internal_has_spoilers_deployed();
}
inline void AirplaneConfig::clear_spoilers_deployed() {
  spoilers_deployed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool AirplaneConfig::_internal_spoilers_deployed() const {
  return spoilers_deployed_;
}
inline bool AirplaneConfig::spoilers_deployed() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.spoilers_deployed)
  return _internal_spoilers_deployed();
}
inline void AirplaneConfig::_internal_set_spoilers_deployed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  spoilers_deployed_ = value;
}
inline void AirplaneConfig::set_spoilers_deployed(bool value) {
  _internal_set_spoilers_deployed(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.spoilers_deployed)
}

// bool reverse_thrust = 7;
inline bool AirplaneConfig::_internal_has_reverse_thrust() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AirplaneConfig::has_reverse_thrust() const {
  return _internal_has_reverse_thrust();
}
inline void AirplaneConfig::clear_reverse_thrust() {
  reverse_thrust_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool AirplaneConfig::_internal_reverse_thrust() const {
  return reverse_thrust_;
}
inline bool AirplaneConfig::reverse_thrust() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.reverse_thrust)
  return _internal_reverse_thrust();
}
inline void AirplaneConfig::_internal_set_reverse_thrust(bool value) {
  _has_bits_[0] |= 0x00000040u;
  reverse_thrust_ = value;
}
inline void AirplaneConfig::set_reverse_thrust(bool value) {
  _internal_set_reverse_thrust(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.reverse_thrust)
}

// bool on_ground = 8;
inline bool AirplaneConfig::_internal_has_on_ground() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AirplaneConfig::has_on_ground() const {
  return _internal_has_on_ground();
}
inline void AirplaneConfig::clear_on_ground() {
  on_ground_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool AirplaneConfig::_internal_on_ground() const {
  return on_ground_;
}
inline bool AirplaneConfig::on_ground() const {
  // @@protoc_insertion_point(field_get:xpilot.AirplaneConfig.on_ground)
  return _internal_on_ground();
}
inline void AirplaneConfig::_internal_set_on_ground(bool value) {
  _has_bits_[0] |= 0x00000080u;
  on_ground_ = value;
}
inline void AirplaneConfig::set_on_ground(bool value) {
  _internal_set_on_ground(value);
  // @@protoc_insertion_point(field_set:xpilot.AirplaneConfig.on_ground)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_airplaneconfig_2eproto
