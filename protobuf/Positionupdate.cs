// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: positionupdate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xpilot {

  /// <summary>Holder for reflection information generated from positionupdate.proto</summary>
  public static partial class PositionupdateReflection {

    #region Descriptor
    /// <summary>File descriptor for positionupdate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PositionupdateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwb3NpdGlvbnVwZGF0ZS5wcm90bxIGeHBpbG90IuADCg5Qb3NpdGlvblVw",
            "ZGF0ZRIVCghjYWxsc2lnbhgBIAEoCUgAiAEBEhUKCGxhdGl0dWRlGAIgASgB",
            "SAGIAQESFgoJbG9uZ2l0dWRlGAMgASgBSAKIAQESFQoIYWx0aXR1ZGUYBCAB",
            "KAFIA4gBARIUCgdoZWFkaW5nGAUgASgBSASIAQESEgoFcGl0Y2gYBiABKAFI",
            "BYgBARIRCgRiYW5rGAcgASgBSAaIAQESGQoMZ3JvdW5kX3NwZWVkGAggASgB",
            "SAeIAQESHQoQdHJhbnNwb25kZXJfY29kZRgJIAEoBUgIiAEBEh8KEnRyYW5z",
            "cG9uZGVyX21vZGVfYxgKIAEoCEgJiAEBEhMKBm9yaWdpbhgLIAEoCUgKiAEB",
            "EhgKC2Rlc3RpbmF0aW9uGAwgASgJSAuIAQFCCwoJX2NhbGxzaWduQgsKCV9s",
            "YXRpdHVkZUIMCgpfbG9uZ2l0dWRlQgsKCV9hbHRpdHVkZUIKCghfaGVhZGlu",
            "Z0IICgZfcGl0Y2hCBwoFX2JhbmtCDwoNX2dyb3VuZF9zcGVlZEITChFfdHJh",
            "bnNwb25kZXJfY29kZUIVChNfdHJhbnNwb25kZXJfbW9kZV9jQgkKB19vcmln",
            "aW5CDgoMX2Rlc3RpbmF0aW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xpilot.PositionUpdate), global::Xpilot.PositionUpdate.Parser, new[]{ "Callsign", "Latitude", "Longitude", "Altitude", "Heading", "Pitch", "Bank", "GroundSpeed", "TransponderCode", "TransponderModeC", "Origin", "Destination" }, new[]{ "Callsign", "Latitude", "Longitude", "Altitude", "Heading", "Pitch", "Bank", "GroundSpeed", "TransponderCode", "TransponderModeC", "Origin", "Destination" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PositionUpdate : pb::IMessage<PositionUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PositionUpdate> _parser = new pb::MessageParser<PositionUpdate>(() => new PositionUpdate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xpilot.PositionupdateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate(PositionUpdate other) : this() {
      _hasBits0 = other._hasBits0;
      callsign_ = other.callsign_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      altitude_ = other.altitude_;
      heading_ = other.heading_;
      pitch_ = other.pitch_;
      bank_ = other.bank_;
      groundSpeed_ = other.groundSpeed_;
      transponderCode_ = other.transponderCode_;
      transponderModeC_ = other.transponderModeC_;
      origin_ = other.origin_;
      destination_ = other.destination_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionUpdate Clone() {
      return new PositionUpdate(this);
    }

    /// <summary>Field number for the "callsign" field.</summary>
    public const int CallsignFieldNumber = 1;
    private string callsign_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Callsign {
      get { return callsign_ ?? ""; }
      set {
        callsign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "callsign" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCallsign {
      get { return callsign_ != null; }
    }
    /// <summary>Clears the value of the "callsign" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCallsign() {
      callsign_ = null;
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { if ((_hasBits0 & 1) != 0) { return latitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 1;
        latitude_ = value;
      }
    }
    /// <summary>Gets whether the "latitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLatitude {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "latitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLatitude() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 3;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { if ((_hasBits0 & 2) != 0) { return longitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 2;
        longitude_ = value;
      }
    }
    /// <summary>Gets whether the "longitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLongitude {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "longitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLongitude() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 4;
    private double altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Altitude {
      get { if ((_hasBits0 & 4) != 0) { return altitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 4;
        altitude_ = value;
      }
    }
    /// <summary>Gets whether the "altitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAltitude {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "altitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAltitude() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 5;
    private double heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Heading {
      get { if ((_hasBits0 & 8) != 0) { return heading_; } else { return 0D; } }
      set {
        _hasBits0 |= 8;
        heading_ = value;
      }
    }
    /// <summary>Gets whether the "heading" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeading {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "heading" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeading() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 6;
    private double pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pitch {
      get { if ((_hasBits0 & 16) != 0) { return pitch_; } else { return 0D; } }
      set {
        _hasBits0 |= 16;
        pitch_ = value;
      }
    }
    /// <summary>Gets whether the "pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPitch {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPitch() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "bank" field.</summary>
    public const int BankFieldNumber = 7;
    private double bank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Bank {
      get { if ((_hasBits0 & 32) != 0) { return bank_; } else { return 0D; } }
      set {
        _hasBits0 |= 32;
        bank_ = value;
      }
    }
    /// <summary>Gets whether the "bank" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBank {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "bank" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBank() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ground_speed" field.</summary>
    public const int GroundSpeedFieldNumber = 8;
    private double groundSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GroundSpeed {
      get { if ((_hasBits0 & 64) != 0) { return groundSpeed_; } else { return 0D; } }
      set {
        _hasBits0 |= 64;
        groundSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "ground_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroundSpeed {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ground_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroundSpeed() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "transponder_code" field.</summary>
    public const int TransponderCodeFieldNumber = 9;
    private int transponderCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransponderCode {
      get { if ((_hasBits0 & 128) != 0) { return transponderCode_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        transponderCode_ = value;
      }
    }
    /// <summary>Gets whether the "transponder_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransponderCode {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "transponder_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransponderCode() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "transponder_mode_c" field.</summary>
    public const int TransponderModeCFieldNumber = 10;
    private bool transponderModeC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransponderModeC {
      get { if ((_hasBits0 & 256) != 0) { return transponderModeC_; } else { return false; } }
      set {
        _hasBits0 |= 256;
        transponderModeC_ = value;
      }
    }
    /// <summary>Gets whether the "transponder_mode_c" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransponderModeC {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "transponder_mode_c" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransponderModeC() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 11;
    private string origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Origin {
      get { return origin_ ?? ""; }
      set {
        origin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrigin {
      get { return origin_ != null; }
    }
    /// <summary>Clears the value of the "origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrigin() {
      origin_ = null;
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 12;
    private string destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destination {
      get { return destination_ ?? ""; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "destination" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestination {
      get { return destination_ != null; }
    }
    /// <summary>Clears the value of the "destination" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestination() {
      destination_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Callsign != other.Callsign) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Heading, other.Heading)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bank, other.Bank)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundSpeed, other.GroundSpeed)) return false;
      if (TransponderCode != other.TransponderCode) return false;
      if (TransponderModeC != other.TransponderModeC) return false;
      if (Origin != other.Origin) return false;
      if (Destination != other.Destination) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCallsign) hash ^= Callsign.GetHashCode();
      if (HasLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (HasLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (HasAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
      if (HasHeading) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Heading);
      if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (HasBank) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bank);
      if (HasGroundSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundSpeed);
      if (HasTransponderCode) hash ^= TransponderCode.GetHashCode();
      if (HasTransponderModeC) hash ^= TransponderModeC.GetHashCode();
      if (HasOrigin) hash ^= Origin.GetHashCode();
      if (HasDestination) hash ^= Destination.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCallsign) {
        output.WriteRawTag(10);
        output.WriteString(Callsign);
      }
      if (HasLatitude) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (HasLongitude) {
        output.WriteRawTag(25);
        output.WriteDouble(Longitude);
      }
      if (HasAltitude) {
        output.WriteRawTag(33);
        output.WriteDouble(Altitude);
      }
      if (HasHeading) {
        output.WriteRawTag(41);
        output.WriteDouble(Heading);
      }
      if (HasPitch) {
        output.WriteRawTag(49);
        output.WriteDouble(Pitch);
      }
      if (HasBank) {
        output.WriteRawTag(57);
        output.WriteDouble(Bank);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(65);
        output.WriteDouble(GroundSpeed);
      }
      if (HasTransponderCode) {
        output.WriteRawTag(72);
        output.WriteInt32(TransponderCode);
      }
      if (HasTransponderModeC) {
        output.WriteRawTag(80);
        output.WriteBool(TransponderModeC);
      }
      if (HasOrigin) {
        output.WriteRawTag(90);
        output.WriteString(Origin);
      }
      if (HasDestination) {
        output.WriteRawTag(98);
        output.WriteString(Destination);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCallsign) {
        output.WriteRawTag(10);
        output.WriteString(Callsign);
      }
      if (HasLatitude) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (HasLongitude) {
        output.WriteRawTag(25);
        output.WriteDouble(Longitude);
      }
      if (HasAltitude) {
        output.WriteRawTag(33);
        output.WriteDouble(Altitude);
      }
      if (HasHeading) {
        output.WriteRawTag(41);
        output.WriteDouble(Heading);
      }
      if (HasPitch) {
        output.WriteRawTag(49);
        output.WriteDouble(Pitch);
      }
      if (HasBank) {
        output.WriteRawTag(57);
        output.WriteDouble(Bank);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(65);
        output.WriteDouble(GroundSpeed);
      }
      if (HasTransponderCode) {
        output.WriteRawTag(72);
        output.WriteInt32(TransponderCode);
      }
      if (HasTransponderModeC) {
        output.WriteRawTag(80);
        output.WriteBool(TransponderModeC);
      }
      if (HasOrigin) {
        output.WriteRawTag(90);
        output.WriteString(Origin);
      }
      if (HasDestination) {
        output.WriteRawTag(98);
        output.WriteString(Destination);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCallsign) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Callsign);
      }
      if (HasLatitude) {
        size += 1 + 8;
      }
      if (HasLongitude) {
        size += 1 + 8;
      }
      if (HasAltitude) {
        size += 1 + 8;
      }
      if (HasHeading) {
        size += 1 + 8;
      }
      if (HasPitch) {
        size += 1 + 8;
      }
      if (HasBank) {
        size += 1 + 8;
      }
      if (HasGroundSpeed) {
        size += 1 + 8;
      }
      if (HasTransponderCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransponderCode);
      }
      if (HasTransponderModeC) {
        size += 1 + 1;
      }
      if (HasOrigin) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Origin);
      }
      if (HasDestination) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionUpdate other) {
      if (other == null) {
        return;
      }
      if (other.HasCallsign) {
        Callsign = other.Callsign;
      }
      if (other.HasLatitude) {
        Latitude = other.Latitude;
      }
      if (other.HasLongitude) {
        Longitude = other.Longitude;
      }
      if (other.HasAltitude) {
        Altitude = other.Altitude;
      }
      if (other.HasHeading) {
        Heading = other.Heading;
      }
      if (other.HasPitch) {
        Pitch = other.Pitch;
      }
      if (other.HasBank) {
        Bank = other.Bank;
      }
      if (other.HasGroundSpeed) {
        GroundSpeed = other.GroundSpeed;
      }
      if (other.HasTransponderCode) {
        TransponderCode = other.TransponderCode;
      }
      if (other.HasTransponderModeC) {
        TransponderModeC = other.TransponderModeC;
      }
      if (other.HasOrigin) {
        Origin = other.Origin;
      }
      if (other.HasDestination) {
        Destination = other.Destination;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Callsign = input.ReadString();
            break;
          }
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Longitude = input.ReadDouble();
            break;
          }
          case 33: {
            Altitude = input.ReadDouble();
            break;
          }
          case 41: {
            Heading = input.ReadDouble();
            break;
          }
          case 49: {
            Pitch = input.ReadDouble();
            break;
          }
          case 57: {
            Bank = input.ReadDouble();
            break;
          }
          case 65: {
            GroundSpeed = input.ReadDouble();
            break;
          }
          case 72: {
            TransponderCode = input.ReadInt32();
            break;
          }
          case 80: {
            TransponderModeC = input.ReadBool();
            break;
          }
          case 90: {
            Origin = input.ReadString();
            break;
          }
          case 98: {
            Destination = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Callsign = input.ReadString();
            break;
          }
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Longitude = input.ReadDouble();
            break;
          }
          case 33: {
            Altitude = input.ReadDouble();
            break;
          }
          case 41: {
            Heading = input.ReadDouble();
            break;
          }
          case 49: {
            Pitch = input.ReadDouble();
            break;
          }
          case 57: {
            Bank = input.ReadDouble();
            break;
          }
          case 65: {
            GroundSpeed = input.ReadDouble();
            break;
          }
          case 72: {
            TransponderCode = input.ReadInt32();
            break;
          }
          case 80: {
            TransponderModeC = input.ReadBool();
            break;
          }
          case 90: {
            Origin = input.ReadString();
            break;
          }
          case 98: {
            Destination = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
