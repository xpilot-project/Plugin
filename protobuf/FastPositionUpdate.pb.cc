// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FastPositionUpdate.proto

#include "FastPositionUpdate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr FastPositionUpdate::FastPositionUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latitude_(0)
  , longitude_(0)
  , altitude_(0)
  , pitch_(0)
  , heading_(0)
  , bank_(0)
  , velocity_latitude_(0)
  , velocity_altitude_(0)
  , velocity_longitude_(0)
  , velocity_pitch_(0)
  , velocity_heading_(0)
  , velocity_bank_(0){}
struct FastPositionUpdateDefaultTypeInternal {
  constexpr FastPositionUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FastPositionUpdateDefaultTypeInternal() {}
  union {
    FastPositionUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FastPositionUpdateDefaultTypeInternal _FastPositionUpdate_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FastPositionUpdate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FastPositionUpdate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FastPositionUpdate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FastPositionUpdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, callsign_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, latitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, longitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, altitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, pitch_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, heading_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, bank_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, velocity_latitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, velocity_altitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, velocity_longitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, velocity_pitch_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FastPositionUpdate, velocity_bank_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::xpilot::FastPositionUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_FastPositionUpdate_default_instance_),
};

const char descriptor_table_protodef_FastPositionUpdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030FastPositionUpdate.proto\022\006xpilot\"\270\004\n\022F"
  "astPositionUpdate\022\025\n\010callsign\030\001 \001(\tH\000\210\001\001"
  "\022\025\n\010latitude\030\002 \001(\001H\001\210\001\001\022\026\n\tlongitude\030\003 \001"
  "(\001H\002\210\001\001\022\025\n\010altitude\030\004 \001(\001H\003\210\001\001\022\022\n\005pitch\030"
  "\005 \001(\001H\004\210\001\001\022\024\n\007heading\030\006 \001(\001H\005\210\001\001\022\021\n\004bank"
  "\030\007 \001(\001H\006\210\001\001\022\036\n\021velocity_latitude\030\010 \001(\001H\007"
  "\210\001\001\022\036\n\021velocity_altitude\030\t \001(\001H\010\210\001\001\022\037\n\022v"
  "elocity_longitude\030\n \001(\001H\t\210\001\001\022\033\n\016velocity"
  "_pitch\030\013 \001(\001H\n\210\001\001\022\035\n\020velocity_heading\030\014 "
  "\001(\001H\013\210\001\001\022\032\n\rvelocity_bank\030\r \001(\001H\014\210\001\001B\013\n\t"
  "_callsignB\013\n\t_latitudeB\014\n\n_longitudeB\013\n\t"
  "_altitudeB\010\n\006_pitchB\n\n\010_headingB\007\n\005_bank"
  "B\024\n\022_velocity_latitudeB\024\n\022_velocity_alti"
  "tudeB\025\n\023_velocity_longitudeB\021\n\017_velocity"
  "_pitchB\023\n\021_velocity_headingB\020\n\016_velocity"
  "_bankB\031\252\002\026Vatsim.Xpilot.Protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FastPositionUpdate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FastPositionUpdate_2eproto = {
  false, false, 640, descriptor_table_protodef_FastPositionUpdate_2eproto, "FastPositionUpdate.proto", 
  &descriptor_table_FastPositionUpdate_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_FastPositionUpdate_2eproto::offsets,
  file_level_metadata_FastPositionUpdate_2eproto, file_level_enum_descriptors_FastPositionUpdate_2eproto, file_level_service_descriptors_FastPositionUpdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_FastPositionUpdate_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FastPositionUpdate_2eproto);
  return descriptor_table_FastPositionUpdate_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FastPositionUpdate_2eproto(&descriptor_table_FastPositionUpdate_2eproto);
namespace xpilot {

// ===================================================================

class FastPositionUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<FastPositionUpdate>()._has_bits_);
  static void set_has_callsign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bank(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_velocity_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_velocity_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_velocity_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_velocity_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_velocity_bank(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

FastPositionUpdate::FastPositionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.FastPositionUpdate)
}
FastPositionUpdate::FastPositionUpdate(const FastPositionUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callsign()) {
    callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callsign(), 
      GetArena());
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_bank_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(velocity_bank_));
  // @@protoc_insertion_point(copy_constructor:xpilot.FastPositionUpdate)
}

void FastPositionUpdate::SharedCtor() {
callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&velocity_bank_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(velocity_bank_));
}

FastPositionUpdate::~FastPositionUpdate() {
  // @@protoc_insertion_point(destructor:xpilot.FastPositionUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastPositionUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FastPositionUpdate::ArenaDtor(void* object) {
  FastPositionUpdate* _this = reinterpret_cast< FastPositionUpdate* >(object);
  (void)_this;
}
void FastPositionUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastPositionUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FastPositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.FastPositionUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    callsign_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&velocity_latitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(velocity_latitude_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&velocity_altitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&velocity_bank_) -
        reinterpret_cast<char*>(&velocity_altitude_)) + sizeof(velocity_bank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastPositionUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string callsign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.FastPositionUpdate.callsign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_bank(&has_bits);
          bank_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_latitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_velocity_latitude(&has_bits);
          velocity_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_altitude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_velocity_altitude(&has_bits);
          velocity_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_longitude = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_velocity_longitude(&has_bits);
          velocity_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_pitch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_velocity_pitch(&has_bits);
          velocity_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_heading = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_velocity_heading(&has_bits);
          velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_bank = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_velocity_bank(&has_bits);
          velocity_bank_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastPositionUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.FastPositionUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string callsign = 1;
  if (_internal_has_callsign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callsign().data(), static_cast<int>(this->_internal_callsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.FastPositionUpdate.callsign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_callsign(), target);
  }

  // double latitude = 2;
  if (_internal_has_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double longitude = 3;
  if (_internal_has_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // double altitude = 4;
  if (_internal_has_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_altitude(), target);
  }

  // double pitch = 5;
  if (_internal_has_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_pitch(), target);
  }

  // double heading = 6;
  if (_internal_has_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_heading(), target);
  }

  // double bank = 7;
  if (_internal_has_bank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_bank(), target);
  }

  // double velocity_latitude = 8;
  if (_internal_has_velocity_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_velocity_latitude(), target);
  }

  // double velocity_altitude = 9;
  if (_internal_has_velocity_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_velocity_altitude(), target);
  }

  // double velocity_longitude = 10;
  if (_internal_has_velocity_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_velocity_longitude(), target);
  }

  // double velocity_pitch = 11;
  if (_internal_has_velocity_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_velocity_pitch(), target);
  }

  // double velocity_heading = 12;
  if (_internal_has_velocity_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_velocity_heading(), target);
  }

  // double velocity_bank = 13;
  if (_internal_has_velocity_bank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_velocity_bank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.FastPositionUpdate)
  return target;
}

size_t FastPositionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.FastPositionUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string callsign = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callsign());
    }

    // double latitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // double longitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // double altitude = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // double pitch = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // double heading = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // double bank = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // double velocity_latitude = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // double velocity_altitude = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // double velocity_longitude = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // double velocity_pitch = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // double velocity_heading = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // double velocity_bank = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastPositionUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.FastPositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const FastPositionUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastPositionUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.FastPositionUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.FastPositionUpdate)
    MergeFrom(*source);
  }
}

void FastPositionUpdate::MergeFrom(const FastPositionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.FastPositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_callsign(from._internal_callsign());
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      bank_ = from.bank_;
    }
    if (cached_has_bits & 0x00000080u) {
      velocity_latitude_ = from.velocity_latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      velocity_altitude_ = from.velocity_altitude_;
    }
    if (cached_has_bits & 0x00000200u) {
      velocity_longitude_ = from.velocity_longitude_;
    }
    if (cached_has_bits & 0x00000400u) {
      velocity_pitch_ = from.velocity_pitch_;
    }
    if (cached_has_bits & 0x00000800u) {
      velocity_heading_ = from.velocity_heading_;
    }
    if (cached_has_bits & 0x00001000u) {
      velocity_bank_ = from.velocity_bank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FastPositionUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.FastPositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastPositionUpdate::CopyFrom(const FastPositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.FastPositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastPositionUpdate::IsInitialized() const {
  return true;
}

void FastPositionUpdate::InternalSwap(FastPositionUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  callsign_.Swap(&other->callsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FastPositionUpdate, velocity_bank_)
      + sizeof(FastPositionUpdate::velocity_bank_)
      - PROTOBUF_FIELD_OFFSET(FastPositionUpdate, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FastPositionUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::FastPositionUpdate* Arena::CreateMaybeMessage< ::xpilot::FastPositionUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::FastPositionUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
