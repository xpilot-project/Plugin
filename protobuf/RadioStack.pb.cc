// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RadioStack.proto

#include "RadioStack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr RadioStack::RadioStack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_com_selection_(0)
  , com1_freq_(0)
  , com1_volume_(0)
  , com1_power_(false)
  , com1_audio_selection_(false)
  , com2_power_(false)
  , com2_audio_selection_(false)
  , com2_freq_(0)
  , com2_volume_(0)
  , transponder_code_(0)
  , avionics_power_on_(false)
  , transponder_ident_(false)
  , transponder_mode_(0){}
struct RadioStackDefaultTypeInternal {
  constexpr RadioStackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadioStackDefaultTypeInternal() {}
  union {
    RadioStack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadioStackDefaultTypeInternal _RadioStack_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RadioStack_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RadioStack_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RadioStack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RadioStack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, audio_com_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com1_power_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com1_freq_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com1_audio_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com1_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com2_power_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com2_freq_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com2_audio_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com2_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, avionics_power_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, transponder_code_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, transponder_mode_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, transponder_ident_),
  0,
  3,
  1,
  4,
  2,
  5,
  7,
  6,
  8,
  10,
  9,
  12,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::xpilot::RadioStack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_RadioStack_default_instance_),
};

const char descriptor_table_protodef_RadioStack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020RadioStack.proto\022\006xpilot\"\202\005\n\nRadioStac"
  "k\022 \n\023audio_com_selection\030\001 \001(\005H\000\210\001\001\022\027\n\nc"
  "om1_power\030\002 \001(\010H\001\210\001\001\022\026\n\tcom1_freq\030\003 \001(\005H"
  "\002\210\001\001\022!\n\024com1_audio_selection\030\004 \001(\010H\003\210\001\001\022"
  "\030\n\013com1_volume\030\005 \001(\002H\004\210\001\001\022\027\n\ncom2_power\030"
  "\006 \001(\010H\005\210\001\001\022\026\n\tcom2_freq\030\007 \001(\005H\006\210\001\001\022!\n\024co"
  "m2_audio_selection\030\010 \001(\010H\007\210\001\001\022\030\n\013com2_vo"
  "lume\030\t \001(\002H\010\210\001\001\022\036\n\021avionics_power_on\030\n \001"
  "(\010H\t\210\001\001\022\035\n\020transponder_code\030\013 \001(\005H\n\210\001\001\022\035"
  "\n\020transponder_mode\030\014 \001(\005H\013\210\001\001\022\036\n\021transpo"
  "nder_ident\030\r \001(\010H\014\210\001\001B\026\n\024_audio_com_sele"
  "ctionB\r\n\013_com1_powerB\014\n\n_com1_freqB\027\n\025_c"
  "om1_audio_selectionB\016\n\014_com1_volumeB\r\n\013_"
  "com2_powerB\014\n\n_com2_freqB\027\n\025_com2_audio_"
  "selectionB\016\n\014_com2_volumeB\024\n\022_avionics_p"
  "ower_onB\023\n\021_transponder_codeB\023\n\021_transpo"
  "nder_modeB\024\n\022_transponder_identB\031\252\002\026Vats"
  "im.Xpilot.Protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RadioStack_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RadioStack_2eproto = {
  false, false, 706, descriptor_table_protodef_RadioStack_2eproto, "RadioStack.proto", 
  &descriptor_table_RadioStack_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_RadioStack_2eproto::offsets,
  file_level_metadata_RadioStack_2eproto, file_level_enum_descriptors_RadioStack_2eproto, file_level_service_descriptors_RadioStack_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_RadioStack_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RadioStack_2eproto);
  return descriptor_table_RadioStack_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_RadioStack_2eproto(&descriptor_table_RadioStack_2eproto);
namespace xpilot {

// ===================================================================

class RadioStack::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioStack>()._has_bits_);
  static void set_has_audio_com_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_com1_power(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_com1_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_com1_audio_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_com1_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_com2_power(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_com2_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_com2_audio_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_com2_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_avionics_power_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_transponder_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transponder_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_transponder_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

RadioStack::RadioStack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.RadioStack)
}
RadioStack::RadioStack(const RadioStack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&audio_com_selection_, &from.audio_com_selection_,
    static_cast<size_t>(reinterpret_cast<char*>(&transponder_mode_) -
    reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(transponder_mode_));
  // @@protoc_insertion_point(copy_constructor:xpilot.RadioStack)
}

void RadioStack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_com_selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transponder_mode_) -
    reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(transponder_mode_));
}

RadioStack::~RadioStack() {
  // @@protoc_insertion_point(destructor:xpilot.RadioStack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadioStack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadioStack::ArenaDtor(void* object) {
  RadioStack* _this = reinterpret_cast< RadioStack* >(object);
  (void)_this;
}
void RadioStack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadioStack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadioStack::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.RadioStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&audio_com_selection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&com2_freq_) -
        reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(com2_freq_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&com2_volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transponder_mode_) -
        reinterpret_cast<char*>(&com2_volume_)) + sizeof(transponder_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioStack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 audio_com_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_audio_com_selection(&has_bits);
          audio_com_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com1_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_com1_power(&has_bits);
          com1_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 com1_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_com1_freq(&has_bits);
          com1_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com1_audio_selection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_com1_audio_selection(&has_bits);
          com1_audio_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float com1_volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_com1_volume(&has_bits);
          com1_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool com2_power = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_com2_power(&has_bits);
          com2_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 com2_freq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_com2_freq(&has_bits);
          com2_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com2_audio_selection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_com2_audio_selection(&has_bits);
          com2_audio_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float com2_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_com2_volume(&has_bits);
          com2_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool avionics_power_on = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_avionics_power_on(&has_bits);
          avionics_power_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transponder_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_transponder_code(&has_bits);
          transponder_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transponder_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_transponder_mode(&has_bits);
          transponder_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transponder_ident = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_transponder_ident(&has_bits);
          transponder_ident_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadioStack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.RadioStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 audio_com_selection = 1;
  if (_internal_has_audio_com_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_audio_com_selection(), target);
  }

  // bool com1_power = 2;
  if (_internal_has_com1_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_com1_power(), target);
  }

  // int32 com1_freq = 3;
  if (_internal_has_com1_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_com1_freq(), target);
  }

  // bool com1_audio_selection = 4;
  if (_internal_has_com1_audio_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_com1_audio_selection(), target);
  }

  // float com1_volume = 5;
  if (_internal_has_com1_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_com1_volume(), target);
  }

  // bool com2_power = 6;
  if (_internal_has_com2_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_com2_power(), target);
  }

  // int32 com2_freq = 7;
  if (_internal_has_com2_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_com2_freq(), target);
  }

  // bool com2_audio_selection = 8;
  if (_internal_has_com2_audio_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_com2_audio_selection(), target);
  }

  // float com2_volume = 9;
  if (_internal_has_com2_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_com2_volume(), target);
  }

  // bool avionics_power_on = 10;
  if (_internal_has_avionics_power_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_avionics_power_on(), target);
  }

  // int32 transponder_code = 11;
  if (_internal_has_transponder_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_transponder_code(), target);
  }

  // int32 transponder_mode = 12;
  if (_internal_has_transponder_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_transponder_mode(), target);
  }

  // bool transponder_ident = 13;
  if (_internal_has_transponder_ident()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_transponder_ident(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.RadioStack)
  return target;
}

size_t RadioStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.RadioStack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // int32 audio_com_selection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_audio_com_selection());
    }

    // int32 com1_freq = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com1_freq());
    }

    // float com1_volume = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // bool com1_power = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // bool com1_audio_selection = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // bool com2_power = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // bool com2_audio_selection = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // int32 com2_freq = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com2_freq());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // float com2_volume = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // int32 transponder_code = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transponder_code());
    }

    // bool avionics_power_on = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // bool transponder_ident = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // int32 transponder_mode = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transponder_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadioStack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.RadioStack)
  GOOGLE_DCHECK_NE(&from, this);
  const RadioStack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadioStack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.RadioStack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.RadioStack)
    MergeFrom(*source);
  }
}

void RadioStack::MergeFrom(const RadioStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.RadioStack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      audio_com_selection_ = from.audio_com_selection_;
    }
    if (cached_has_bits & 0x00000002u) {
      com1_freq_ = from.com1_freq_;
    }
    if (cached_has_bits & 0x00000004u) {
      com1_volume_ = from.com1_volume_;
    }
    if (cached_has_bits & 0x00000008u) {
      com1_power_ = from.com1_power_;
    }
    if (cached_has_bits & 0x00000010u) {
      com1_audio_selection_ = from.com1_audio_selection_;
    }
    if (cached_has_bits & 0x00000020u) {
      com2_power_ = from.com2_power_;
    }
    if (cached_has_bits & 0x00000040u) {
      com2_audio_selection_ = from.com2_audio_selection_;
    }
    if (cached_has_bits & 0x00000080u) {
      com2_freq_ = from.com2_freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      com2_volume_ = from.com2_volume_;
    }
    if (cached_has_bits & 0x00000200u) {
      transponder_code_ = from.transponder_code_;
    }
    if (cached_has_bits & 0x00000400u) {
      avionics_power_on_ = from.avionics_power_on_;
    }
    if (cached_has_bits & 0x00000800u) {
      transponder_ident_ = from.transponder_ident_;
    }
    if (cached_has_bits & 0x00001000u) {
      transponder_mode_ = from.transponder_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadioStack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.RadioStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioStack::CopyFrom(const RadioStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.RadioStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioStack::IsInitialized() const {
  return true;
}

void RadioStack::InternalSwap(RadioStack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioStack, transponder_mode_)
      + sizeof(RadioStack::transponder_mode_)
      - PROTOBUF_FIELD_OFFSET(RadioStack, audio_com_selection_)>(
          reinterpret_cast<char*>(&audio_com_selection_),
          reinterpret_cast<char*>(&other->audio_com_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioStack::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::RadioStack* Arena::CreateMaybeMessage< ::xpilot::RadioStack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::RadioStack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
