// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RadioStack.proto

#include "RadioStack.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr RadioStack::RadioStack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transmit_com_selection_(0)
  , avionics_power_on_(false)
  , com1_receive_enabled_(false)
  , com2_receive_enabled_(false)
  , com1_frequency_(0)
  , com2_frequency_(0){}
struct RadioStackDefaultTypeInternal {
  constexpr RadioStackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadioStackDefaultTypeInternal() {}
  union {
    RadioStack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadioStackDefaultTypeInternal _RadioStack_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RadioStack_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RadioStack_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RadioStack_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_RadioStack_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, avionics_power_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, transmit_com_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com1_receive_enabled_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com1_frequency_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com2_receive_enabled_),
  PROTOBUF_FIELD_OFFSET(::xpilot::RadioStack, com2_frequency_),
  1,
  0,
  2,
  4,
  3,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::xpilot::RadioStack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_RadioStack_default_instance_),
};

const char descriptor_table_protodef_RadioStack_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020RadioStack.proto\022\006xpilot\"\332\002\n\nRadioStac"
  "k\022\036\n\021avionics_power_on\030\001 \001(\010H\000\210\001\001\022#\n\026tra"
  "nsmit_com_selection\030\002 \001(\005H\001\210\001\001\022!\n\024com1_r"
  "eceive_enabled\030\003 \001(\010H\002\210\001\001\022\033\n\016com1_freque"
  "ncy\030\004 \001(\005H\003\210\001\001\022!\n\024com2_receive_enabled\030\005"
  " \001(\010H\004\210\001\001\022\033\n\016com2_frequency\030\006 \001(\005H\005\210\001\001B\024"
  "\n\022_avionics_power_onB\031\n\027_transmit_com_se"
  "lectionB\027\n\025_com1_receive_enabledB\021\n\017_com"
  "1_frequencyB\027\n\025_com2_receive_enabledB\021\n\017"
  "_com2_frequencyB\031\252\002\026Vatsim.Xpilot.Protob"
  "ufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RadioStack_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RadioStack_2eproto = {
  false, false, 410, descriptor_table_protodef_RadioStack_2eproto, "RadioStack.proto", 
  &descriptor_table_RadioStack_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_RadioStack_2eproto::offsets,
  file_level_metadata_RadioStack_2eproto, file_level_enum_descriptors_RadioStack_2eproto, file_level_service_descriptors_RadioStack_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_RadioStack_2eproto_getter() {
  return &descriptor_table_RadioStack_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_RadioStack_2eproto(&descriptor_table_RadioStack_2eproto);
namespace xpilot {

// ===================================================================

class RadioStack::_Internal {
 public:
  using HasBits = decltype(std::declval<RadioStack>()._has_bits_);
  static void set_has_avionics_power_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transmit_com_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_com1_receive_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_com1_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_com2_receive_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_com2_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RadioStack::RadioStack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.RadioStack)
}
RadioStack::RadioStack(const RadioStack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&transmit_com_selection_, &from.transmit_com_selection_,
    static_cast<size_t>(reinterpret_cast<char*>(&com2_frequency_) -
    reinterpret_cast<char*>(&transmit_com_selection_)) + sizeof(com2_frequency_));
  // @@protoc_insertion_point(copy_constructor:xpilot.RadioStack)
}

void RadioStack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transmit_com_selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&com2_frequency_) -
    reinterpret_cast<char*>(&transmit_com_selection_)) + sizeof(com2_frequency_));
}

RadioStack::~RadioStack() {
  // @@protoc_insertion_point(destructor:xpilot.RadioStack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadioStack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadioStack::ArenaDtor(void* object) {
  RadioStack* _this = reinterpret_cast< RadioStack* >(object);
  (void)_this;
}
void RadioStack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadioStack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadioStack::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.RadioStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&transmit_com_selection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&com2_frequency_) -
        reinterpret_cast<char*>(&transmit_com_selection_)) + sizeof(com2_frequency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadioStack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool avionics_power_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_avionics_power_on(&has_bits);
          avionics_power_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 transmit_com_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_transmit_com_selection(&has_bits);
          transmit_com_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool com1_receive_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_com1_receive_enabled(&has_bits);
          com1_receive_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 com1_frequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_com1_frequency(&has_bits);
          com1_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool com2_receive_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_com2_receive_enabled(&has_bits);
          com2_receive_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 com2_frequency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_com2_frequency(&has_bits);
          com2_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadioStack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.RadioStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool avionics_power_on = 1;
  if (_internal_has_avionics_power_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_avionics_power_on(), target);
  }

  // optional int32 transmit_com_selection = 2;
  if (_internal_has_transmit_com_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_transmit_com_selection(), target);
  }

  // optional bool com1_receive_enabled = 3;
  if (_internal_has_com1_receive_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_com1_receive_enabled(), target);
  }

  // optional int32 com1_frequency = 4;
  if (_internal_has_com1_frequency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_com1_frequency(), target);
  }

  // optional bool com2_receive_enabled = 5;
  if (_internal_has_com2_receive_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_com2_receive_enabled(), target);
  }

  // optional int32 com2_frequency = 6;
  if (_internal_has_com2_frequency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_com2_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.RadioStack)
  return target;
}

size_t RadioStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.RadioStack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 transmit_com_selection = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transmit_com_selection());
    }

    // optional bool avionics_power_on = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool com1_receive_enabled = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool com2_receive_enabled = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 com1_frequency = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com1_frequency());
    }

    // optional int32 com2_frequency = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com2_frequency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadioStack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.RadioStack)
  GOOGLE_DCHECK_NE(&from, this);
  const RadioStack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadioStack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.RadioStack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.RadioStack)
    MergeFrom(*source);
  }
}

void RadioStack::MergeFrom(const RadioStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.RadioStack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      transmit_com_selection_ = from.transmit_com_selection_;
    }
    if (cached_has_bits & 0x00000002u) {
      avionics_power_on_ = from.avionics_power_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      com1_receive_enabled_ = from.com1_receive_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      com2_receive_enabled_ = from.com2_receive_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      com1_frequency_ = from.com1_frequency_;
    }
    if (cached_has_bits & 0x00000020u) {
      com2_frequency_ = from.com2_frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadioStack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.RadioStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadioStack::CopyFrom(const RadioStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.RadioStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadioStack::IsInitialized() const {
  return true;
}

void RadioStack::InternalSwap(RadioStack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadioStack, com2_frequency_)
      + sizeof(RadioStack::com2_frequency_)
      - PROTOBUF_FIELD_OFFSET(RadioStack, transmit_com_selection_)>(
          reinterpret_cast<char*>(&transmit_com_selection_),
          reinterpret_cast<char*>(&other->transmit_com_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadioStack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_RadioStack_2eproto_getter, &descriptor_table_RadioStack_2eproto_once,
      file_level_metadata_RadioStack_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::RadioStack* Arena::CreateMaybeMessage< ::xpilot::RadioStack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::RadioStack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
