// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Envelope.proto

#include "Envelope.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr Envelope::Envelope(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , _oneof_case_{}{}
struct EnvelopeDefaultTypeInternal {
  constexpr EnvelopeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvelopeDefaultTypeInternal() {}
  union {
    Envelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvelopeDefaultTypeInternal _Envelope_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Envelope_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Envelope_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Envelope_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Envelope_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::xpilot::Envelope, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::Envelope, timestamp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::xpilot::Envelope, event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::Envelope)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_Envelope_default_instance_),
};

const char descriptor_table_protodef_Envelope_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Envelope.proto\022\006xpilot\032\037google/protobu"
  "f/timestamp.proto\032\021AppMetadata.proto\032\023Cs"
  "lValidation.proto\032\016AddPlane.proto\032\026Chang"
  "ePlaneModel.proto\032\024PositionUpdate.proto\032"
  "\021DeletePlane.proto\032\026NetworkConnected.pro"
  "to\032\031NetworkDisconnected.proto\032\024AirplaneC"
  "onfig.proto\032\027NearbyControllers.proto\032\034Pr"
  "ivateMessageReceived.proto\032\030PrivateMessa"
  "geSent.proto\032\024SetTransponder.proto\032\030Fast"
  "PositionUpdate.proto\032\025PlaneAddedToSim.pr"
  "oto\032\031PlaneRemovedFromSim.proto\032\023SetRadio"
  "Stack.proto\032\033RequestControllerInfo.proto"
  "\032\027TriggerDisconnect.proto\032\031TextMessageRe"
  "ceived.proto\032\025TextMessageSent.proto\032\033Ser"
  "verMessageReceived.proto\032\023MetarReceived."
  "proto\032\022RequestMetar.proto\032\020WallopSent.pr"
  "oto\032\036BroadcastMessageReceived.proto\032\027Inf"
  "oMessagePosted.proto\032\020NotePosted.proto\032\036"
  "SimulatorConnectionState.proto\032\017AppConfi"
  "g.proto\032\020RadioStack.proto\"\331\r\n\010Envelope\022-"
  "\n\ttimestamp\030\001 \001(\0132\032.google.protobuf.Time"
  "stamp\0221\n\017position_update\030\002 \001(\0132\026.xpilot."
  "PositionUpdateH\000\022:\n\024fast_position_update"
  "\030\003 \001(\0132\032.xpilot.FastPositionUpdateH\000\0221\n\017"
  "airplane_config\030\004 \001(\0132\026.xpilot.AirplaneC"
  "onfigH\000\022%\n\tadd_plane\030\005 \001(\0132\020.xpilot.AddP"
  "laneH\000\0225\n\022plane_added_to_sim\030\006 \001(\0132\027.xpi"
  "lot.PlaneAddedToSimH\000\0226\n\022change_plane_mo"
  "del\030\007 \001(\0132\030.xpilot.ChangePlaneModelH\000\022+\n"
  "\014delete_plane\030\010 \001(\0132\023.xpilot.DeletePlane"
  "H\000\022B\n\030private_message_received\030\t \001(\0132\036.x"
  "pilot.PrivateMessageReceivedH\000\022:\n\024privat"
  "e_message_sent\030\n \001(\0132\032.xpilot.PrivateMes"
  "sageSentH\000\022<\n\025text_message_received\030\013 \001("
  "\0132\033.xpilot.TextMessageReceivedH\000\0224\n\021text"
  "_message_sent\030\014 \001(\0132\027.xpilot.TextMessage"
  "SentH\000\0225\n\021network_connected\030\r \001(\0132\030.xpil"
  "ot.NetworkConnectedH\000\022;\n\024network_disconn"
  "ected\030\016 \001(\0132\033.xpilot.NetworkDisconnected"
  "H\000\0227\n\022nearby_controllers\030\017 \001(\0132\031.xpilot."
  "NearbyControllersH\000\0221\n\017set_transponder\030\020"
  " \001(\0132\026.xpilot.SetTransponderH\000\022/\n\016set_ra"
  "diostack\030\021 \001(\0132\025.xpilot.SetRadioStackH\000\022"
  "*\n\013app_metdata\030\022 \001(\0132\023.xpilot.AppMetadat"
  "aH\000\022/\n\016csl_validation\030\023 \001(\0132\025.xpilot.Csl"
  "ValidationH\000\022@\n\027request_controller_info\030"
  "\024 \001(\0132\035.xpilot.RequestControllerInfoH\000\0227"
  "\n\022trigger_disconnect\030\025 \001(\0132\031.xpilot.Trig"
  "gerDisconnectH\000\022=\n\026plane_removed_from_si"
  "m\030\026 \001(\0132\033.xpilot.PlaneRemovedFromSimH\000\022@"
  "\n\027server_message_received\030\027 \001(\0132\035.xpilot"
  ".ServerMessageReceivedH\000\022-\n\rrequest_meta"
  "r\030\030 \001(\0132\024.xpilot.RequestMetarH\000\022/\n\016metar"
  "_received\030\031 \001(\0132\025.xpilot.MetarReceivedH\000"
  "\022)\n\013wallop_sent\030\032 \001(\0132\022.xpilot.WallopSen"
  "tH\000\022F\n\032broadcast_message_received\030\033 \001(\0132"
  " .xpilot.BroadcastMessageReceivedH\000\0228\n\023i"
  "nfo_message_posted\030\034 \001(\0132\031.xpilot.InfoMe"
  "ssagePostedH\000\022)\n\013note_posted\030\035 \001(\0132\022.xpi"
  "lot.NotePostedH\000\022F\n\032simulator_connection"
  "_state\030\036 \001(\0132 .xpilot.SimulatorConnectio"
  "nStateH\000\022\'\n\napp_config\030\037 \001(\0132\021.xpilot.Ap"
  "pConfigH\000\022)\n\013radio_stack\030  \001(\0132\022.xpilot."
  "RadioStackH\000B\007\n\005eventB\031\252\002\026Vatsim.Xpilot."
  "Protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Envelope_2eproto_deps[32] = {
  &::descriptor_table_AddPlane_2eproto,
  &::descriptor_table_AirplaneConfig_2eproto,
  &::descriptor_table_AppConfig_2eproto,
  &::descriptor_table_AppMetadata_2eproto,
  &::descriptor_table_BroadcastMessageReceived_2eproto,
  &::descriptor_table_ChangePlaneModel_2eproto,
  &::descriptor_table_CslValidation_2eproto,
  &::descriptor_table_DeletePlane_2eproto,
  &::descriptor_table_FastPositionUpdate_2eproto,
  &::descriptor_table_InfoMessagePosted_2eproto,
  &::descriptor_table_MetarReceived_2eproto,
  &::descriptor_table_NearbyControllers_2eproto,
  &::descriptor_table_NetworkConnected_2eproto,
  &::descriptor_table_NetworkDisconnected_2eproto,
  &::descriptor_table_NotePosted_2eproto,
  &::descriptor_table_PlaneAddedToSim_2eproto,
  &::descriptor_table_PlaneRemovedFromSim_2eproto,
  &::descriptor_table_PositionUpdate_2eproto,
  &::descriptor_table_PrivateMessageReceived_2eproto,
  &::descriptor_table_PrivateMessageSent_2eproto,
  &::descriptor_table_RadioStack_2eproto,
  &::descriptor_table_RequestControllerInfo_2eproto,
  &::descriptor_table_RequestMetar_2eproto,
  &::descriptor_table_ServerMessageReceived_2eproto,
  &::descriptor_table_SetRadioStack_2eproto,
  &::descriptor_table_SetTransponder_2eproto,
  &::descriptor_table_SimulatorConnectionState_2eproto,
  &::descriptor_table_TextMessageReceived_2eproto,
  &::descriptor_table_TextMessageSent_2eproto,
  &::descriptor_table_TriggerDisconnect_2eproto,
  &::descriptor_table_WallopSent_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Envelope_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Envelope_2eproto = {
  false, false, 2576, descriptor_table_protodef_Envelope_2eproto, "Envelope.proto", 
  &descriptor_table_Envelope_2eproto_once, descriptor_table_Envelope_2eproto_deps, 32, 1,
  schemas, file_default_instances, TableStruct_Envelope_2eproto::offsets,
  file_level_metadata_Envelope_2eproto, file_level_enum_descriptors_Envelope_2eproto, file_level_service_descriptors_Envelope_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Envelope_2eproto_getter() {
  return &descriptor_table_Envelope_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Envelope_2eproto(&descriptor_table_Envelope_2eproto);
namespace xpilot {

// ===================================================================

class Envelope::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Envelope* msg);
  static const ::xpilot::PositionUpdate& position_update(const Envelope* msg);
  static const ::xpilot::FastPositionUpdate& fast_position_update(const Envelope* msg);
  static const ::xpilot::AirplaneConfig& airplane_config(const Envelope* msg);
  static const ::xpilot::AddPlane& add_plane(const Envelope* msg);
  static const ::xpilot::PlaneAddedToSim& plane_added_to_sim(const Envelope* msg);
  static const ::xpilot::ChangePlaneModel& change_plane_model(const Envelope* msg);
  static const ::xpilot::DeletePlane& delete_plane(const Envelope* msg);
  static const ::xpilot::PrivateMessageReceived& private_message_received(const Envelope* msg);
  static const ::xpilot::PrivateMessageSent& private_message_sent(const Envelope* msg);
  static const ::xpilot::TextMessageReceived& text_message_received(const Envelope* msg);
  static const ::xpilot::TextMessageSent& text_message_sent(const Envelope* msg);
  static const ::xpilot::NetworkConnected& network_connected(const Envelope* msg);
  static const ::xpilot::NetworkDisconnected& network_disconnected(const Envelope* msg);
  static const ::xpilot::NearbyControllers& nearby_controllers(const Envelope* msg);
  static const ::xpilot::SetTransponder& set_transponder(const Envelope* msg);
  static const ::xpilot::SetRadioStack& set_radiostack(const Envelope* msg);
  static const ::xpilot::AppMetadata& app_metdata(const Envelope* msg);
  static const ::xpilot::CslValidation& csl_validation(const Envelope* msg);
  static const ::xpilot::RequestControllerInfo& request_controller_info(const Envelope* msg);
  static const ::xpilot::TriggerDisconnect& trigger_disconnect(const Envelope* msg);
  static const ::xpilot::PlaneRemovedFromSim& plane_removed_from_sim(const Envelope* msg);
  static const ::xpilot::ServerMessageReceived& server_message_received(const Envelope* msg);
  static const ::xpilot::RequestMetar& request_metar(const Envelope* msg);
  static const ::xpilot::MetarReceived& metar_received(const Envelope* msg);
  static const ::xpilot::WallopSent& wallop_sent(const Envelope* msg);
  static const ::xpilot::BroadcastMessageReceived& broadcast_message_received(const Envelope* msg);
  static const ::xpilot::InfoMessagePosted& info_message_posted(const Envelope* msg);
  static const ::xpilot::NotePosted& note_posted(const Envelope* msg);
  static const ::xpilot::SimulatorConnectionState& simulator_connection_state(const Envelope* msg);
  static const ::xpilot::AppConfig& app_config(const Envelope* msg);
  static const ::xpilot::RadioStack& radio_stack(const Envelope* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Envelope::_Internal::timestamp(const Envelope* msg) {
  return *msg->timestamp_;
}
const ::xpilot::PositionUpdate&
Envelope::_Internal::position_update(const Envelope* msg) {
  return *msg->event_.position_update_;
}
const ::xpilot::FastPositionUpdate&
Envelope::_Internal::fast_position_update(const Envelope* msg) {
  return *msg->event_.fast_position_update_;
}
const ::xpilot::AirplaneConfig&
Envelope::_Internal::airplane_config(const Envelope* msg) {
  return *msg->event_.airplane_config_;
}
const ::xpilot::AddPlane&
Envelope::_Internal::add_plane(const Envelope* msg) {
  return *msg->event_.add_plane_;
}
const ::xpilot::PlaneAddedToSim&
Envelope::_Internal::plane_added_to_sim(const Envelope* msg) {
  return *msg->event_.plane_added_to_sim_;
}
const ::xpilot::ChangePlaneModel&
Envelope::_Internal::change_plane_model(const Envelope* msg) {
  return *msg->event_.change_plane_model_;
}
const ::xpilot::DeletePlane&
Envelope::_Internal::delete_plane(const Envelope* msg) {
  return *msg->event_.delete_plane_;
}
const ::xpilot::PrivateMessageReceived&
Envelope::_Internal::private_message_received(const Envelope* msg) {
  return *msg->event_.private_message_received_;
}
const ::xpilot::PrivateMessageSent&
Envelope::_Internal::private_message_sent(const Envelope* msg) {
  return *msg->event_.private_message_sent_;
}
const ::xpilot::TextMessageReceived&
Envelope::_Internal::text_message_received(const Envelope* msg) {
  return *msg->event_.text_message_received_;
}
const ::xpilot::TextMessageSent&
Envelope::_Internal::text_message_sent(const Envelope* msg) {
  return *msg->event_.text_message_sent_;
}
const ::xpilot::NetworkConnected&
Envelope::_Internal::network_connected(const Envelope* msg) {
  return *msg->event_.network_connected_;
}
const ::xpilot::NetworkDisconnected&
Envelope::_Internal::network_disconnected(const Envelope* msg) {
  return *msg->event_.network_disconnected_;
}
const ::xpilot::NearbyControllers&
Envelope::_Internal::nearby_controllers(const Envelope* msg) {
  return *msg->event_.nearby_controllers_;
}
const ::xpilot::SetTransponder&
Envelope::_Internal::set_transponder(const Envelope* msg) {
  return *msg->event_.set_transponder_;
}
const ::xpilot::SetRadioStack&
Envelope::_Internal::set_radiostack(const Envelope* msg) {
  return *msg->event_.set_radiostack_;
}
const ::xpilot::AppMetadata&
Envelope::_Internal::app_metdata(const Envelope* msg) {
  return *msg->event_.app_metdata_;
}
const ::xpilot::CslValidation&
Envelope::_Internal::csl_validation(const Envelope* msg) {
  return *msg->event_.csl_validation_;
}
const ::xpilot::RequestControllerInfo&
Envelope::_Internal::request_controller_info(const Envelope* msg) {
  return *msg->event_.request_controller_info_;
}
const ::xpilot::TriggerDisconnect&
Envelope::_Internal::trigger_disconnect(const Envelope* msg) {
  return *msg->event_.trigger_disconnect_;
}
const ::xpilot::PlaneRemovedFromSim&
Envelope::_Internal::plane_removed_from_sim(const Envelope* msg) {
  return *msg->event_.plane_removed_from_sim_;
}
const ::xpilot::ServerMessageReceived&
Envelope::_Internal::server_message_received(const Envelope* msg) {
  return *msg->event_.server_message_received_;
}
const ::xpilot::RequestMetar&
Envelope::_Internal::request_metar(const Envelope* msg) {
  return *msg->event_.request_metar_;
}
const ::xpilot::MetarReceived&
Envelope::_Internal::metar_received(const Envelope* msg) {
  return *msg->event_.metar_received_;
}
const ::xpilot::WallopSent&
Envelope::_Internal::wallop_sent(const Envelope* msg) {
  return *msg->event_.wallop_sent_;
}
const ::xpilot::BroadcastMessageReceived&
Envelope::_Internal::broadcast_message_received(const Envelope* msg) {
  return *msg->event_.broadcast_message_received_;
}
const ::xpilot::InfoMessagePosted&
Envelope::_Internal::info_message_posted(const Envelope* msg) {
  return *msg->event_.info_message_posted_;
}
const ::xpilot::NotePosted&
Envelope::_Internal::note_posted(const Envelope* msg) {
  return *msg->event_.note_posted_;
}
const ::xpilot::SimulatorConnectionState&
Envelope::_Internal::simulator_connection_state(const Envelope* msg) {
  return *msg->event_.simulator_connection_state_;
}
const ::xpilot::AppConfig&
Envelope::_Internal::app_config(const Envelope* msg) {
  return *msg->event_.app_config_;
}
const ::xpilot::RadioStack&
Envelope::_Internal::radio_stack(const Envelope* msg) {
  return *msg->event_.radio_stack_;
}
void Envelope::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void Envelope::set_allocated_position_update(::xpilot::PositionUpdate* position_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (position_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_update));
    if (message_arena != submessage_arena) {
      position_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_update, submessage_arena);
    }
    set_has_position_update();
    event_.position_update_ = position_update;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.position_update)
}
void Envelope::clear_position_update() {
  if (_internal_has_position_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.position_update_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_fast_position_update(::xpilot::FastPositionUpdate* fast_position_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (fast_position_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_position_update));
    if (message_arena != submessage_arena) {
      fast_position_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_position_update, submessage_arena);
    }
    set_has_fast_position_update();
    event_.fast_position_update_ = fast_position_update;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.fast_position_update)
}
void Envelope::clear_fast_position_update() {
  if (_internal_has_fast_position_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.fast_position_update_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_airplane_config(::xpilot::AirplaneConfig* airplane_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (airplane_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airplane_config));
    if (message_arena != submessage_arena) {
      airplane_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airplane_config, submessage_arena);
    }
    set_has_airplane_config();
    event_.airplane_config_ = airplane_config;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.airplane_config)
}
void Envelope::clear_airplane_config() {
  if (_internal_has_airplane_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.airplane_config_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_add_plane(::xpilot::AddPlane* add_plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (add_plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_plane));
    if (message_arena != submessage_arena) {
      add_plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_plane, submessage_arena);
    }
    set_has_add_plane();
    event_.add_plane_ = add_plane;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.add_plane)
}
void Envelope::clear_add_plane() {
  if (_internal_has_add_plane()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.add_plane_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_plane_added_to_sim(::xpilot::PlaneAddedToSim* plane_added_to_sim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (plane_added_to_sim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plane_added_to_sim));
    if (message_arena != submessage_arena) {
      plane_added_to_sim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plane_added_to_sim, submessage_arena);
    }
    set_has_plane_added_to_sim();
    event_.plane_added_to_sim_ = plane_added_to_sim;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.plane_added_to_sim)
}
void Envelope::clear_plane_added_to_sim() {
  if (_internal_has_plane_added_to_sim()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.plane_added_to_sim_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_change_plane_model(::xpilot::ChangePlaneModel* change_plane_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (change_plane_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_plane_model));
    if (message_arena != submessage_arena) {
      change_plane_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_plane_model, submessage_arena);
    }
    set_has_change_plane_model();
    event_.change_plane_model_ = change_plane_model;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.change_plane_model)
}
void Envelope::clear_change_plane_model() {
  if (_internal_has_change_plane_model()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.change_plane_model_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_delete_plane(::xpilot::DeletePlane* delete_plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (delete_plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_plane));
    if (message_arena != submessage_arena) {
      delete_plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_plane, submessage_arena);
    }
    set_has_delete_plane();
    event_.delete_plane_ = delete_plane;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.delete_plane)
}
void Envelope::clear_delete_plane() {
  if (_internal_has_delete_plane()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.delete_plane_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_private_message_received(::xpilot::PrivateMessageReceived* private_message_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (private_message_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(private_message_received));
    if (message_arena != submessage_arena) {
      private_message_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, private_message_received, submessage_arena);
    }
    set_has_private_message_received();
    event_.private_message_received_ = private_message_received;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.private_message_received)
}
void Envelope::clear_private_message_received() {
  if (_internal_has_private_message_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.private_message_received_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_private_message_sent(::xpilot::PrivateMessageSent* private_message_sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (private_message_sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(private_message_sent));
    if (message_arena != submessage_arena) {
      private_message_sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, private_message_sent, submessage_arena);
    }
    set_has_private_message_sent();
    event_.private_message_sent_ = private_message_sent;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.private_message_sent)
}
void Envelope::clear_private_message_sent() {
  if (_internal_has_private_message_sent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.private_message_sent_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_text_message_received(::xpilot::TextMessageReceived* text_message_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (text_message_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_message_received));
    if (message_arena != submessage_arena) {
      text_message_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_message_received, submessage_arena);
    }
    set_has_text_message_received();
    event_.text_message_received_ = text_message_received;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.text_message_received)
}
void Envelope::clear_text_message_received() {
  if (_internal_has_text_message_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.text_message_received_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_text_message_sent(::xpilot::TextMessageSent* text_message_sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (text_message_sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_message_sent));
    if (message_arena != submessage_arena) {
      text_message_sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_message_sent, submessage_arena);
    }
    set_has_text_message_sent();
    event_.text_message_sent_ = text_message_sent;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.text_message_sent)
}
void Envelope::clear_text_message_sent() {
  if (_internal_has_text_message_sent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.text_message_sent_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_network_connected(::xpilot::NetworkConnected* network_connected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (network_connected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_connected));
    if (message_arena != submessage_arena) {
      network_connected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_connected, submessage_arena);
    }
    set_has_network_connected();
    event_.network_connected_ = network_connected;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.network_connected)
}
void Envelope::clear_network_connected() {
  if (_internal_has_network_connected()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.network_connected_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_network_disconnected(::xpilot::NetworkDisconnected* network_disconnected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (network_disconnected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_disconnected));
    if (message_arena != submessage_arena) {
      network_disconnected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_disconnected, submessage_arena);
    }
    set_has_network_disconnected();
    event_.network_disconnected_ = network_disconnected;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.network_disconnected)
}
void Envelope::clear_network_disconnected() {
  if (_internal_has_network_disconnected()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.network_disconnected_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_nearby_controllers(::xpilot::NearbyControllers* nearby_controllers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (nearby_controllers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nearby_controllers));
    if (message_arena != submessage_arena) {
      nearby_controllers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nearby_controllers, submessage_arena);
    }
    set_has_nearby_controllers();
    event_.nearby_controllers_ = nearby_controllers;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.nearby_controllers)
}
void Envelope::clear_nearby_controllers() {
  if (_internal_has_nearby_controllers()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.nearby_controllers_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_set_transponder(::xpilot::SetTransponder* set_transponder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (set_transponder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_transponder));
    if (message_arena != submessage_arena) {
      set_transponder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_transponder, submessage_arena);
    }
    set_has_set_transponder();
    event_.set_transponder_ = set_transponder;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.set_transponder)
}
void Envelope::clear_set_transponder() {
  if (_internal_has_set_transponder()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.set_transponder_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_set_radiostack(::xpilot::SetRadioStack* set_radiostack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (set_radiostack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_radiostack));
    if (message_arena != submessage_arena) {
      set_radiostack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_radiostack, submessage_arena);
    }
    set_has_set_radiostack();
    event_.set_radiostack_ = set_radiostack;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.set_radiostack)
}
void Envelope::clear_set_radiostack() {
  if (_internal_has_set_radiostack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.set_radiostack_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_app_metdata(::xpilot::AppMetadata* app_metdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (app_metdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_metdata));
    if (message_arena != submessage_arena) {
      app_metdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_metdata, submessage_arena);
    }
    set_has_app_metdata();
    event_.app_metdata_ = app_metdata;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.app_metdata)
}
void Envelope::clear_app_metdata() {
  if (_internal_has_app_metdata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.app_metdata_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_csl_validation(::xpilot::CslValidation* csl_validation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (csl_validation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(csl_validation));
    if (message_arena != submessage_arena) {
      csl_validation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csl_validation, submessage_arena);
    }
    set_has_csl_validation();
    event_.csl_validation_ = csl_validation;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.csl_validation)
}
void Envelope::clear_csl_validation() {
  if (_internal_has_csl_validation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.csl_validation_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_request_controller_info(::xpilot::RequestControllerInfo* request_controller_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (request_controller_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_controller_info));
    if (message_arena != submessage_arena) {
      request_controller_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_controller_info, submessage_arena);
    }
    set_has_request_controller_info();
    event_.request_controller_info_ = request_controller_info;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.request_controller_info)
}
void Envelope::clear_request_controller_info() {
  if (_internal_has_request_controller_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.request_controller_info_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_trigger_disconnect(::xpilot::TriggerDisconnect* trigger_disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (trigger_disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_disconnect));
    if (message_arena != submessage_arena) {
      trigger_disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_disconnect, submessage_arena);
    }
    set_has_trigger_disconnect();
    event_.trigger_disconnect_ = trigger_disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.trigger_disconnect)
}
void Envelope::clear_trigger_disconnect() {
  if (_internal_has_trigger_disconnect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.trigger_disconnect_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_plane_removed_from_sim(::xpilot::PlaneRemovedFromSim* plane_removed_from_sim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (plane_removed_from_sim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plane_removed_from_sim));
    if (message_arena != submessage_arena) {
      plane_removed_from_sim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plane_removed_from_sim, submessage_arena);
    }
    set_has_plane_removed_from_sim();
    event_.plane_removed_from_sim_ = plane_removed_from_sim;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.plane_removed_from_sim)
}
void Envelope::clear_plane_removed_from_sim() {
  if (_internal_has_plane_removed_from_sim()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.plane_removed_from_sim_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_server_message_received(::xpilot::ServerMessageReceived* server_message_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (server_message_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_message_received));
    if (message_arena != submessage_arena) {
      server_message_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_message_received, submessage_arena);
    }
    set_has_server_message_received();
    event_.server_message_received_ = server_message_received;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.server_message_received)
}
void Envelope::clear_server_message_received() {
  if (_internal_has_server_message_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.server_message_received_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_request_metar(::xpilot::RequestMetar* request_metar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (request_metar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_metar));
    if (message_arena != submessage_arena) {
      request_metar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_metar, submessage_arena);
    }
    set_has_request_metar();
    event_.request_metar_ = request_metar;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.request_metar)
}
void Envelope::clear_request_metar() {
  if (_internal_has_request_metar()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.request_metar_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_metar_received(::xpilot::MetarReceived* metar_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (metar_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metar_received));
    if (message_arena != submessage_arena) {
      metar_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metar_received, submessage_arena);
    }
    set_has_metar_received();
    event_.metar_received_ = metar_received;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.metar_received)
}
void Envelope::clear_metar_received() {
  if (_internal_has_metar_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.metar_received_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_wallop_sent(::xpilot::WallopSent* wallop_sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (wallop_sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wallop_sent));
    if (message_arena != submessage_arena) {
      wallop_sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wallop_sent, submessage_arena);
    }
    set_has_wallop_sent();
    event_.wallop_sent_ = wallop_sent;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.wallop_sent)
}
void Envelope::clear_wallop_sent() {
  if (_internal_has_wallop_sent()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.wallop_sent_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_broadcast_message_received(::xpilot::BroadcastMessageReceived* broadcast_message_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (broadcast_message_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(broadcast_message_received));
    if (message_arena != submessage_arena) {
      broadcast_message_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast_message_received, submessage_arena);
    }
    set_has_broadcast_message_received();
    event_.broadcast_message_received_ = broadcast_message_received;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.broadcast_message_received)
}
void Envelope::clear_broadcast_message_received() {
  if (_internal_has_broadcast_message_received()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.broadcast_message_received_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_info_message_posted(::xpilot::InfoMessagePosted* info_message_posted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (info_message_posted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_message_posted));
    if (message_arena != submessage_arena) {
      info_message_posted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_message_posted, submessage_arena);
    }
    set_has_info_message_posted();
    event_.info_message_posted_ = info_message_posted;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.info_message_posted)
}
void Envelope::clear_info_message_posted() {
  if (_internal_has_info_message_posted()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.info_message_posted_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_note_posted(::xpilot::NotePosted* note_posted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (note_posted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(note_posted));
    if (message_arena != submessage_arena) {
      note_posted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, note_posted, submessage_arena);
    }
    set_has_note_posted();
    event_.note_posted_ = note_posted;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.note_posted)
}
void Envelope::clear_note_posted() {
  if (_internal_has_note_posted()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.note_posted_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_simulator_connection_state(::xpilot::SimulatorConnectionState* simulator_connection_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (simulator_connection_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simulator_connection_state));
    if (message_arena != submessage_arena) {
      simulator_connection_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simulator_connection_state, submessage_arena);
    }
    set_has_simulator_connection_state();
    event_.simulator_connection_state_ = simulator_connection_state;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.simulator_connection_state)
}
void Envelope::clear_simulator_connection_state() {
  if (_internal_has_simulator_connection_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.simulator_connection_state_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_app_config(::xpilot::AppConfig* app_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (app_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_config));
    if (message_arena != submessage_arena) {
      app_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_config, submessage_arena);
    }
    set_has_app_config();
    event_.app_config_ = app_config;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.app_config)
}
void Envelope::clear_app_config() {
  if (_internal_has_app_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.app_config_;
    }
    clear_has_event();
  }
}
void Envelope::set_allocated_radio_stack(::xpilot::RadioStack* radio_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (radio_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radio_stack));
    if (message_arena != submessage_arena) {
      radio_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radio_stack, submessage_arena);
    }
    set_has_radio_stack();
    event_.radio_stack_ = radio_stack;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Envelope.radio_stack)
}
void Envelope::clear_radio_stack() {
  if (_internal_has_radio_stack()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.radio_stack_;
    }
    clear_has_event();
  }
}
Envelope::Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  clear_has_event();
  switch (from.event_case()) {
    case kPositionUpdate: {
      _internal_mutable_position_update()->::xpilot::PositionUpdate::MergeFrom(from._internal_position_update());
      break;
    }
    case kFastPositionUpdate: {
      _internal_mutable_fast_position_update()->::xpilot::FastPositionUpdate::MergeFrom(from._internal_fast_position_update());
      break;
    }
    case kAirplaneConfig: {
      _internal_mutable_airplane_config()->::xpilot::AirplaneConfig::MergeFrom(from._internal_airplane_config());
      break;
    }
    case kAddPlane: {
      _internal_mutable_add_plane()->::xpilot::AddPlane::MergeFrom(from._internal_add_plane());
      break;
    }
    case kPlaneAddedToSim: {
      _internal_mutable_plane_added_to_sim()->::xpilot::PlaneAddedToSim::MergeFrom(from._internal_plane_added_to_sim());
      break;
    }
    case kChangePlaneModel: {
      _internal_mutable_change_plane_model()->::xpilot::ChangePlaneModel::MergeFrom(from._internal_change_plane_model());
      break;
    }
    case kDeletePlane: {
      _internal_mutable_delete_plane()->::xpilot::DeletePlane::MergeFrom(from._internal_delete_plane());
      break;
    }
    case kPrivateMessageReceived: {
      _internal_mutable_private_message_received()->::xpilot::PrivateMessageReceived::MergeFrom(from._internal_private_message_received());
      break;
    }
    case kPrivateMessageSent: {
      _internal_mutable_private_message_sent()->::xpilot::PrivateMessageSent::MergeFrom(from._internal_private_message_sent());
      break;
    }
    case kTextMessageReceived: {
      _internal_mutable_text_message_received()->::xpilot::TextMessageReceived::MergeFrom(from._internal_text_message_received());
      break;
    }
    case kTextMessageSent: {
      _internal_mutable_text_message_sent()->::xpilot::TextMessageSent::MergeFrom(from._internal_text_message_sent());
      break;
    }
    case kNetworkConnected: {
      _internal_mutable_network_connected()->::xpilot::NetworkConnected::MergeFrom(from._internal_network_connected());
      break;
    }
    case kNetworkDisconnected: {
      _internal_mutable_network_disconnected()->::xpilot::NetworkDisconnected::MergeFrom(from._internal_network_disconnected());
      break;
    }
    case kNearbyControllers: {
      _internal_mutable_nearby_controllers()->::xpilot::NearbyControllers::MergeFrom(from._internal_nearby_controllers());
      break;
    }
    case kSetTransponder: {
      _internal_mutable_set_transponder()->::xpilot::SetTransponder::MergeFrom(from._internal_set_transponder());
      break;
    }
    case kSetRadiostack: {
      _internal_mutable_set_radiostack()->::xpilot::SetRadioStack::MergeFrom(from._internal_set_radiostack());
      break;
    }
    case kAppMetdata: {
      _internal_mutable_app_metdata()->::xpilot::AppMetadata::MergeFrom(from._internal_app_metdata());
      break;
    }
    case kCslValidation: {
      _internal_mutable_csl_validation()->::xpilot::CslValidation::MergeFrom(from._internal_csl_validation());
      break;
    }
    case kRequestControllerInfo: {
      _internal_mutable_request_controller_info()->::xpilot::RequestControllerInfo::MergeFrom(from._internal_request_controller_info());
      break;
    }
    case kTriggerDisconnect: {
      _internal_mutable_trigger_disconnect()->::xpilot::TriggerDisconnect::MergeFrom(from._internal_trigger_disconnect());
      break;
    }
    case kPlaneRemovedFromSim: {
      _internal_mutable_plane_removed_from_sim()->::xpilot::PlaneRemovedFromSim::MergeFrom(from._internal_plane_removed_from_sim());
      break;
    }
    case kServerMessageReceived: {
      _internal_mutable_server_message_received()->::xpilot::ServerMessageReceived::MergeFrom(from._internal_server_message_received());
      break;
    }
    case kRequestMetar: {
      _internal_mutable_request_metar()->::xpilot::RequestMetar::MergeFrom(from._internal_request_metar());
      break;
    }
    case kMetarReceived: {
      _internal_mutable_metar_received()->::xpilot::MetarReceived::MergeFrom(from._internal_metar_received());
      break;
    }
    case kWallopSent: {
      _internal_mutable_wallop_sent()->::xpilot::WallopSent::MergeFrom(from._internal_wallop_sent());
      break;
    }
    case kBroadcastMessageReceived: {
      _internal_mutable_broadcast_message_received()->::xpilot::BroadcastMessageReceived::MergeFrom(from._internal_broadcast_message_received());
      break;
    }
    case kInfoMessagePosted: {
      _internal_mutable_info_message_posted()->::xpilot::InfoMessagePosted::MergeFrom(from._internal_info_message_posted());
      break;
    }
    case kNotePosted: {
      _internal_mutable_note_posted()->::xpilot::NotePosted::MergeFrom(from._internal_note_posted());
      break;
    }
    case kSimulatorConnectionState: {
      _internal_mutable_simulator_connection_state()->::xpilot::SimulatorConnectionState::MergeFrom(from._internal_simulator_connection_state());
      break;
    }
    case kAppConfig: {
      _internal_mutable_app_config()->::xpilot::AppConfig::MergeFrom(from._internal_app_config());
      break;
    }
    case kRadioStack: {
      _internal_mutable_radio_stack()->::xpilot::RadioStack::MergeFrom(from._internal_radio_stack());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:xpilot.Envelope)
}

void Envelope::SharedCtor() {
timestamp_ = nullptr;
clear_has_event();
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:xpilot.Envelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Envelope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (has_event()) {
    clear_event();
  }
}

void Envelope::ArenaDtor(void* object) {
  Envelope* _this = reinterpret_cast< Envelope* >(object);
  (void)_this;
}
void Envelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Envelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Envelope::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:xpilot.Envelope)
  switch (event_case()) {
    case kPositionUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.position_update_;
      }
      break;
    }
    case kFastPositionUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.fast_position_update_;
      }
      break;
    }
    case kAirplaneConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.airplane_config_;
      }
      break;
    }
    case kAddPlane: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.add_plane_;
      }
      break;
    }
    case kPlaneAddedToSim: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.plane_added_to_sim_;
      }
      break;
    }
    case kChangePlaneModel: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.change_plane_model_;
      }
      break;
    }
    case kDeletePlane: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.delete_plane_;
      }
      break;
    }
    case kPrivateMessageReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.private_message_received_;
      }
      break;
    }
    case kPrivateMessageSent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.private_message_sent_;
      }
      break;
    }
    case kTextMessageReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.text_message_received_;
      }
      break;
    }
    case kTextMessageSent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.text_message_sent_;
      }
      break;
    }
    case kNetworkConnected: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.network_connected_;
      }
      break;
    }
    case kNetworkDisconnected: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.network_disconnected_;
      }
      break;
    }
    case kNearbyControllers: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.nearby_controllers_;
      }
      break;
    }
    case kSetTransponder: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.set_transponder_;
      }
      break;
    }
    case kSetRadiostack: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.set_radiostack_;
      }
      break;
    }
    case kAppMetdata: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.app_metdata_;
      }
      break;
    }
    case kCslValidation: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.csl_validation_;
      }
      break;
    }
    case kRequestControllerInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.request_controller_info_;
      }
      break;
    }
    case kTriggerDisconnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.trigger_disconnect_;
      }
      break;
    }
    case kPlaneRemovedFromSim: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.plane_removed_from_sim_;
      }
      break;
    }
    case kServerMessageReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.server_message_received_;
      }
      break;
    }
    case kRequestMetar: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.request_metar_;
      }
      break;
    }
    case kMetarReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.metar_received_;
      }
      break;
    }
    case kWallopSent: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.wallop_sent_;
      }
      break;
    }
    case kBroadcastMessageReceived: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.broadcast_message_received_;
      }
      break;
    }
    case kInfoMessagePosted: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.info_message_posted_;
      }
      break;
    }
    case kNotePosted: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.note_posted_;
      }
      break;
    }
    case kSimulatorConnectionState: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.simulator_connection_state_;
      }
      break;
    }
    case kAppConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.app_config_;
      }
      break;
    }
    case kRadioStack: {
      if (GetArenaForAllocation() == nullptr) {
        delete event_.radio_stack_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.Envelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Envelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PositionUpdate position_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.FastPositionUpdate fast_position_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_position_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.AirplaneConfig airplane_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_airplane_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.AddPlane add_plane = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_plane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PlaneAddedToSim plane_added_to_sim = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_plane_added_to_sim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.ChangePlaneModel change_plane_model = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_plane_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.DeletePlane delete_plane = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_plane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PrivateMessageReceived private_message_received = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_private_message_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PrivateMessageSent private_message_sent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_private_message_sent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.TextMessageReceived text_message_received = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_message_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.TextMessageSent text_message_sent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_message_sent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.NetworkConnected network_connected = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_connected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.NetworkDisconnected network_disconnected = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_disconnected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.NearbyControllers nearby_controllers = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_nearby_controllers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.SetTransponder set_transponder = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_transponder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.SetRadioStack set_radiostack = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_radiostack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.AppMetadata app_metdata = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_metdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.CslValidation csl_validation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_csl_validation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.RequestControllerInfo request_controller_info = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_controller_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.TriggerDisconnect trigger_disconnect = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_disconnect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PlaneRemovedFromSim plane_removed_from_sim = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_plane_removed_from_sim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.ServerMessageReceived server_message_received = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_message_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.RequestMetar request_metar = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_metar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.MetarReceived metar_received = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_metar_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.WallopSent wallop_sent = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_wallop_sent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.BroadcastMessageReceived broadcast_message_received = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast_message_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.InfoMessagePosted info_message_posted = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_message_posted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.NotePosted note_posted = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_note_posted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.SimulatorConnectionState simulator_connection_state = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_simulator_connection_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.AppConfig app_config = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.RadioStack radio_stack = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_stack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Envelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.Envelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .xpilot.PositionUpdate position_update = 2;
  if (_internal_has_position_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position_update(this), target, stream);
  }

  // .xpilot.FastPositionUpdate fast_position_update = 3;
  if (_internal_has_fast_position_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fast_position_update(this), target, stream);
  }

  // .xpilot.AirplaneConfig airplane_config = 4;
  if (_internal_has_airplane_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::airplane_config(this), target, stream);
  }

  // .xpilot.AddPlane add_plane = 5;
  if (_internal_has_add_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::add_plane(this), target, stream);
  }

  // .xpilot.PlaneAddedToSim plane_added_to_sim = 6;
  if (_internal_has_plane_added_to_sim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::plane_added_to_sim(this), target, stream);
  }

  // .xpilot.ChangePlaneModel change_plane_model = 7;
  if (_internal_has_change_plane_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::change_plane_model(this), target, stream);
  }

  // .xpilot.DeletePlane delete_plane = 8;
  if (_internal_has_delete_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::delete_plane(this), target, stream);
  }

  // .xpilot.PrivateMessageReceived private_message_received = 9;
  if (_internal_has_private_message_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::private_message_received(this), target, stream);
  }

  // .xpilot.PrivateMessageSent private_message_sent = 10;
  if (_internal_has_private_message_sent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::private_message_sent(this), target, stream);
  }

  // .xpilot.TextMessageReceived text_message_received = 11;
  if (_internal_has_text_message_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::text_message_received(this), target, stream);
  }

  // .xpilot.TextMessageSent text_message_sent = 12;
  if (_internal_has_text_message_sent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::text_message_sent(this), target, stream);
  }

  // .xpilot.NetworkConnected network_connected = 13;
  if (_internal_has_network_connected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::network_connected(this), target, stream);
  }

  // .xpilot.NetworkDisconnected network_disconnected = 14;
  if (_internal_has_network_disconnected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::network_disconnected(this), target, stream);
  }

  // .xpilot.NearbyControllers nearby_controllers = 15;
  if (_internal_has_nearby_controllers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::nearby_controllers(this), target, stream);
  }

  // .xpilot.SetTransponder set_transponder = 16;
  if (_internal_has_set_transponder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::set_transponder(this), target, stream);
  }

  // .xpilot.SetRadioStack set_radiostack = 17;
  if (_internal_has_set_radiostack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::set_radiostack(this), target, stream);
  }

  // .xpilot.AppMetadata app_metdata = 18;
  if (_internal_has_app_metdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::app_metdata(this), target, stream);
  }

  // .xpilot.CslValidation csl_validation = 19;
  if (_internal_has_csl_validation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::csl_validation(this), target, stream);
  }

  // .xpilot.RequestControllerInfo request_controller_info = 20;
  if (_internal_has_request_controller_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::request_controller_info(this), target, stream);
  }

  // .xpilot.TriggerDisconnect trigger_disconnect = 21;
  if (_internal_has_trigger_disconnect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::trigger_disconnect(this), target, stream);
  }

  // .xpilot.PlaneRemovedFromSim plane_removed_from_sim = 22;
  if (_internal_has_plane_removed_from_sim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::plane_removed_from_sim(this), target, stream);
  }

  // .xpilot.ServerMessageReceived server_message_received = 23;
  if (_internal_has_server_message_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::server_message_received(this), target, stream);
  }

  // .xpilot.RequestMetar request_metar = 24;
  if (_internal_has_request_metar()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::request_metar(this), target, stream);
  }

  // .xpilot.MetarReceived metar_received = 25;
  if (_internal_has_metar_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::metar_received(this), target, stream);
  }

  // .xpilot.WallopSent wallop_sent = 26;
  if (_internal_has_wallop_sent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::wallop_sent(this), target, stream);
  }

  // .xpilot.BroadcastMessageReceived broadcast_message_received = 27;
  if (_internal_has_broadcast_message_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::broadcast_message_received(this), target, stream);
  }

  // .xpilot.InfoMessagePosted info_message_posted = 28;
  if (_internal_has_info_message_posted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::info_message_posted(this), target, stream);
  }

  // .xpilot.NotePosted note_posted = 29;
  if (_internal_has_note_posted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::note_posted(this), target, stream);
  }

  // .xpilot.SimulatorConnectionState simulator_connection_state = 30;
  if (_internal_has_simulator_connection_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::simulator_connection_state(this), target, stream);
  }

  // .xpilot.AppConfig app_config = 31;
  if (_internal_has_app_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::app_config(this), target, stream);
  }

  // .xpilot.RadioStack radio_stack = 32;
  if (_internal_has_radio_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::radio_stack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.Envelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  switch (event_case()) {
    // .xpilot.PositionUpdate position_update = 2;
    case kPositionUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.position_update_);
      break;
    }
    // .xpilot.FastPositionUpdate fast_position_update = 3;
    case kFastPositionUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.fast_position_update_);
      break;
    }
    // .xpilot.AirplaneConfig airplane_config = 4;
    case kAirplaneConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.airplane_config_);
      break;
    }
    // .xpilot.AddPlane add_plane = 5;
    case kAddPlane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.add_plane_);
      break;
    }
    // .xpilot.PlaneAddedToSim plane_added_to_sim = 6;
    case kPlaneAddedToSim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.plane_added_to_sim_);
      break;
    }
    // .xpilot.ChangePlaneModel change_plane_model = 7;
    case kChangePlaneModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.change_plane_model_);
      break;
    }
    // .xpilot.DeletePlane delete_plane = 8;
    case kDeletePlane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.delete_plane_);
      break;
    }
    // .xpilot.PrivateMessageReceived private_message_received = 9;
    case kPrivateMessageReceived: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.private_message_received_);
      break;
    }
    // .xpilot.PrivateMessageSent private_message_sent = 10;
    case kPrivateMessageSent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.private_message_sent_);
      break;
    }
    // .xpilot.TextMessageReceived text_message_received = 11;
    case kTextMessageReceived: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.text_message_received_);
      break;
    }
    // .xpilot.TextMessageSent text_message_sent = 12;
    case kTextMessageSent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.text_message_sent_);
      break;
    }
    // .xpilot.NetworkConnected network_connected = 13;
    case kNetworkConnected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.network_connected_);
      break;
    }
    // .xpilot.NetworkDisconnected network_disconnected = 14;
    case kNetworkDisconnected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.network_disconnected_);
      break;
    }
    // .xpilot.NearbyControllers nearby_controllers = 15;
    case kNearbyControllers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.nearby_controllers_);
      break;
    }
    // .xpilot.SetTransponder set_transponder = 16;
    case kSetTransponder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.set_transponder_);
      break;
    }
    // .xpilot.SetRadioStack set_radiostack = 17;
    case kSetRadiostack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.set_radiostack_);
      break;
    }
    // .xpilot.AppMetadata app_metdata = 18;
    case kAppMetdata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.app_metdata_);
      break;
    }
    // .xpilot.CslValidation csl_validation = 19;
    case kCslValidation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.csl_validation_);
      break;
    }
    // .xpilot.RequestControllerInfo request_controller_info = 20;
    case kRequestControllerInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.request_controller_info_);
      break;
    }
    // .xpilot.TriggerDisconnect trigger_disconnect = 21;
    case kTriggerDisconnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.trigger_disconnect_);
      break;
    }
    // .xpilot.PlaneRemovedFromSim plane_removed_from_sim = 22;
    case kPlaneRemovedFromSim: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.plane_removed_from_sim_);
      break;
    }
    // .xpilot.ServerMessageReceived server_message_received = 23;
    case kServerMessageReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.server_message_received_);
      break;
    }
    // .xpilot.RequestMetar request_metar = 24;
    case kRequestMetar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.request_metar_);
      break;
    }
    // .xpilot.MetarReceived metar_received = 25;
    case kMetarReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.metar_received_);
      break;
    }
    // .xpilot.WallopSent wallop_sent = 26;
    case kWallopSent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.wallop_sent_);
      break;
    }
    // .xpilot.BroadcastMessageReceived broadcast_message_received = 27;
    case kBroadcastMessageReceived: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.broadcast_message_received_);
      break;
    }
    // .xpilot.InfoMessagePosted info_message_posted = 28;
    case kInfoMessagePosted: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.info_message_posted_);
      break;
    }
    // .xpilot.NotePosted note_posted = 29;
    case kNotePosted: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.note_posted_);
      break;
    }
    // .xpilot.SimulatorConnectionState simulator_connection_state = 30;
    case kSimulatorConnectionState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.simulator_connection_state_);
      break;
    }
    // .xpilot.AppConfig app_config = 31;
    case kAppConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.app_config_);
      break;
    }
    // .xpilot.RadioStack radio_stack = 32;
    case kRadioStack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.radio_stack_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Envelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  const Envelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Envelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.Envelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.Envelope)
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  switch (from.event_case()) {
    case kPositionUpdate: {
      _internal_mutable_position_update()->::xpilot::PositionUpdate::MergeFrom(from._internal_position_update());
      break;
    }
    case kFastPositionUpdate: {
      _internal_mutable_fast_position_update()->::xpilot::FastPositionUpdate::MergeFrom(from._internal_fast_position_update());
      break;
    }
    case kAirplaneConfig: {
      _internal_mutable_airplane_config()->::xpilot::AirplaneConfig::MergeFrom(from._internal_airplane_config());
      break;
    }
    case kAddPlane: {
      _internal_mutable_add_plane()->::xpilot::AddPlane::MergeFrom(from._internal_add_plane());
      break;
    }
    case kPlaneAddedToSim: {
      _internal_mutable_plane_added_to_sim()->::xpilot::PlaneAddedToSim::MergeFrom(from._internal_plane_added_to_sim());
      break;
    }
    case kChangePlaneModel: {
      _internal_mutable_change_plane_model()->::xpilot::ChangePlaneModel::MergeFrom(from._internal_change_plane_model());
      break;
    }
    case kDeletePlane: {
      _internal_mutable_delete_plane()->::xpilot::DeletePlane::MergeFrom(from._internal_delete_plane());
      break;
    }
    case kPrivateMessageReceived: {
      _internal_mutable_private_message_received()->::xpilot::PrivateMessageReceived::MergeFrom(from._internal_private_message_received());
      break;
    }
    case kPrivateMessageSent: {
      _internal_mutable_private_message_sent()->::xpilot::PrivateMessageSent::MergeFrom(from._internal_private_message_sent());
      break;
    }
    case kTextMessageReceived: {
      _internal_mutable_text_message_received()->::xpilot::TextMessageReceived::MergeFrom(from._internal_text_message_received());
      break;
    }
    case kTextMessageSent: {
      _internal_mutable_text_message_sent()->::xpilot::TextMessageSent::MergeFrom(from._internal_text_message_sent());
      break;
    }
    case kNetworkConnected: {
      _internal_mutable_network_connected()->::xpilot::NetworkConnected::MergeFrom(from._internal_network_connected());
      break;
    }
    case kNetworkDisconnected: {
      _internal_mutable_network_disconnected()->::xpilot::NetworkDisconnected::MergeFrom(from._internal_network_disconnected());
      break;
    }
    case kNearbyControllers: {
      _internal_mutable_nearby_controllers()->::xpilot::NearbyControllers::MergeFrom(from._internal_nearby_controllers());
      break;
    }
    case kSetTransponder: {
      _internal_mutable_set_transponder()->::xpilot::SetTransponder::MergeFrom(from._internal_set_transponder());
      break;
    }
    case kSetRadiostack: {
      _internal_mutable_set_radiostack()->::xpilot::SetRadioStack::MergeFrom(from._internal_set_radiostack());
      break;
    }
    case kAppMetdata: {
      _internal_mutable_app_metdata()->::xpilot::AppMetadata::MergeFrom(from._internal_app_metdata());
      break;
    }
    case kCslValidation: {
      _internal_mutable_csl_validation()->::xpilot::CslValidation::MergeFrom(from._internal_csl_validation());
      break;
    }
    case kRequestControllerInfo: {
      _internal_mutable_request_controller_info()->::xpilot::RequestControllerInfo::MergeFrom(from._internal_request_controller_info());
      break;
    }
    case kTriggerDisconnect: {
      _internal_mutable_trigger_disconnect()->::xpilot::TriggerDisconnect::MergeFrom(from._internal_trigger_disconnect());
      break;
    }
    case kPlaneRemovedFromSim: {
      _internal_mutable_plane_removed_from_sim()->::xpilot::PlaneRemovedFromSim::MergeFrom(from._internal_plane_removed_from_sim());
      break;
    }
    case kServerMessageReceived: {
      _internal_mutable_server_message_received()->::xpilot::ServerMessageReceived::MergeFrom(from._internal_server_message_received());
      break;
    }
    case kRequestMetar: {
      _internal_mutable_request_metar()->::xpilot::RequestMetar::MergeFrom(from._internal_request_metar());
      break;
    }
    case kMetarReceived: {
      _internal_mutable_metar_received()->::xpilot::MetarReceived::MergeFrom(from._internal_metar_received());
      break;
    }
    case kWallopSent: {
      _internal_mutable_wallop_sent()->::xpilot::WallopSent::MergeFrom(from._internal_wallop_sent());
      break;
    }
    case kBroadcastMessageReceived: {
      _internal_mutable_broadcast_message_received()->::xpilot::BroadcastMessageReceived::MergeFrom(from._internal_broadcast_message_received());
      break;
    }
    case kInfoMessagePosted: {
      _internal_mutable_info_message_posted()->::xpilot::InfoMessagePosted::MergeFrom(from._internal_info_message_posted());
      break;
    }
    case kNotePosted: {
      _internal_mutable_note_posted()->::xpilot::NotePosted::MergeFrom(from._internal_note_posted());
      break;
    }
    case kSimulatorConnectionState: {
      _internal_mutable_simulator_connection_state()->::xpilot::SimulatorConnectionState::MergeFrom(from._internal_simulator_connection_state());
      break;
    }
    case kAppConfig: {
      _internal_mutable_app_config()->::xpilot::AppConfig::MergeFrom(from._internal_app_config());
      break;
    }
    case kRadioStack: {
      _internal_mutable_radio_stack()->::xpilot::RadioStack::MergeFrom(from._internal_radio_stack());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void Envelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Envelope::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Envelope_2eproto_getter, &descriptor_table_Envelope_2eproto_once,
      file_level_metadata_Envelope_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::Envelope* Arena::CreateMaybeMessage< ::xpilot::Envelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::Envelope >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
