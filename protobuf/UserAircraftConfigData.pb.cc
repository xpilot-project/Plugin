// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserAircraftConfigData.proto

#include "UserAircraftConfigData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr UserAircraftConfigData::UserAircraftConfigData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_lights_on_(false)
  , landing_lights_on_(false)
  , nav_lights_on_(false)
  , strobe_lights_on_(false)
  , taxi_lights_on_(false)
  , gear_down_(false)
  , engine1_running_(false)
  , engine2_running_(false)
  , flaps_(0)
  , speed_brakes_(0)
  , engine_count_(0)
  , engine3_running_(false)
  , engine4_running_(false)
  , on_ground_(false){}
struct UserAircraftConfigDataDefaultTypeInternal {
  constexpr UserAircraftConfigDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserAircraftConfigDataDefaultTypeInternal() {}
  union {
    UserAircraftConfigData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserAircraftConfigDataDefaultTypeInternal _UserAircraftConfigData_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UserAircraftConfigData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_UserAircraftConfigData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UserAircraftConfigData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_UserAircraftConfigData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, beacon_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, landing_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, nav_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, strobe_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, taxi_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, flaps_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, gear_down_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, speed_brakes_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, engine_count_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, engine1_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, engine2_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, engine3_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, engine4_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::UserAircraftConfigData, on_ground_),
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  9,
  10,
  6,
  7,
  11,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::xpilot::UserAircraftConfigData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_UserAircraftConfigData_default_instance_),
};

const char descriptor_table_protodef_UserAircraftConfigData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034UserAircraftConfigData.proto\022\006xpilot\"\236"
  "\005\n\026UserAircraftConfigData\022\035\n\020beacon_ligh"
  "ts_on\030\001 \001(\010H\000\210\001\001\022\036\n\021landing_lights_on\030\002 "
  "\001(\010H\001\210\001\001\022\032\n\rnav_lights_on\030\003 \001(\010H\002\210\001\001\022\035\n\020"
  "strobe_lights_on\030\004 \001(\010H\003\210\001\001\022\033\n\016taxi_ligh"
  "ts_on\030\005 \001(\010H\004\210\001\001\022\022\n\005flaps\030\006 \001(\001H\005\210\001\001\022\026\n\t"
  "gear_down\030\007 \001(\010H\006\210\001\001\022\031\n\014speed_brakes\030\010 \001"
  "(\001H\007\210\001\001\022\031\n\014engine_count\030\t \001(\005H\010\210\001\001\022\034\n\017en"
  "gine1_running\030\n \001(\010H\t\210\001\001\022\034\n\017engine2_runn"
  "ing\030\013 \001(\010H\n\210\001\001\022\034\n\017engine3_running\030\014 \001(\010H"
  "\013\210\001\001\022\034\n\017engine4_running\030\r \001(\010H\014\210\001\001\022\026\n\ton"
  "_ground\030\016 \001(\010H\r\210\001\001B\023\n\021_beacon_lights_onB"
  "\024\n\022_landing_lights_onB\020\n\016_nav_lights_onB"
  "\023\n\021_strobe_lights_onB\021\n\017_taxi_lights_onB"
  "\010\n\006_flapsB\014\n\n_gear_downB\017\n\r_speed_brakes"
  "B\017\n\r_engine_countB\022\n\020_engine1_runningB\022\n"
  "\020_engine2_runningB\022\n\020_engine3_runningB\022\n"
  "\020_engine4_runningB\014\n\n_on_groundB\031\252\002\026Vats"
  "im.Xpilot.Protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UserAircraftConfigData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserAircraftConfigData_2eproto = {
  false, false, 746, descriptor_table_protodef_UserAircraftConfigData_2eproto, "UserAircraftConfigData.proto", 
  &descriptor_table_UserAircraftConfigData_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_UserAircraftConfigData_2eproto::offsets,
  file_level_metadata_UserAircraftConfigData_2eproto, file_level_enum_descriptors_UserAircraftConfigData_2eproto, file_level_service_descriptors_UserAircraftConfigData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_UserAircraftConfigData_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserAircraftConfigData_2eproto);
  return descriptor_table_UserAircraftConfigData_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_UserAircraftConfigData_2eproto(&descriptor_table_UserAircraftConfigData_2eproto);
namespace xpilot {

// ===================================================================

class UserAircraftConfigData::_Internal {
 public:
  using HasBits = decltype(std::declval<UserAircraftConfigData>()._has_bits_);
  static void set_has_beacon_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_landing_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nav_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strobe_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_taxi_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flaps(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gear_down(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speed_brakes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_engine_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_engine1_running(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_engine2_running(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_engine3_running(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_engine4_running(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_on_ground(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

UserAircraftConfigData::UserAircraftConfigData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.UserAircraftConfigData)
}
UserAircraftConfigData::UserAircraftConfigData(const UserAircraftConfigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beacon_lights_on_, &from.beacon_lights_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_ground_) -
    reinterpret_cast<char*>(&beacon_lights_on_)) + sizeof(on_ground_));
  // @@protoc_insertion_point(copy_constructor:xpilot.UserAircraftConfigData)
}

void UserAircraftConfigData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&beacon_lights_on_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&on_ground_) -
    reinterpret_cast<char*>(&beacon_lights_on_)) + sizeof(on_ground_));
}

UserAircraftConfigData::~UserAircraftConfigData() {
  // @@protoc_insertion_point(destructor:xpilot.UserAircraftConfigData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserAircraftConfigData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserAircraftConfigData::ArenaDtor(void* object) {
  UserAircraftConfigData* _this = reinterpret_cast< UserAircraftConfigData* >(object);
  (void)_this;
}
void UserAircraftConfigData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserAircraftConfigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserAircraftConfigData::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.UserAircraftConfigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&beacon_lights_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine2_running_) -
        reinterpret_cast<char*>(&beacon_lights_on_)) + sizeof(engine2_running_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&flaps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&on_ground_) -
        reinterpret_cast<char*>(&flaps_)) + sizeof(on_ground_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserAircraftConfigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool beacon_lights_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_lights_on(&has_bits);
          beacon_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool landing_lights_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_landing_lights_on(&has_bits);
          landing_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nav_lights_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nav_lights_on(&has_bits);
          nav_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strobe_lights_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_strobe_lights_on(&has_bits);
          strobe_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool taxi_lights_on = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_taxi_lights_on(&has_bits);
          taxi_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double flaps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_flaps(&has_bits);
          flaps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool gear_down = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gear_down(&has_bits);
          gear_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed_brakes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_speed_brakes(&has_bits);
          speed_brakes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 engine_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_engine_count(&has_bits);
          engine_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine1_running = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_engine1_running(&has_bits);
          engine1_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine2_running = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_engine2_running(&has_bits);
          engine2_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine3_running = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_engine3_running(&has_bits);
          engine3_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine4_running = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_engine4_running(&has_bits);
          engine4_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool on_ground = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_on_ground(&has_bits);
          on_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserAircraftConfigData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.UserAircraftConfigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool beacon_lights_on = 1;
  if (_internal_has_beacon_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_beacon_lights_on(), target);
  }

  // bool landing_lights_on = 2;
  if (_internal_has_landing_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_landing_lights_on(), target);
  }

  // bool nav_lights_on = 3;
  if (_internal_has_nav_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_nav_lights_on(), target);
  }

  // bool strobe_lights_on = 4;
  if (_internal_has_strobe_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_strobe_lights_on(), target);
  }

  // bool taxi_lights_on = 5;
  if (_internal_has_taxi_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_taxi_lights_on(), target);
  }

  // double flaps = 6;
  if (_internal_has_flaps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_flaps(), target);
  }

  // bool gear_down = 7;
  if (_internal_has_gear_down()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_gear_down(), target);
  }

  // double speed_brakes = 8;
  if (_internal_has_speed_brakes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_speed_brakes(), target);
  }

  // int32 engine_count = 9;
  if (_internal_has_engine_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_engine_count(), target);
  }

  // bool engine1_running = 10;
  if (_internal_has_engine1_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_engine1_running(), target);
  }

  // bool engine2_running = 11;
  if (_internal_has_engine2_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_engine2_running(), target);
  }

  // bool engine3_running = 12;
  if (_internal_has_engine3_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_engine3_running(), target);
  }

  // bool engine4_running = 13;
  if (_internal_has_engine4_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_engine4_running(), target);
  }

  // bool on_ground = 14;
  if (_internal_has_on_ground()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_on_ground(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.UserAircraftConfigData)
  return target;
}

size_t UserAircraftConfigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.UserAircraftConfigData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // bool beacon_lights_on = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // bool landing_lights_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // bool nav_lights_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // bool strobe_lights_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // bool taxi_lights_on = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // bool gear_down = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // bool engine1_running = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // bool engine2_running = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // double flaps = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // double speed_brakes = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // int32 engine_count = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_engine_count());
    }

    // bool engine3_running = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // bool engine4_running = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // bool on_ground = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserAircraftConfigData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.UserAircraftConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserAircraftConfigData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserAircraftConfigData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.UserAircraftConfigData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.UserAircraftConfigData)
    MergeFrom(*source);
  }
}

void UserAircraftConfigData::MergeFrom(const UserAircraftConfigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.UserAircraftConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      beacon_lights_on_ = from.beacon_lights_on_;
    }
    if (cached_has_bits & 0x00000002u) {
      landing_lights_on_ = from.landing_lights_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      nav_lights_on_ = from.nav_lights_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      strobe_lights_on_ = from.strobe_lights_on_;
    }
    if (cached_has_bits & 0x00000010u) {
      taxi_lights_on_ = from.taxi_lights_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      gear_down_ = from.gear_down_;
    }
    if (cached_has_bits & 0x00000040u) {
      engine1_running_ = from.engine1_running_;
    }
    if (cached_has_bits & 0x00000080u) {
      engine2_running_ = from.engine2_running_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      flaps_ = from.flaps_;
    }
    if (cached_has_bits & 0x00000200u) {
      speed_brakes_ = from.speed_brakes_;
    }
    if (cached_has_bits & 0x00000400u) {
      engine_count_ = from.engine_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      engine3_running_ = from.engine3_running_;
    }
    if (cached_has_bits & 0x00001000u) {
      engine4_running_ = from.engine4_running_;
    }
    if (cached_has_bits & 0x00002000u) {
      on_ground_ = from.on_ground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserAircraftConfigData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.UserAircraftConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAircraftConfigData::CopyFrom(const UserAircraftConfigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.UserAircraftConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAircraftConfigData::IsInitialized() const {
  return true;
}

void UserAircraftConfigData::InternalSwap(UserAircraftConfigData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserAircraftConfigData, on_ground_)
      + sizeof(UserAircraftConfigData::on_ground_)
      - PROTOBUF_FIELD_OFFSET(UserAircraftConfigData, beacon_lights_on_)>(
          reinterpret_cast<char*>(&beacon_lights_on_),
          reinterpret_cast<char*>(&other->beacon_lights_on_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserAircraftConfigData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::UserAircraftConfigData* Arena::CreateMaybeMessage< ::xpilot::UserAircraftConfigData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::UserAircraftConfigData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
