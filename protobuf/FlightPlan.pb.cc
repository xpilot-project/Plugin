// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlightPlan.proto

#include "FlightPlan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr FlightPlan::FlightPlan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flight_rules_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , departure_airport_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , destination_airport_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alternate_airport_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , route_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remarks_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , equipment_suffix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , departure_time_(0)
  , enroute_hours_(0)
  , enroute_minutes_(0)
  , fuel_hours_(0)
  , fuel_minutes_(0)
  , cruise_speed_(0)
  , cruise_altitude_(0)
  , voice_type_(0)

  , is_heavy_(false){}
struct FlightPlanDefaultTypeInternal {
  constexpr FlightPlanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlightPlanDefaultTypeInternal() {}
  union {
    FlightPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlightPlanDefaultTypeInternal _FlightPlan_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FlightPlan_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_FlightPlan_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FlightPlan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FlightPlan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, flight_rules_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, departure_airport_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, destination_airport_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, alternate_airport_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, departure_time_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, enroute_hours_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, enroute_minutes_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, fuel_hours_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, fuel_minutes_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, cruise_speed_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, cruise_altitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, route_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, remarks_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, equipment_suffix_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, voice_type_),
  PROTOBUF_FIELD_OFFSET(::xpilot::FlightPlan, is_heavy_),
  0,
  1,
  2,
  3,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  4,
  5,
  6,
  14,
  15,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::xpilot::FlightPlan)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_FlightPlan_default_instance_),
};

const char descriptor_table_protodef_FlightPlan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020FlightPlan.proto\022\006xpilot\"\272\006\n\nFlightPla"
  "n\022\031\n\014flight_rules\030\001 \001(\tH\000\210\001\001\022\036\n\021departur"
  "e_airport\030\002 \001(\tH\001\210\001\001\022 \n\023destination_airp"
  "ort\030\003 \001(\tH\002\210\001\001\022\036\n\021alternate_airport\030\004 \001("
  "\tH\003\210\001\001\022\033\n\016departure_time\030\005 \001(\005H\004\210\001\001\022\032\n\re"
  "nroute_hours\030\006 \001(\005H\005\210\001\001\022\034\n\017enroute_minut"
  "es\030\007 \001(\005H\006\210\001\001\022\027\n\nfuel_hours\030\010 \001(\005H\007\210\001\001\022\031"
  "\n\014fuel_minutes\030\t \001(\005H\010\210\001\001\022\031\n\014cruise_spee"
  "d\030\n \001(\005H\t\210\001\001\022\034\n\017cruise_altitude\030\013 \001(\005H\n\210"
  "\001\001\022\022\n\005route\030\014 \001(\tH\013\210\001\001\022\024\n\007remarks\030\r \001(\tH"
  "\014\210\001\001\022\035\n\020equipment_suffix\030\016 \001(\tH\r\210\001\001\0225\n\nv"
  "oice_type\030\017 \001(\0162\034.xpilot.FlightPlan.Voic"
  "eTypeH\016\210\001\001\022\025\n\010is_heavy\030\020 \001(\010H\017\210\001\001\":\n\tVoi"
  "ceType\022\013\n\007UNKNOWN\020\000\022\t\n\005VOICE\020\001\022\013\n\007RECEIV"
  "E\020\002\022\010\n\004TEXT\020\003B\017\n\r_flight_rulesB\024\n\022_depar"
  "ture_airportB\026\n\024_destination_airportB\024\n\022"
  "_alternate_airportB\021\n\017_departure_timeB\020\n"
  "\016_enroute_hoursB\022\n\020_enroute_minutesB\r\n\013_"
  "fuel_hoursB\017\n\r_fuel_minutesB\017\n\r_cruise_s"
  "peedB\022\n\020_cruise_altitudeB\010\n\006_routeB\n\n\010_r"
  "emarksB\023\n\021_equipment_suffixB\r\n\013_voice_ty"
  "peB\013\n\t_is_heavyB\031\252\002\026Vatsim.Xpilot.Protob"
  "ufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FlightPlan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FlightPlan_2eproto = {
  false, false, 890, descriptor_table_protodef_FlightPlan_2eproto, "FlightPlan.proto", 
  &descriptor_table_FlightPlan_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_FlightPlan_2eproto::offsets,
  file_level_metadata_FlightPlan_2eproto, file_level_enum_descriptors_FlightPlan_2eproto, file_level_service_descriptors_FlightPlan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_FlightPlan_2eproto_getter() {
  return &descriptor_table_FlightPlan_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FlightPlan_2eproto(&descriptor_table_FlightPlan_2eproto);
namespace xpilot {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightPlan_VoiceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FlightPlan_2eproto);
  return file_level_enum_descriptors_FlightPlan_2eproto[0];
}
bool FlightPlan_VoiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FlightPlan_VoiceType FlightPlan::UNKNOWN;
constexpr FlightPlan_VoiceType FlightPlan::VOICE;
constexpr FlightPlan_VoiceType FlightPlan::RECEIVE;
constexpr FlightPlan_VoiceType FlightPlan::TEXT;
constexpr FlightPlan_VoiceType FlightPlan::VoiceType_MIN;
constexpr FlightPlan_VoiceType FlightPlan::VoiceType_MAX;
constexpr int FlightPlan::VoiceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class FlightPlan::_Internal {
 public:
  using HasBits = decltype(std::declval<FlightPlan>()._has_bits_);
  static void set_has_flight_rules(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_departure_airport(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destination_airport(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alternate_airport(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_departure_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enroute_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_enroute_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fuel_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fuel_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cruise_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cruise_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_route(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_remarks(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_equipment_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_voice_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_heavy(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

FlightPlan::FlightPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.FlightPlan)
}
FlightPlan::FlightPlan(const FlightPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flight_rules_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_flight_rules()) {
    flight_rules_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flight_rules(), 
      GetArenaForAllocation());
  }
  departure_airport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_departure_airport()) {
    departure_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_departure_airport(), 
      GetArenaForAllocation());
  }
  destination_airport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_destination_airport()) {
    destination_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_destination_airport(), 
      GetArenaForAllocation());
  }
  alternate_airport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_alternate_airport()) {
    alternate_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alternate_airport(), 
      GetArenaForAllocation());
  }
  route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_route()) {
    route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_route(), 
      GetArenaForAllocation());
  }
  remarks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_remarks()) {
    remarks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remarks(), 
      GetArenaForAllocation());
  }
  equipment_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equipment_suffix()) {
    equipment_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equipment_suffix(), 
      GetArenaForAllocation());
  }
  ::memcpy(&departure_time_, &from.departure_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_heavy_) -
    reinterpret_cast<char*>(&departure_time_)) + sizeof(is_heavy_));
  // @@protoc_insertion_point(copy_constructor:xpilot.FlightPlan)
}

void FlightPlan::SharedCtor() {
flight_rules_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
departure_airport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
destination_airport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alternate_airport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
route_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remarks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
equipment_suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&departure_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_heavy_) -
    reinterpret_cast<char*>(&departure_time_)) + sizeof(is_heavy_));
}

FlightPlan::~FlightPlan() {
  // @@protoc_insertion_point(destructor:xpilot.FlightPlan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlightPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  flight_rules_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departure_airport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_airport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alternate_airport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remarks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipment_suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlightPlan::ArenaDtor(void* object) {
  FlightPlan* _this = reinterpret_cast< FlightPlan* >(object);
  (void)_this;
}
void FlightPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlightPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlightPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.FlightPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      flight_rules_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      departure_airport_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      destination_airport_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      alternate_airport_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      route_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      remarks_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      equipment_suffix_.ClearNonDefaultToEmpty();
    }
  }
  departure_time_ = 0;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&enroute_hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_heavy_) -
        reinterpret_cast<char*>(&enroute_hours_)) + sizeof(is_heavy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string flight_rules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_flight_rules();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.FlightPlan.flight_rules"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string departure_airport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_departure_airport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.FlightPlan.departure_airport"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string destination_airport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_destination_airport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.FlightPlan.destination_airport"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string alternate_airport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alternate_airport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.FlightPlan.alternate_airport"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 departure_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_departure_time(&has_bits);
          departure_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 enroute_hours = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enroute_hours(&has_bits);
          enroute_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 enroute_minutes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_enroute_minutes(&has_bits);
          enroute_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fuel_hours = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fuel_hours(&has_bits);
          fuel_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 fuel_minutes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_fuel_minutes(&has_bits);
          fuel_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cruise_speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cruise_speed(&has_bits);
          cruise_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cruise_altitude = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_cruise_altitude(&has_bits);
          cruise_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string route = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_route();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.FlightPlan.route"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string remarks = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_remarks();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.FlightPlan.remarks"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string equipment_suffix = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_equipment_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.FlightPlan.equipment_suffix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .xpilot.FlightPlan.VoiceType voice_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_voice_type(static_cast<::xpilot::FlightPlan_VoiceType>(val));
        } else goto handle_unusual;
        continue;
      // optional bool is_heavy = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_heavy(&has_bits);
          is_heavy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlightPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.FlightPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string flight_rules = 1;
  if (_internal_has_flight_rules()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flight_rules().data(), static_cast<int>(this->_internal_flight_rules().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.FlightPlan.flight_rules");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_flight_rules(), target);
  }

  // optional string departure_airport = 2;
  if (_internal_has_departure_airport()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_departure_airport().data(), static_cast<int>(this->_internal_departure_airport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.FlightPlan.departure_airport");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_departure_airport(), target);
  }

  // optional string destination_airport = 3;
  if (_internal_has_destination_airport()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_airport().data(), static_cast<int>(this->_internal_destination_airport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.FlightPlan.destination_airport");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination_airport(), target);
  }

  // optional string alternate_airport = 4;
  if (_internal_has_alternate_airport()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alternate_airport().data(), static_cast<int>(this->_internal_alternate_airport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.FlightPlan.alternate_airport");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alternate_airport(), target);
  }

  // optional int32 departure_time = 5;
  if (_internal_has_departure_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_departure_time(), target);
  }

  // optional int32 enroute_hours = 6;
  if (_internal_has_enroute_hours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_enroute_hours(), target);
  }

  // optional int32 enroute_minutes = 7;
  if (_internal_has_enroute_minutes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_enroute_minutes(), target);
  }

  // optional int32 fuel_hours = 8;
  if (_internal_has_fuel_hours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_fuel_hours(), target);
  }

  // optional int32 fuel_minutes = 9;
  if (_internal_has_fuel_minutes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_fuel_minutes(), target);
  }

  // optional int32 cruise_speed = 10;
  if (_internal_has_cruise_speed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_cruise_speed(), target);
  }

  // optional int32 cruise_altitude = 11;
  if (_internal_has_cruise_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_cruise_altitude(), target);
  }

  // optional string route = 12;
  if (_internal_has_route()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route().data(), static_cast<int>(this->_internal_route().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.FlightPlan.route");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_route(), target);
  }

  // optional string remarks = 13;
  if (_internal_has_remarks()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remarks().data(), static_cast<int>(this->_internal_remarks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.FlightPlan.remarks");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_remarks(), target);
  }

  // optional string equipment_suffix = 14;
  if (_internal_has_equipment_suffix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_equipment_suffix().data(), static_cast<int>(this->_internal_equipment_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.FlightPlan.equipment_suffix");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_equipment_suffix(), target);
  }

  // optional .xpilot.FlightPlan.VoiceType voice_type = 15;
  if (_internal_has_voice_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_voice_type(), target);
  }

  // optional bool is_heavy = 16;
  if (_internal_has_is_heavy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_heavy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.FlightPlan)
  return target;
}

size_t FlightPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.FlightPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string flight_rules = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_flight_rules());
    }

    // optional string departure_airport = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_departure_airport());
    }

    // optional string destination_airport = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destination_airport());
    }

    // optional string alternate_airport = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alternate_airport());
    }

    // optional string route = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_route());
    }

    // optional string remarks = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_remarks());
    }

    // optional string equipment_suffix = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_equipment_suffix());
    }

    // optional int32 departure_time = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_departure_time());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 enroute_hours = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_enroute_hours());
    }

    // optional int32 enroute_minutes = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_enroute_minutes());
    }

    // optional int32 fuel_hours = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fuel_hours());
    }

    // optional int32 fuel_minutes = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fuel_minutes());
    }

    // optional int32 cruise_speed = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cruise_speed());
    }

    // optional int32 cruise_altitude = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cruise_altitude());
    }

    // optional .xpilot.FlightPlan.VoiceType voice_type = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_voice_type());
    }

    // optional bool is_heavy = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlightPlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.FlightPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const FlightPlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlightPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.FlightPlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.FlightPlan)
    MergeFrom(*source);
  }
}

void FlightPlan::MergeFrom(const FlightPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.FlightPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_flight_rules(from._internal_flight_rules());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_departure_airport(from._internal_departure_airport());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_destination_airport(from._internal_destination_airport());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_alternate_airport(from._internal_alternate_airport());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_route(from._internal_route());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_remarks(from._internal_remarks());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_equipment_suffix(from._internal_equipment_suffix());
    }
    if (cached_has_bits & 0x00000080u) {
      departure_time_ = from.departure_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      enroute_hours_ = from.enroute_hours_;
    }
    if (cached_has_bits & 0x00000200u) {
      enroute_minutes_ = from.enroute_minutes_;
    }
    if (cached_has_bits & 0x00000400u) {
      fuel_hours_ = from.fuel_hours_;
    }
    if (cached_has_bits & 0x00000800u) {
      fuel_minutes_ = from.fuel_minutes_;
    }
    if (cached_has_bits & 0x00001000u) {
      cruise_speed_ = from.cruise_speed_;
    }
    if (cached_has_bits & 0x00002000u) {
      cruise_altitude_ = from.cruise_altitude_;
    }
    if (cached_has_bits & 0x00004000u) {
      voice_type_ = from.voice_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_heavy_ = from.is_heavy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FlightPlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.FlightPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlightPlan::CopyFrom(const FlightPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.FlightPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightPlan::IsInitialized() const {
  return true;
}

void FlightPlan::InternalSwap(FlightPlan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &flight_rules_, GetArenaForAllocation(),
      &other->flight_rules_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &departure_airport_, GetArenaForAllocation(),
      &other->departure_airport_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &destination_airport_, GetArenaForAllocation(),
      &other->destination_airport_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alternate_airport_, GetArenaForAllocation(),
      &other->alternate_airport_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &route_, GetArenaForAllocation(),
      &other->route_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remarks_, GetArenaForAllocation(),
      &other->remarks_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &equipment_suffix_, GetArenaForAllocation(),
      &other->equipment_suffix_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlightPlan, is_heavy_)
      + sizeof(FlightPlan::is_heavy_)
      - PROTOBUF_FIELD_OFFSET(FlightPlan, departure_time_)>(
          reinterpret_cast<char*>(&departure_time_),
          reinterpret_cast<char*>(&other->departure_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightPlan::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_FlightPlan_2eproto_getter, &descriptor_table_FlightPlan_2eproto_once,
      file_level_metadata_FlightPlan_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::FlightPlan* Arena::CreateMaybeMessage< ::xpilot::FlightPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::FlightPlan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
