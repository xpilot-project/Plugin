// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XplaneData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_XplaneData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_XplaneData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_XplaneData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_XplaneData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XplaneData_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_XplaneData_2eproto_metadata_getter(int index);
namespace xpilot {
class XplaneData;
struct XplaneDataDefaultTypeInternal;
extern XplaneDataDefaultTypeInternal _XplaneData_default_instance_;
class XplaneData_RadioStack;
struct XplaneData_RadioStackDefaultTypeInternal;
extern XplaneData_RadioStackDefaultTypeInternal _XplaneData_RadioStack_default_instance_;
class XplaneData_UserAircraftConfigData;
struct XplaneData_UserAircraftConfigDataDefaultTypeInternal;
extern XplaneData_UserAircraftConfigDataDefaultTypeInternal _XplaneData_UserAircraftConfigData_default_instance_;
class XplaneData_UserAircraftData;
struct XplaneData_UserAircraftDataDefaultTypeInternal;
extern XplaneData_UserAircraftDataDefaultTypeInternal _XplaneData_UserAircraftData_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::XplaneData* Arena::CreateMaybeMessage<::xpilot::XplaneData>(Arena*);
template<> ::xpilot::XplaneData_RadioStack* Arena::CreateMaybeMessage<::xpilot::XplaneData_RadioStack>(Arena*);
template<> ::xpilot::XplaneData_UserAircraftConfigData* Arena::CreateMaybeMessage<::xpilot::XplaneData_UserAircraftConfigData>(Arena*);
template<> ::xpilot::XplaneData_UserAircraftData* Arena::CreateMaybeMessage<::xpilot::XplaneData_UserAircraftData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class XplaneData_UserAircraftData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.XplaneData.UserAircraftData) */ {
 public:
  inline XplaneData_UserAircraftData() : XplaneData_UserAircraftData(nullptr) {}
  virtual ~XplaneData_UserAircraftData();
  explicit constexpr XplaneData_UserAircraftData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XplaneData_UserAircraftData(const XplaneData_UserAircraftData& from);
  XplaneData_UserAircraftData(XplaneData_UserAircraftData&& from) noexcept
    : XplaneData_UserAircraftData() {
    *this = ::std::move(from);
  }

  inline XplaneData_UserAircraftData& operator=(const XplaneData_UserAircraftData& from) {
    CopyFrom(from);
    return *this;
  }
  inline XplaneData_UserAircraftData& operator=(XplaneData_UserAircraftData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XplaneData_UserAircraftData& default_instance() {
    return *internal_default_instance();
  }
  static inline const XplaneData_UserAircraftData* internal_default_instance() {
    return reinterpret_cast<const XplaneData_UserAircraftData*>(
               &_XplaneData_UserAircraftData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XplaneData_UserAircraftData& a, XplaneData_UserAircraftData& b) {
    a.Swap(&b);
  }
  inline void Swap(XplaneData_UserAircraftData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XplaneData_UserAircraftData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XplaneData_UserAircraftData* New() const final {
    return CreateMaybeMessage<XplaneData_UserAircraftData>(nullptr);
  }

  XplaneData_UserAircraftData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XplaneData_UserAircraftData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XplaneData_UserAircraftData& from);
  void MergeFrom(const XplaneData_UserAircraftData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XplaneData_UserAircraftData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.XplaneData.UserAircraftData";
  }
  protected:
  explicit XplaneData_UserAircraftData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_XplaneData_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeMslFieldNumber = 3,
    kAltitudeAglFieldNumber = 4,
    kGroundSpeedFieldNumber = 5,
    kPitchFieldNumber = 6,
    kRollFieldNumber = 7,
    kYawFieldNumber = 8,
    kVelocityLatitudeFieldNumber = 9,
    kVelocityAltitudeFieldNumber = 10,
    kVelocityLongitudeFieldNumber = 11,
    kVelocityPitchFieldNumber = 12,
    kVelocityHeadingFieldNumber = 13,
    kVelocityBankFieldNumber = 14,
  };
  // double longitude = 1;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude_msl = 3;
  bool has_altitude_msl() const;
  private:
  bool _internal_has_altitude_msl() const;
  public:
  void clear_altitude_msl();
  double altitude_msl() const;
  void set_altitude_msl(double value);
  private:
  double _internal_altitude_msl() const;
  void _internal_set_altitude_msl(double value);
  public:

  // double altitude_agl = 4;
  bool has_altitude_agl() const;
  private:
  bool _internal_has_altitude_agl() const;
  public:
  void clear_altitude_agl();
  double altitude_agl() const;
  void set_altitude_agl(double value);
  private:
  double _internal_altitude_agl() const;
  void _internal_set_altitude_agl(double value);
  public:

  // double ground_speed = 5;
  bool has_ground_speed() const;
  private:
  bool _internal_has_ground_speed() const;
  public:
  void clear_ground_speed();
  double ground_speed() const;
  void set_ground_speed(double value);
  private:
  double _internal_ground_speed() const;
  void _internal_set_ground_speed(double value);
  public:

  // double pitch = 6;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double roll = 7;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double yaw = 8;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // double velocity_latitude = 9;
  bool has_velocity_latitude() const;
  private:
  bool _internal_has_velocity_latitude() const;
  public:
  void clear_velocity_latitude();
  double velocity_latitude() const;
  void set_velocity_latitude(double value);
  private:
  double _internal_velocity_latitude() const;
  void _internal_set_velocity_latitude(double value);
  public:

  // double velocity_altitude = 10;
  bool has_velocity_altitude() const;
  private:
  bool _internal_has_velocity_altitude() const;
  public:
  void clear_velocity_altitude();
  double velocity_altitude() const;
  void set_velocity_altitude(double value);
  private:
  double _internal_velocity_altitude() const;
  void _internal_set_velocity_altitude(double value);
  public:

  // double velocity_longitude = 11;
  bool has_velocity_longitude() const;
  private:
  bool _internal_has_velocity_longitude() const;
  public:
  void clear_velocity_longitude();
  double velocity_longitude() const;
  void set_velocity_longitude(double value);
  private:
  double _internal_velocity_longitude() const;
  void _internal_set_velocity_longitude(double value);
  public:

  // double velocity_pitch = 12;
  bool has_velocity_pitch() const;
  private:
  bool _internal_has_velocity_pitch() const;
  public:
  void clear_velocity_pitch();
  double velocity_pitch() const;
  void set_velocity_pitch(double value);
  private:
  double _internal_velocity_pitch() const;
  void _internal_set_velocity_pitch(double value);
  public:

  // double velocity_heading = 13;
  bool has_velocity_heading() const;
  private:
  bool _internal_has_velocity_heading() const;
  public:
  void clear_velocity_heading();
  double velocity_heading() const;
  void set_velocity_heading(double value);
  private:
  double _internal_velocity_heading() const;
  void _internal_set_velocity_heading(double value);
  public:

  // double velocity_bank = 14;
  bool has_velocity_bank() const;
  private:
  bool _internal_has_velocity_bank() const;
  public:
  void clear_velocity_bank();
  double velocity_bank() const;
  void set_velocity_bank(double value);
  private:
  double _internal_velocity_bank() const;
  void _internal_set_velocity_bank(double value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.XplaneData.UserAircraftData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double longitude_;
  double latitude_;
  double altitude_msl_;
  double altitude_agl_;
  double ground_speed_;
  double pitch_;
  double roll_;
  double yaw_;
  double velocity_latitude_;
  double velocity_altitude_;
  double velocity_longitude_;
  double velocity_pitch_;
  double velocity_heading_;
  double velocity_bank_;
  friend struct ::TableStruct_XplaneData_2eproto;
};
// -------------------------------------------------------------------

class XplaneData_UserAircraftConfigData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.XplaneData.UserAircraftConfigData) */ {
 public:
  inline XplaneData_UserAircraftConfigData() : XplaneData_UserAircraftConfigData(nullptr) {}
  virtual ~XplaneData_UserAircraftConfigData();
  explicit constexpr XplaneData_UserAircraftConfigData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XplaneData_UserAircraftConfigData(const XplaneData_UserAircraftConfigData& from);
  XplaneData_UserAircraftConfigData(XplaneData_UserAircraftConfigData&& from) noexcept
    : XplaneData_UserAircraftConfigData() {
    *this = ::std::move(from);
  }

  inline XplaneData_UserAircraftConfigData& operator=(const XplaneData_UserAircraftConfigData& from) {
    CopyFrom(from);
    return *this;
  }
  inline XplaneData_UserAircraftConfigData& operator=(XplaneData_UserAircraftConfigData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XplaneData_UserAircraftConfigData& default_instance() {
    return *internal_default_instance();
  }
  static inline const XplaneData_UserAircraftConfigData* internal_default_instance() {
    return reinterpret_cast<const XplaneData_UserAircraftConfigData*>(
               &_XplaneData_UserAircraftConfigData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XplaneData_UserAircraftConfigData& a, XplaneData_UserAircraftConfigData& b) {
    a.Swap(&b);
  }
  inline void Swap(XplaneData_UserAircraftConfigData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XplaneData_UserAircraftConfigData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XplaneData_UserAircraftConfigData* New() const final {
    return CreateMaybeMessage<XplaneData_UserAircraftConfigData>(nullptr);
  }

  XplaneData_UserAircraftConfigData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XplaneData_UserAircraftConfigData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XplaneData_UserAircraftConfigData& from);
  void MergeFrom(const XplaneData_UserAircraftConfigData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XplaneData_UserAircraftConfigData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.XplaneData.UserAircraftConfigData";
  }
  protected:
  explicit XplaneData_UserAircraftConfigData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_XplaneData_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconLightsOnFieldNumber = 1,
    kLandingLightsOnFieldNumber = 2,
    kNavLightsOnFieldNumber = 3,
    kStrobeLightsOnFieldNumber = 4,
    kTaxiLightsOnFieldNumber = 5,
    kGearDownFieldNumber = 7,
    kEngine1RunningFieldNumber = 10,
    kEngine2RunningFieldNumber = 11,
    kFlapsFieldNumber = 6,
    kSpeedBrakesFieldNumber = 8,
    kEngineCountFieldNumber = 9,
    kEngine3RunningFieldNumber = 12,
    kEngine4RunningFieldNumber = 13,
    kOnGroundFieldNumber = 14,
  };
  // bool beacon_lights_on = 1;
  bool has_beacon_lights_on() const;
  private:
  bool _internal_has_beacon_lights_on() const;
  public:
  void clear_beacon_lights_on();
  bool beacon_lights_on() const;
  void set_beacon_lights_on(bool value);
  private:
  bool _internal_beacon_lights_on() const;
  void _internal_set_beacon_lights_on(bool value);
  public:

  // bool landing_lights_on = 2;
  bool has_landing_lights_on() const;
  private:
  bool _internal_has_landing_lights_on() const;
  public:
  void clear_landing_lights_on();
  bool landing_lights_on() const;
  void set_landing_lights_on(bool value);
  private:
  bool _internal_landing_lights_on() const;
  void _internal_set_landing_lights_on(bool value);
  public:

  // bool nav_lights_on = 3;
  bool has_nav_lights_on() const;
  private:
  bool _internal_has_nav_lights_on() const;
  public:
  void clear_nav_lights_on();
  bool nav_lights_on() const;
  void set_nav_lights_on(bool value);
  private:
  bool _internal_nav_lights_on() const;
  void _internal_set_nav_lights_on(bool value);
  public:

  // bool strobe_lights_on = 4;
  bool has_strobe_lights_on() const;
  private:
  bool _internal_has_strobe_lights_on() const;
  public:
  void clear_strobe_lights_on();
  bool strobe_lights_on() const;
  void set_strobe_lights_on(bool value);
  private:
  bool _internal_strobe_lights_on() const;
  void _internal_set_strobe_lights_on(bool value);
  public:

  // bool taxi_lights_on = 5;
  bool has_taxi_lights_on() const;
  private:
  bool _internal_has_taxi_lights_on() const;
  public:
  void clear_taxi_lights_on();
  bool taxi_lights_on() const;
  void set_taxi_lights_on(bool value);
  private:
  bool _internal_taxi_lights_on() const;
  void _internal_set_taxi_lights_on(bool value);
  public:

  // bool gear_down = 7;
  bool has_gear_down() const;
  private:
  bool _internal_has_gear_down() const;
  public:
  void clear_gear_down();
  bool gear_down() const;
  void set_gear_down(bool value);
  private:
  bool _internal_gear_down() const;
  void _internal_set_gear_down(bool value);
  public:

  // bool engine1_running = 10;
  bool has_engine1_running() const;
  private:
  bool _internal_has_engine1_running() const;
  public:
  void clear_engine1_running();
  bool engine1_running() const;
  void set_engine1_running(bool value);
  private:
  bool _internal_engine1_running() const;
  void _internal_set_engine1_running(bool value);
  public:

  // bool engine2_running = 11;
  bool has_engine2_running() const;
  private:
  bool _internal_has_engine2_running() const;
  public:
  void clear_engine2_running();
  bool engine2_running() const;
  void set_engine2_running(bool value);
  private:
  bool _internal_engine2_running() const;
  void _internal_set_engine2_running(bool value);
  public:

  // double flaps = 6;
  bool has_flaps() const;
  private:
  bool _internal_has_flaps() const;
  public:
  void clear_flaps();
  double flaps() const;
  void set_flaps(double value);
  private:
  double _internal_flaps() const;
  void _internal_set_flaps(double value);
  public:

  // double speed_brakes = 8;
  bool has_speed_brakes() const;
  private:
  bool _internal_has_speed_brakes() const;
  public:
  void clear_speed_brakes();
  double speed_brakes() const;
  void set_speed_brakes(double value);
  private:
  double _internal_speed_brakes() const;
  void _internal_set_speed_brakes(double value);
  public:

  // int32 engine_count = 9;
  bool has_engine_count() const;
  private:
  bool _internal_has_engine_count() const;
  public:
  void clear_engine_count();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_count() const;
  void set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_count() const;
  void _internal_set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool engine3_running = 12;
  bool has_engine3_running() const;
  private:
  bool _internal_has_engine3_running() const;
  public:
  void clear_engine3_running();
  bool engine3_running() const;
  void set_engine3_running(bool value);
  private:
  bool _internal_engine3_running() const;
  void _internal_set_engine3_running(bool value);
  public:

  // bool engine4_running = 13;
  bool has_engine4_running() const;
  private:
  bool _internal_has_engine4_running() const;
  public:
  void clear_engine4_running();
  bool engine4_running() const;
  void set_engine4_running(bool value);
  private:
  bool _internal_engine4_running() const;
  void _internal_set_engine4_running(bool value);
  public:

  // bool on_ground = 14;
  bool has_on_ground() const;
  private:
  bool _internal_has_on_ground() const;
  public:
  void clear_on_ground();
  bool on_ground() const;
  void set_on_ground(bool value);
  private:
  bool _internal_on_ground() const;
  void _internal_set_on_ground(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.XplaneData.UserAircraftConfigData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool beacon_lights_on_;
  bool landing_lights_on_;
  bool nav_lights_on_;
  bool strobe_lights_on_;
  bool taxi_lights_on_;
  bool gear_down_;
  bool engine1_running_;
  bool engine2_running_;
  double flaps_;
  double speed_brakes_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_count_;
  bool engine3_running_;
  bool engine4_running_;
  bool on_ground_;
  friend struct ::TableStruct_XplaneData_2eproto;
};
// -------------------------------------------------------------------

class XplaneData_RadioStack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.XplaneData.RadioStack) */ {
 public:
  inline XplaneData_RadioStack() : XplaneData_RadioStack(nullptr) {}
  virtual ~XplaneData_RadioStack();
  explicit constexpr XplaneData_RadioStack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XplaneData_RadioStack(const XplaneData_RadioStack& from);
  XplaneData_RadioStack(XplaneData_RadioStack&& from) noexcept
    : XplaneData_RadioStack() {
    *this = ::std::move(from);
  }

  inline XplaneData_RadioStack& operator=(const XplaneData_RadioStack& from) {
    CopyFrom(from);
    return *this;
  }
  inline XplaneData_RadioStack& operator=(XplaneData_RadioStack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XplaneData_RadioStack& default_instance() {
    return *internal_default_instance();
  }
  static inline const XplaneData_RadioStack* internal_default_instance() {
    return reinterpret_cast<const XplaneData_RadioStack*>(
               &_XplaneData_RadioStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(XplaneData_RadioStack& a, XplaneData_RadioStack& b) {
    a.Swap(&b);
  }
  inline void Swap(XplaneData_RadioStack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XplaneData_RadioStack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XplaneData_RadioStack* New() const final {
    return CreateMaybeMessage<XplaneData_RadioStack>(nullptr);
  }

  XplaneData_RadioStack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XplaneData_RadioStack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XplaneData_RadioStack& from);
  void MergeFrom(const XplaneData_RadioStack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XplaneData_RadioStack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.XplaneData.RadioStack";
  }
  protected:
  explicit XplaneData_RadioStack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_XplaneData_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioComSelectionFieldNumber = 1,
    kCom1FreqFieldNumber = 3,
    kCom1VolumeFieldNumber = 5,
    kCom1PowerFieldNumber = 2,
    kCom1AudioSelectionFieldNumber = 4,
    kCom2PowerFieldNumber = 6,
    kCom2AudioSelectionFieldNumber = 8,
    kCom2FreqFieldNumber = 7,
    kCom2VolumeFieldNumber = 9,
    kTransponderCodeFieldNumber = 11,
    kTransponderModeFieldNumber = 12,
    kAvionicsPowerOnFieldNumber = 10,
    kTransponderIdentFieldNumber = 13,
    kPttPressedFieldNumber = 14,
  };
  // int32 audio_com_selection = 1;
  bool has_audio_com_selection() const;
  private:
  bool _internal_has_audio_com_selection() const;
  public:
  void clear_audio_com_selection();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_com_selection() const;
  void set_audio_com_selection(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_audio_com_selection() const;
  void _internal_set_audio_com_selection(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 com1_freq = 3;
  bool has_com1_freq() const;
  private:
  bool _internal_has_com1_freq() const;
  public:
  void clear_com1_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 com1_freq() const;
  void set_com1_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_com1_freq() const;
  void _internal_set_com1_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float com1_volume = 5;
  bool has_com1_volume() const;
  private:
  bool _internal_has_com1_volume() const;
  public:
  void clear_com1_volume();
  float com1_volume() const;
  void set_com1_volume(float value);
  private:
  float _internal_com1_volume() const;
  void _internal_set_com1_volume(float value);
  public:

  // bool com1_power = 2;
  bool has_com1_power() const;
  private:
  bool _internal_has_com1_power() const;
  public:
  void clear_com1_power();
  bool com1_power() const;
  void set_com1_power(bool value);
  private:
  bool _internal_com1_power() const;
  void _internal_set_com1_power(bool value);
  public:

  // bool com1_audio_selection = 4;
  bool has_com1_audio_selection() const;
  private:
  bool _internal_has_com1_audio_selection() const;
  public:
  void clear_com1_audio_selection();
  bool com1_audio_selection() const;
  void set_com1_audio_selection(bool value);
  private:
  bool _internal_com1_audio_selection() const;
  void _internal_set_com1_audio_selection(bool value);
  public:

  // bool com2_power = 6;
  bool has_com2_power() const;
  private:
  bool _internal_has_com2_power() const;
  public:
  void clear_com2_power();
  bool com2_power() const;
  void set_com2_power(bool value);
  private:
  bool _internal_com2_power() const;
  void _internal_set_com2_power(bool value);
  public:

  // bool com2_audio_selection = 8;
  bool has_com2_audio_selection() const;
  private:
  bool _internal_has_com2_audio_selection() const;
  public:
  void clear_com2_audio_selection();
  bool com2_audio_selection() const;
  void set_com2_audio_selection(bool value);
  private:
  bool _internal_com2_audio_selection() const;
  void _internal_set_com2_audio_selection(bool value);
  public:

  // int32 com2_freq = 7;
  bool has_com2_freq() const;
  private:
  bool _internal_has_com2_freq() const;
  public:
  void clear_com2_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 com2_freq() const;
  void set_com2_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_com2_freq() const;
  void _internal_set_com2_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float com2_volume = 9;
  bool has_com2_volume() const;
  private:
  bool _internal_has_com2_volume() const;
  public:
  void clear_com2_volume();
  float com2_volume() const;
  void set_com2_volume(float value);
  private:
  float _internal_com2_volume() const;
  void _internal_set_com2_volume(float value);
  public:

  // int32 transponder_code = 11;
  bool has_transponder_code() const;
  private:
  bool _internal_has_transponder_code() const;
  public:
  void clear_transponder_code();
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_code() const;
  void set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transponder_code() const;
  void _internal_set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 transponder_mode = 12;
  bool has_transponder_mode() const;
  private:
  bool _internal_has_transponder_mode() const;
  public:
  void clear_transponder_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_mode() const;
  void set_transponder_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transponder_mode() const;
  void _internal_set_transponder_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool avionics_power_on = 10;
  bool has_avionics_power_on() const;
  private:
  bool _internal_has_avionics_power_on() const;
  public:
  void clear_avionics_power_on();
  bool avionics_power_on() const;
  void set_avionics_power_on(bool value);
  private:
  bool _internal_avionics_power_on() const;
  void _internal_set_avionics_power_on(bool value);
  public:

  // bool transponder_ident = 13;
  bool has_transponder_ident() const;
  private:
  bool _internal_has_transponder_ident() const;
  public:
  void clear_transponder_ident();
  bool transponder_ident() const;
  void set_transponder_ident(bool value);
  private:
  bool _internal_transponder_ident() const;
  void _internal_set_transponder_ident(bool value);
  public:

  // bool ptt_pressed = 14;
  bool has_ptt_pressed() const;
  private:
  bool _internal_has_ptt_pressed() const;
  public:
  void clear_ptt_pressed();
  bool ptt_pressed() const;
  void set_ptt_pressed(bool value);
  private:
  bool _internal_ptt_pressed() const;
  void _internal_set_ptt_pressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.XplaneData.RadioStack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_com_selection_;
  ::PROTOBUF_NAMESPACE_ID::int32 com1_freq_;
  float com1_volume_;
  bool com1_power_;
  bool com1_audio_selection_;
  bool com2_power_;
  bool com2_audio_selection_;
  ::PROTOBUF_NAMESPACE_ID::int32 com2_freq_;
  float com2_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_mode_;
  bool avionics_power_on_;
  bool transponder_ident_;
  bool ptt_pressed_;
  friend struct ::TableStruct_XplaneData_2eproto;
};
// -------------------------------------------------------------------

class XplaneData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.XplaneData) */ {
 public:
  inline XplaneData() : XplaneData(nullptr) {}
  virtual ~XplaneData();
  explicit constexpr XplaneData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XplaneData(const XplaneData& from);
  XplaneData(XplaneData&& from) noexcept
    : XplaneData() {
    *this = ::std::move(from);
  }

  inline XplaneData& operator=(const XplaneData& from) {
    CopyFrom(from);
    return *this;
  }
  inline XplaneData& operator=(XplaneData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XplaneData& default_instance() {
    return *internal_default_instance();
  }
  static inline const XplaneData* internal_default_instance() {
    return reinterpret_cast<const XplaneData*>(
               &_XplaneData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(XplaneData& a, XplaneData& b) {
    a.Swap(&b);
  }
  inline void Swap(XplaneData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XplaneData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XplaneData* New() const final {
    return CreateMaybeMessage<XplaneData>(nullptr);
  }

  XplaneData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XplaneData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XplaneData& from);
  void MergeFrom(const XplaneData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XplaneData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.XplaneData";
  }
  protected:
  explicit XplaneData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_XplaneData_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef XplaneData_UserAircraftData UserAircraftData;
  typedef XplaneData_UserAircraftConfigData UserAircraftConfigData;
  typedef XplaneData_RadioStack RadioStack;

  // accessors -------------------------------------------------------

  enum : int {
    kUserAircraftDataFieldNumber = 1,
    kUserAircraftConfigFieldNumber = 2,
    kRadioStackFieldNumber = 3,
    kReplayModeFieldNumber = 4,
  };
  // .xpilot.XplaneData.UserAircraftData user_aircraft_data = 1;
  bool has_user_aircraft_data() const;
  private:
  bool _internal_has_user_aircraft_data() const;
  public:
  void clear_user_aircraft_data();
  const ::xpilot::XplaneData_UserAircraftData& user_aircraft_data() const;
  ::xpilot::XplaneData_UserAircraftData* release_user_aircraft_data();
  ::xpilot::XplaneData_UserAircraftData* mutable_user_aircraft_data();
  void set_allocated_user_aircraft_data(::xpilot::XplaneData_UserAircraftData* user_aircraft_data);
  private:
  const ::xpilot::XplaneData_UserAircraftData& _internal_user_aircraft_data() const;
  ::xpilot::XplaneData_UserAircraftData* _internal_mutable_user_aircraft_data();
  public:
  void unsafe_arena_set_allocated_user_aircraft_data(
      ::xpilot::XplaneData_UserAircraftData* user_aircraft_data);
  ::xpilot::XplaneData_UserAircraftData* unsafe_arena_release_user_aircraft_data();

  // .xpilot.XplaneData.UserAircraftConfigData user_aircraft_config = 2;
  bool has_user_aircraft_config() const;
  private:
  bool _internal_has_user_aircraft_config() const;
  public:
  void clear_user_aircraft_config();
  const ::xpilot::XplaneData_UserAircraftConfigData& user_aircraft_config() const;
  ::xpilot::XplaneData_UserAircraftConfigData* release_user_aircraft_config();
  ::xpilot::XplaneData_UserAircraftConfigData* mutable_user_aircraft_config();
  void set_allocated_user_aircraft_config(::xpilot::XplaneData_UserAircraftConfigData* user_aircraft_config);
  private:
  const ::xpilot::XplaneData_UserAircraftConfigData& _internal_user_aircraft_config() const;
  ::xpilot::XplaneData_UserAircraftConfigData* _internal_mutable_user_aircraft_config();
  public:
  void unsafe_arena_set_allocated_user_aircraft_config(
      ::xpilot::XplaneData_UserAircraftConfigData* user_aircraft_config);
  ::xpilot::XplaneData_UserAircraftConfigData* unsafe_arena_release_user_aircraft_config();

  // .xpilot.XplaneData.RadioStack radio_stack = 3;
  bool has_radio_stack() const;
  private:
  bool _internal_has_radio_stack() const;
  public:
  void clear_radio_stack();
  const ::xpilot::XplaneData_RadioStack& radio_stack() const;
  ::xpilot::XplaneData_RadioStack* release_radio_stack();
  ::xpilot::XplaneData_RadioStack* mutable_radio_stack();
  void set_allocated_radio_stack(::xpilot::XplaneData_RadioStack* radio_stack);
  private:
  const ::xpilot::XplaneData_RadioStack& _internal_radio_stack() const;
  ::xpilot::XplaneData_RadioStack* _internal_mutable_radio_stack();
  public:
  void unsafe_arena_set_allocated_radio_stack(
      ::xpilot::XplaneData_RadioStack* radio_stack);
  ::xpilot::XplaneData_RadioStack* unsafe_arena_release_radio_stack();

  // bool replay_mode = 4;
  bool has_replay_mode() const;
  private:
  bool _internal_has_replay_mode() const;
  public:
  void clear_replay_mode();
  bool replay_mode() const;
  void set_replay_mode(bool value);
  private:
  bool _internal_replay_mode() const;
  void _internal_set_replay_mode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.XplaneData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::xpilot::XplaneData_UserAircraftData* user_aircraft_data_;
  ::xpilot::XplaneData_UserAircraftConfigData* user_aircraft_config_;
  ::xpilot::XplaneData_RadioStack* radio_stack_;
  bool replay_mode_;
  friend struct ::TableStruct_XplaneData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XplaneData_UserAircraftData

// double longitude = 1;
inline bool XplaneData_UserAircraftData::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_longitude() const {
  return _internal_has_longitude();
}
inline void XplaneData_UserAircraftData::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double XplaneData_UserAircraftData::_internal_longitude() const {
  return longitude_;
}
inline double XplaneData_UserAircraftData::longitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.longitude)
  return _internal_longitude();
}
inline void XplaneData_UserAircraftData::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  longitude_ = value;
}
inline void XplaneData_UserAircraftData::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.longitude)
}

// double latitude = 2;
inline bool XplaneData_UserAircraftData::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_latitude() const {
  return _internal_has_latitude();
}
inline void XplaneData_UserAircraftData::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double XplaneData_UserAircraftData::_internal_latitude() const {
  return latitude_;
}
inline double XplaneData_UserAircraftData::latitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.latitude)
  return _internal_latitude();
}
inline void XplaneData_UserAircraftData::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  latitude_ = value;
}
inline void XplaneData_UserAircraftData::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.latitude)
}

// double altitude_msl = 3;
inline bool XplaneData_UserAircraftData::_internal_has_altitude_msl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_altitude_msl() const {
  return _internal_has_altitude_msl();
}
inline void XplaneData_UserAircraftData::clear_altitude_msl() {
  altitude_msl_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double XplaneData_UserAircraftData::_internal_altitude_msl() const {
  return altitude_msl_;
}
inline double XplaneData_UserAircraftData::altitude_msl() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.altitude_msl)
  return _internal_altitude_msl();
}
inline void XplaneData_UserAircraftData::_internal_set_altitude_msl(double value) {
  _has_bits_[0] |= 0x00000004u;
  altitude_msl_ = value;
}
inline void XplaneData_UserAircraftData::set_altitude_msl(double value) {
  _internal_set_altitude_msl(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.altitude_msl)
}

// double altitude_agl = 4;
inline bool XplaneData_UserAircraftData::_internal_has_altitude_agl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_altitude_agl() const {
  return _internal_has_altitude_agl();
}
inline void XplaneData_UserAircraftData::clear_altitude_agl() {
  altitude_agl_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double XplaneData_UserAircraftData::_internal_altitude_agl() const {
  return altitude_agl_;
}
inline double XplaneData_UserAircraftData::altitude_agl() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.altitude_agl)
  return _internal_altitude_agl();
}
inline void XplaneData_UserAircraftData::_internal_set_altitude_agl(double value) {
  _has_bits_[0] |= 0x00000008u;
  altitude_agl_ = value;
}
inline void XplaneData_UserAircraftData::set_altitude_agl(double value) {
  _internal_set_altitude_agl(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.altitude_agl)
}

// double ground_speed = 5;
inline bool XplaneData_UserAircraftData::_internal_has_ground_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_ground_speed() const {
  return _internal_has_ground_speed();
}
inline void XplaneData_UserAircraftData::clear_ground_speed() {
  ground_speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double XplaneData_UserAircraftData::_internal_ground_speed() const {
  return ground_speed_;
}
inline double XplaneData_UserAircraftData::ground_speed() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.ground_speed)
  return _internal_ground_speed();
}
inline void XplaneData_UserAircraftData::_internal_set_ground_speed(double value) {
  _has_bits_[0] |= 0x00000010u;
  ground_speed_ = value;
}
inline void XplaneData_UserAircraftData::set_ground_speed(double value) {
  _internal_set_ground_speed(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.ground_speed)
}

// double pitch = 6;
inline bool XplaneData_UserAircraftData::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_pitch() const {
  return _internal_has_pitch();
}
inline void XplaneData_UserAircraftData::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double XplaneData_UserAircraftData::_internal_pitch() const {
  return pitch_;
}
inline double XplaneData_UserAircraftData::pitch() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.pitch)
  return _internal_pitch();
}
inline void XplaneData_UserAircraftData::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000020u;
  pitch_ = value;
}
inline void XplaneData_UserAircraftData::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.pitch)
}

// double roll = 7;
inline bool XplaneData_UserAircraftData::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_roll() const {
  return _internal_has_roll();
}
inline void XplaneData_UserAircraftData::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double XplaneData_UserAircraftData::_internal_roll() const {
  return roll_;
}
inline double XplaneData_UserAircraftData::roll() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.roll)
  return _internal_roll();
}
inline void XplaneData_UserAircraftData::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00000040u;
  roll_ = value;
}
inline void XplaneData_UserAircraftData::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.roll)
}

// double yaw = 8;
inline bool XplaneData_UserAircraftData::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_yaw() const {
  return _internal_has_yaw();
}
inline void XplaneData_UserAircraftData::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double XplaneData_UserAircraftData::_internal_yaw() const {
  return yaw_;
}
inline double XplaneData_UserAircraftData::yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.yaw)
  return _internal_yaw();
}
inline void XplaneData_UserAircraftData::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00000080u;
  yaw_ = value;
}
inline void XplaneData_UserAircraftData::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.yaw)
}

// double velocity_latitude = 9;
inline bool XplaneData_UserAircraftData::_internal_has_velocity_latitude() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_velocity_latitude() const {
  return _internal_has_velocity_latitude();
}
inline void XplaneData_UserAircraftData::clear_velocity_latitude() {
  velocity_latitude_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double XplaneData_UserAircraftData::_internal_velocity_latitude() const {
  return velocity_latitude_;
}
inline double XplaneData_UserAircraftData::velocity_latitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.velocity_latitude)
  return _internal_velocity_latitude();
}
inline void XplaneData_UserAircraftData::_internal_set_velocity_latitude(double value) {
  _has_bits_[0] |= 0x00000100u;
  velocity_latitude_ = value;
}
inline void XplaneData_UserAircraftData::set_velocity_latitude(double value) {
  _internal_set_velocity_latitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.velocity_latitude)
}

// double velocity_altitude = 10;
inline bool XplaneData_UserAircraftData::_internal_has_velocity_altitude() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_velocity_altitude() const {
  return _internal_has_velocity_altitude();
}
inline void XplaneData_UserAircraftData::clear_velocity_altitude() {
  velocity_altitude_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double XplaneData_UserAircraftData::_internal_velocity_altitude() const {
  return velocity_altitude_;
}
inline double XplaneData_UserAircraftData::velocity_altitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.velocity_altitude)
  return _internal_velocity_altitude();
}
inline void XplaneData_UserAircraftData::_internal_set_velocity_altitude(double value) {
  _has_bits_[0] |= 0x00000200u;
  velocity_altitude_ = value;
}
inline void XplaneData_UserAircraftData::set_velocity_altitude(double value) {
  _internal_set_velocity_altitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.velocity_altitude)
}

// double velocity_longitude = 11;
inline bool XplaneData_UserAircraftData::_internal_has_velocity_longitude() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_velocity_longitude() const {
  return _internal_has_velocity_longitude();
}
inline void XplaneData_UserAircraftData::clear_velocity_longitude() {
  velocity_longitude_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double XplaneData_UserAircraftData::_internal_velocity_longitude() const {
  return velocity_longitude_;
}
inline double XplaneData_UserAircraftData::velocity_longitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.velocity_longitude)
  return _internal_velocity_longitude();
}
inline void XplaneData_UserAircraftData::_internal_set_velocity_longitude(double value) {
  _has_bits_[0] |= 0x00000400u;
  velocity_longitude_ = value;
}
inline void XplaneData_UserAircraftData::set_velocity_longitude(double value) {
  _internal_set_velocity_longitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.velocity_longitude)
}

// double velocity_pitch = 12;
inline bool XplaneData_UserAircraftData::_internal_has_velocity_pitch() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_velocity_pitch() const {
  return _internal_has_velocity_pitch();
}
inline void XplaneData_UserAircraftData::clear_velocity_pitch() {
  velocity_pitch_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double XplaneData_UserAircraftData::_internal_velocity_pitch() const {
  return velocity_pitch_;
}
inline double XplaneData_UserAircraftData::velocity_pitch() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.velocity_pitch)
  return _internal_velocity_pitch();
}
inline void XplaneData_UserAircraftData::_internal_set_velocity_pitch(double value) {
  _has_bits_[0] |= 0x00000800u;
  velocity_pitch_ = value;
}
inline void XplaneData_UserAircraftData::set_velocity_pitch(double value) {
  _internal_set_velocity_pitch(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.velocity_pitch)
}

// double velocity_heading = 13;
inline bool XplaneData_UserAircraftData::_internal_has_velocity_heading() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_velocity_heading() const {
  return _internal_has_velocity_heading();
}
inline void XplaneData_UserAircraftData::clear_velocity_heading() {
  velocity_heading_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double XplaneData_UserAircraftData::_internal_velocity_heading() const {
  return velocity_heading_;
}
inline double XplaneData_UserAircraftData::velocity_heading() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.velocity_heading)
  return _internal_velocity_heading();
}
inline void XplaneData_UserAircraftData::_internal_set_velocity_heading(double value) {
  _has_bits_[0] |= 0x00001000u;
  velocity_heading_ = value;
}
inline void XplaneData_UserAircraftData::set_velocity_heading(double value) {
  _internal_set_velocity_heading(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.velocity_heading)
}

// double velocity_bank = 14;
inline bool XplaneData_UserAircraftData::_internal_has_velocity_bank() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftData::has_velocity_bank() const {
  return _internal_has_velocity_bank();
}
inline void XplaneData_UserAircraftData::clear_velocity_bank() {
  velocity_bank_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double XplaneData_UserAircraftData::_internal_velocity_bank() const {
  return velocity_bank_;
}
inline double XplaneData_UserAircraftData::velocity_bank() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftData.velocity_bank)
  return _internal_velocity_bank();
}
inline void XplaneData_UserAircraftData::_internal_set_velocity_bank(double value) {
  _has_bits_[0] |= 0x00002000u;
  velocity_bank_ = value;
}
inline void XplaneData_UserAircraftData::set_velocity_bank(double value) {
  _internal_set_velocity_bank(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftData.velocity_bank)
}

// -------------------------------------------------------------------

// XplaneData_UserAircraftConfigData

// bool beacon_lights_on = 1;
inline bool XplaneData_UserAircraftConfigData::_internal_has_beacon_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_beacon_lights_on() const {
  return _internal_has_beacon_lights_on();
}
inline void XplaneData_UserAircraftConfigData::clear_beacon_lights_on() {
  beacon_lights_on_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_beacon_lights_on() const {
  return beacon_lights_on_;
}
inline bool XplaneData_UserAircraftConfigData::beacon_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.beacon_lights_on)
  return _internal_beacon_lights_on();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_beacon_lights_on(bool value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_lights_on_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_beacon_lights_on(bool value) {
  _internal_set_beacon_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.beacon_lights_on)
}

// bool landing_lights_on = 2;
inline bool XplaneData_UserAircraftConfigData::_internal_has_landing_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_landing_lights_on() const {
  return _internal_has_landing_lights_on();
}
inline void XplaneData_UserAircraftConfigData::clear_landing_lights_on() {
  landing_lights_on_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_landing_lights_on() const {
  return landing_lights_on_;
}
inline bool XplaneData_UserAircraftConfigData::landing_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.landing_lights_on)
  return _internal_landing_lights_on();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_landing_lights_on(bool value) {
  _has_bits_[0] |= 0x00000002u;
  landing_lights_on_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_landing_lights_on(bool value) {
  _internal_set_landing_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.landing_lights_on)
}

// bool nav_lights_on = 3;
inline bool XplaneData_UserAircraftConfigData::_internal_has_nav_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_nav_lights_on() const {
  return _internal_has_nav_lights_on();
}
inline void XplaneData_UserAircraftConfigData::clear_nav_lights_on() {
  nav_lights_on_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_nav_lights_on() const {
  return nav_lights_on_;
}
inline bool XplaneData_UserAircraftConfigData::nav_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.nav_lights_on)
  return _internal_nav_lights_on();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_nav_lights_on(bool value) {
  _has_bits_[0] |= 0x00000004u;
  nav_lights_on_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_nav_lights_on(bool value) {
  _internal_set_nav_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.nav_lights_on)
}

// bool strobe_lights_on = 4;
inline bool XplaneData_UserAircraftConfigData::_internal_has_strobe_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_strobe_lights_on() const {
  return _internal_has_strobe_lights_on();
}
inline void XplaneData_UserAircraftConfigData::clear_strobe_lights_on() {
  strobe_lights_on_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_strobe_lights_on() const {
  return strobe_lights_on_;
}
inline bool XplaneData_UserAircraftConfigData::strobe_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.strobe_lights_on)
  return _internal_strobe_lights_on();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_strobe_lights_on(bool value) {
  _has_bits_[0] |= 0x00000008u;
  strobe_lights_on_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_strobe_lights_on(bool value) {
  _internal_set_strobe_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.strobe_lights_on)
}

// bool taxi_lights_on = 5;
inline bool XplaneData_UserAircraftConfigData::_internal_has_taxi_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_taxi_lights_on() const {
  return _internal_has_taxi_lights_on();
}
inline void XplaneData_UserAircraftConfigData::clear_taxi_lights_on() {
  taxi_lights_on_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_taxi_lights_on() const {
  return taxi_lights_on_;
}
inline bool XplaneData_UserAircraftConfigData::taxi_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.taxi_lights_on)
  return _internal_taxi_lights_on();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_taxi_lights_on(bool value) {
  _has_bits_[0] |= 0x00000010u;
  taxi_lights_on_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_taxi_lights_on(bool value) {
  _internal_set_taxi_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.taxi_lights_on)
}

// double flaps = 6;
inline bool XplaneData_UserAircraftConfigData::_internal_has_flaps() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_flaps() const {
  return _internal_has_flaps();
}
inline void XplaneData_UserAircraftConfigData::clear_flaps() {
  flaps_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double XplaneData_UserAircraftConfigData::_internal_flaps() const {
  return flaps_;
}
inline double XplaneData_UserAircraftConfigData::flaps() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.flaps)
  return _internal_flaps();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_flaps(double value) {
  _has_bits_[0] |= 0x00000100u;
  flaps_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_flaps(double value) {
  _internal_set_flaps(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.flaps)
}

// bool gear_down = 7;
inline bool XplaneData_UserAircraftConfigData::_internal_has_gear_down() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_gear_down() const {
  return _internal_has_gear_down();
}
inline void XplaneData_UserAircraftConfigData::clear_gear_down() {
  gear_down_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_gear_down() const {
  return gear_down_;
}
inline bool XplaneData_UserAircraftConfigData::gear_down() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.gear_down)
  return _internal_gear_down();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_gear_down(bool value) {
  _has_bits_[0] |= 0x00000020u;
  gear_down_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_gear_down(bool value) {
  _internal_set_gear_down(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.gear_down)
}

// double speed_brakes = 8;
inline bool XplaneData_UserAircraftConfigData::_internal_has_speed_brakes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_speed_brakes() const {
  return _internal_has_speed_brakes();
}
inline void XplaneData_UserAircraftConfigData::clear_speed_brakes() {
  speed_brakes_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double XplaneData_UserAircraftConfigData::_internal_speed_brakes() const {
  return speed_brakes_;
}
inline double XplaneData_UserAircraftConfigData::speed_brakes() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.speed_brakes)
  return _internal_speed_brakes();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_speed_brakes(double value) {
  _has_bits_[0] |= 0x00000200u;
  speed_brakes_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_speed_brakes(double value) {
  _internal_set_speed_brakes(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.speed_brakes)
}

// int32 engine_count = 9;
inline bool XplaneData_UserAircraftConfigData::_internal_has_engine_count() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_engine_count() const {
  return _internal_has_engine_count();
}
inline void XplaneData_UserAircraftConfigData::clear_engine_count() {
  engine_count_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_UserAircraftConfigData::_internal_engine_count() const {
  return engine_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_UserAircraftConfigData::engine_count() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.engine_count)
  return _internal_engine_count();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  engine_count_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_count(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.engine_count)
}

// bool engine1_running = 10;
inline bool XplaneData_UserAircraftConfigData::_internal_has_engine1_running() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_engine1_running() const {
  return _internal_has_engine1_running();
}
inline void XplaneData_UserAircraftConfigData::clear_engine1_running() {
  engine1_running_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_engine1_running() const {
  return engine1_running_;
}
inline bool XplaneData_UserAircraftConfigData::engine1_running() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.engine1_running)
  return _internal_engine1_running();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_engine1_running(bool value) {
  _has_bits_[0] |= 0x00000040u;
  engine1_running_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_engine1_running(bool value) {
  _internal_set_engine1_running(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.engine1_running)
}

// bool engine2_running = 11;
inline bool XplaneData_UserAircraftConfigData::_internal_has_engine2_running() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_engine2_running() const {
  return _internal_has_engine2_running();
}
inline void XplaneData_UserAircraftConfigData::clear_engine2_running() {
  engine2_running_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_engine2_running() const {
  return engine2_running_;
}
inline bool XplaneData_UserAircraftConfigData::engine2_running() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.engine2_running)
  return _internal_engine2_running();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_engine2_running(bool value) {
  _has_bits_[0] |= 0x00000080u;
  engine2_running_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_engine2_running(bool value) {
  _internal_set_engine2_running(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.engine2_running)
}

// bool engine3_running = 12;
inline bool XplaneData_UserAircraftConfigData::_internal_has_engine3_running() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_engine3_running() const {
  return _internal_has_engine3_running();
}
inline void XplaneData_UserAircraftConfigData::clear_engine3_running() {
  engine3_running_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_engine3_running() const {
  return engine3_running_;
}
inline bool XplaneData_UserAircraftConfigData::engine3_running() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.engine3_running)
  return _internal_engine3_running();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_engine3_running(bool value) {
  _has_bits_[0] |= 0x00000800u;
  engine3_running_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_engine3_running(bool value) {
  _internal_set_engine3_running(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.engine3_running)
}

// bool engine4_running = 13;
inline bool XplaneData_UserAircraftConfigData::_internal_has_engine4_running() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_engine4_running() const {
  return _internal_has_engine4_running();
}
inline void XplaneData_UserAircraftConfigData::clear_engine4_running() {
  engine4_running_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_engine4_running() const {
  return engine4_running_;
}
inline bool XplaneData_UserAircraftConfigData::engine4_running() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.engine4_running)
  return _internal_engine4_running();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_engine4_running(bool value) {
  _has_bits_[0] |= 0x00001000u;
  engine4_running_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_engine4_running(bool value) {
  _internal_set_engine4_running(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.engine4_running)
}

// bool on_ground = 14;
inline bool XplaneData_UserAircraftConfigData::_internal_has_on_ground() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool XplaneData_UserAircraftConfigData::has_on_ground() const {
  return _internal_has_on_ground();
}
inline void XplaneData_UserAircraftConfigData::clear_on_ground() {
  on_ground_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool XplaneData_UserAircraftConfigData::_internal_on_ground() const {
  return on_ground_;
}
inline bool XplaneData_UserAircraftConfigData::on_ground() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.UserAircraftConfigData.on_ground)
  return _internal_on_ground();
}
inline void XplaneData_UserAircraftConfigData::_internal_set_on_ground(bool value) {
  _has_bits_[0] |= 0x00002000u;
  on_ground_ = value;
}
inline void XplaneData_UserAircraftConfigData::set_on_ground(bool value) {
  _internal_set_on_ground(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.UserAircraftConfigData.on_ground)
}

// -------------------------------------------------------------------

// XplaneData_RadioStack

// int32 audio_com_selection = 1;
inline bool XplaneData_RadioStack::_internal_has_audio_com_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_audio_com_selection() const {
  return _internal_has_audio_com_selection();
}
inline void XplaneData_RadioStack::clear_audio_com_selection() {
  audio_com_selection_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::_internal_audio_com_selection() const {
  return audio_com_selection_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::audio_com_selection() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.audio_com_selection)
  return _internal_audio_com_selection();
}
inline void XplaneData_RadioStack::_internal_set_audio_com_selection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  audio_com_selection_ = value;
}
inline void XplaneData_RadioStack::set_audio_com_selection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_audio_com_selection(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.audio_com_selection)
}

// bool com1_power = 2;
inline bool XplaneData_RadioStack::_internal_has_com1_power() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_com1_power() const {
  return _internal_has_com1_power();
}
inline void XplaneData_RadioStack::clear_com1_power() {
  com1_power_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool XplaneData_RadioStack::_internal_com1_power() const {
  return com1_power_;
}
inline bool XplaneData_RadioStack::com1_power() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.com1_power)
  return _internal_com1_power();
}
inline void XplaneData_RadioStack::_internal_set_com1_power(bool value) {
  _has_bits_[0] |= 0x00000008u;
  com1_power_ = value;
}
inline void XplaneData_RadioStack::set_com1_power(bool value) {
  _internal_set_com1_power(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.com1_power)
}

// int32 com1_freq = 3;
inline bool XplaneData_RadioStack::_internal_has_com1_freq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_com1_freq() const {
  return _internal_has_com1_freq();
}
inline void XplaneData_RadioStack::clear_com1_freq() {
  com1_freq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::_internal_com1_freq() const {
  return com1_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::com1_freq() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.com1_freq)
  return _internal_com1_freq();
}
inline void XplaneData_RadioStack::_internal_set_com1_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  com1_freq_ = value;
}
inline void XplaneData_RadioStack::set_com1_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_com1_freq(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.com1_freq)
}

// bool com1_audio_selection = 4;
inline bool XplaneData_RadioStack::_internal_has_com1_audio_selection() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_com1_audio_selection() const {
  return _internal_has_com1_audio_selection();
}
inline void XplaneData_RadioStack::clear_com1_audio_selection() {
  com1_audio_selection_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool XplaneData_RadioStack::_internal_com1_audio_selection() const {
  return com1_audio_selection_;
}
inline bool XplaneData_RadioStack::com1_audio_selection() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.com1_audio_selection)
  return _internal_com1_audio_selection();
}
inline void XplaneData_RadioStack::_internal_set_com1_audio_selection(bool value) {
  _has_bits_[0] |= 0x00000010u;
  com1_audio_selection_ = value;
}
inline void XplaneData_RadioStack::set_com1_audio_selection(bool value) {
  _internal_set_com1_audio_selection(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.com1_audio_selection)
}

// float com1_volume = 5;
inline bool XplaneData_RadioStack::_internal_has_com1_volume() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_com1_volume() const {
  return _internal_has_com1_volume();
}
inline void XplaneData_RadioStack::clear_com1_volume() {
  com1_volume_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float XplaneData_RadioStack::_internal_com1_volume() const {
  return com1_volume_;
}
inline float XplaneData_RadioStack::com1_volume() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.com1_volume)
  return _internal_com1_volume();
}
inline void XplaneData_RadioStack::_internal_set_com1_volume(float value) {
  _has_bits_[0] |= 0x00000004u;
  com1_volume_ = value;
}
inline void XplaneData_RadioStack::set_com1_volume(float value) {
  _internal_set_com1_volume(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.com1_volume)
}

// bool com2_power = 6;
inline bool XplaneData_RadioStack::_internal_has_com2_power() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_com2_power() const {
  return _internal_has_com2_power();
}
inline void XplaneData_RadioStack::clear_com2_power() {
  com2_power_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool XplaneData_RadioStack::_internal_com2_power() const {
  return com2_power_;
}
inline bool XplaneData_RadioStack::com2_power() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.com2_power)
  return _internal_com2_power();
}
inline void XplaneData_RadioStack::_internal_set_com2_power(bool value) {
  _has_bits_[0] |= 0x00000020u;
  com2_power_ = value;
}
inline void XplaneData_RadioStack::set_com2_power(bool value) {
  _internal_set_com2_power(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.com2_power)
}

// int32 com2_freq = 7;
inline bool XplaneData_RadioStack::_internal_has_com2_freq() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_com2_freq() const {
  return _internal_has_com2_freq();
}
inline void XplaneData_RadioStack::clear_com2_freq() {
  com2_freq_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::_internal_com2_freq() const {
  return com2_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::com2_freq() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.com2_freq)
  return _internal_com2_freq();
}
inline void XplaneData_RadioStack::_internal_set_com2_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  com2_freq_ = value;
}
inline void XplaneData_RadioStack::set_com2_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_com2_freq(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.com2_freq)
}

// bool com2_audio_selection = 8;
inline bool XplaneData_RadioStack::_internal_has_com2_audio_selection() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_com2_audio_selection() const {
  return _internal_has_com2_audio_selection();
}
inline void XplaneData_RadioStack::clear_com2_audio_selection() {
  com2_audio_selection_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool XplaneData_RadioStack::_internal_com2_audio_selection() const {
  return com2_audio_selection_;
}
inline bool XplaneData_RadioStack::com2_audio_selection() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.com2_audio_selection)
  return _internal_com2_audio_selection();
}
inline void XplaneData_RadioStack::_internal_set_com2_audio_selection(bool value) {
  _has_bits_[0] |= 0x00000040u;
  com2_audio_selection_ = value;
}
inline void XplaneData_RadioStack::set_com2_audio_selection(bool value) {
  _internal_set_com2_audio_selection(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.com2_audio_selection)
}

// float com2_volume = 9;
inline bool XplaneData_RadioStack::_internal_has_com2_volume() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_com2_volume() const {
  return _internal_has_com2_volume();
}
inline void XplaneData_RadioStack::clear_com2_volume() {
  com2_volume_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float XplaneData_RadioStack::_internal_com2_volume() const {
  return com2_volume_;
}
inline float XplaneData_RadioStack::com2_volume() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.com2_volume)
  return _internal_com2_volume();
}
inline void XplaneData_RadioStack::_internal_set_com2_volume(float value) {
  _has_bits_[0] |= 0x00000100u;
  com2_volume_ = value;
}
inline void XplaneData_RadioStack::set_com2_volume(float value) {
  _internal_set_com2_volume(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.com2_volume)
}

// bool avionics_power_on = 10;
inline bool XplaneData_RadioStack::_internal_has_avionics_power_on() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_avionics_power_on() const {
  return _internal_has_avionics_power_on();
}
inline void XplaneData_RadioStack::clear_avionics_power_on() {
  avionics_power_on_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool XplaneData_RadioStack::_internal_avionics_power_on() const {
  return avionics_power_on_;
}
inline bool XplaneData_RadioStack::avionics_power_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.avionics_power_on)
  return _internal_avionics_power_on();
}
inline void XplaneData_RadioStack::_internal_set_avionics_power_on(bool value) {
  _has_bits_[0] |= 0x00000800u;
  avionics_power_on_ = value;
}
inline void XplaneData_RadioStack::set_avionics_power_on(bool value) {
  _internal_set_avionics_power_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.avionics_power_on)
}

// int32 transponder_code = 11;
inline bool XplaneData_RadioStack::_internal_has_transponder_code() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_transponder_code() const {
  return _internal_has_transponder_code();
}
inline void XplaneData_RadioStack::clear_transponder_code() {
  transponder_code_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::_internal_transponder_code() const {
  return transponder_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::transponder_code() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.transponder_code)
  return _internal_transponder_code();
}
inline void XplaneData_RadioStack::_internal_set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  transponder_code_ = value;
}
inline void XplaneData_RadioStack::set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transponder_code(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.transponder_code)
}

// int32 transponder_mode = 12;
inline bool XplaneData_RadioStack::_internal_has_transponder_mode() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_transponder_mode() const {
  return _internal_has_transponder_mode();
}
inline void XplaneData_RadioStack::clear_transponder_mode() {
  transponder_mode_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::_internal_transponder_mode() const {
  return transponder_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneData_RadioStack::transponder_mode() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.transponder_mode)
  return _internal_transponder_mode();
}
inline void XplaneData_RadioStack::_internal_set_transponder_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  transponder_mode_ = value;
}
inline void XplaneData_RadioStack::set_transponder_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transponder_mode(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.transponder_mode)
}

// bool transponder_ident = 13;
inline bool XplaneData_RadioStack::_internal_has_transponder_ident() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_transponder_ident() const {
  return _internal_has_transponder_ident();
}
inline void XplaneData_RadioStack::clear_transponder_ident() {
  transponder_ident_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool XplaneData_RadioStack::_internal_transponder_ident() const {
  return transponder_ident_;
}
inline bool XplaneData_RadioStack::transponder_ident() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.transponder_ident)
  return _internal_transponder_ident();
}
inline void XplaneData_RadioStack::_internal_set_transponder_ident(bool value) {
  _has_bits_[0] |= 0x00001000u;
  transponder_ident_ = value;
}
inline void XplaneData_RadioStack::set_transponder_ident(bool value) {
  _internal_set_transponder_ident(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.transponder_ident)
}

// bool ptt_pressed = 14;
inline bool XplaneData_RadioStack::_internal_has_ptt_pressed() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool XplaneData_RadioStack::has_ptt_pressed() const {
  return _internal_has_ptt_pressed();
}
inline void XplaneData_RadioStack::clear_ptt_pressed() {
  ptt_pressed_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool XplaneData_RadioStack::_internal_ptt_pressed() const {
  return ptt_pressed_;
}
inline bool XplaneData_RadioStack::ptt_pressed() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.RadioStack.ptt_pressed)
  return _internal_ptt_pressed();
}
inline void XplaneData_RadioStack::_internal_set_ptt_pressed(bool value) {
  _has_bits_[0] |= 0x00002000u;
  ptt_pressed_ = value;
}
inline void XplaneData_RadioStack::set_ptt_pressed(bool value) {
  _internal_set_ptt_pressed(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.RadioStack.ptt_pressed)
}

// -------------------------------------------------------------------

// XplaneData

// .xpilot.XplaneData.UserAircraftData user_aircraft_data = 1;
inline bool XplaneData::_internal_has_user_aircraft_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || user_aircraft_data_ != nullptr);
  return value;
}
inline bool XplaneData::has_user_aircraft_data() const {
  return _internal_has_user_aircraft_data();
}
inline void XplaneData::clear_user_aircraft_data() {
  if (GetArena() == nullptr && user_aircraft_data_ != nullptr) {
    delete user_aircraft_data_;
  }
  user_aircraft_data_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::xpilot::XplaneData_UserAircraftData& XplaneData::_internal_user_aircraft_data() const {
  const ::xpilot::XplaneData_UserAircraftData* p = user_aircraft_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::xpilot::XplaneData_UserAircraftData&>(
      ::xpilot::_XplaneData_UserAircraftData_default_instance_);
}
inline const ::xpilot::XplaneData_UserAircraftData& XplaneData::user_aircraft_data() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.user_aircraft_data)
  return _internal_user_aircraft_data();
}
inline void XplaneData::unsafe_arena_set_allocated_user_aircraft_data(
    ::xpilot::XplaneData_UserAircraftData* user_aircraft_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_aircraft_data_);
  }
  user_aircraft_data_ = user_aircraft_data;
  if (user_aircraft_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.XplaneData.user_aircraft_data)
}
inline ::xpilot::XplaneData_UserAircraftData* XplaneData::release_user_aircraft_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::xpilot::XplaneData_UserAircraftData* temp = user_aircraft_data_;
  user_aircraft_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::XplaneData_UserAircraftData* XplaneData::unsafe_arena_release_user_aircraft_data() {
  // @@protoc_insertion_point(field_release:xpilot.XplaneData.user_aircraft_data)
  _has_bits_[0] &= ~0x00000001u;
  ::xpilot::XplaneData_UserAircraftData* temp = user_aircraft_data_;
  user_aircraft_data_ = nullptr;
  return temp;
}
inline ::xpilot::XplaneData_UserAircraftData* XplaneData::_internal_mutable_user_aircraft_data() {
  _has_bits_[0] |= 0x00000001u;
  if (user_aircraft_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::XplaneData_UserAircraftData>(GetArena());
    user_aircraft_data_ = p;
  }
  return user_aircraft_data_;
}
inline ::xpilot::XplaneData_UserAircraftData* XplaneData::mutable_user_aircraft_data() {
  // @@protoc_insertion_point(field_mutable:xpilot.XplaneData.user_aircraft_data)
  return _internal_mutable_user_aircraft_data();
}
inline void XplaneData::set_allocated_user_aircraft_data(::xpilot::XplaneData_UserAircraftData* user_aircraft_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_aircraft_data_;
  }
  if (user_aircraft_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_aircraft_data);
    if (message_arena != submessage_arena) {
      user_aircraft_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_aircraft_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_aircraft_data_ = user_aircraft_data;
  // @@protoc_insertion_point(field_set_allocated:xpilot.XplaneData.user_aircraft_data)
}

// .xpilot.XplaneData.UserAircraftConfigData user_aircraft_config = 2;
inline bool XplaneData::_internal_has_user_aircraft_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || user_aircraft_config_ != nullptr);
  return value;
}
inline bool XplaneData::has_user_aircraft_config() const {
  return _internal_has_user_aircraft_config();
}
inline void XplaneData::clear_user_aircraft_config() {
  if (GetArena() == nullptr && user_aircraft_config_ != nullptr) {
    delete user_aircraft_config_;
  }
  user_aircraft_config_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::xpilot::XplaneData_UserAircraftConfigData& XplaneData::_internal_user_aircraft_config() const {
  const ::xpilot::XplaneData_UserAircraftConfigData* p = user_aircraft_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xpilot::XplaneData_UserAircraftConfigData&>(
      ::xpilot::_XplaneData_UserAircraftConfigData_default_instance_);
}
inline const ::xpilot::XplaneData_UserAircraftConfigData& XplaneData::user_aircraft_config() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.user_aircraft_config)
  return _internal_user_aircraft_config();
}
inline void XplaneData::unsafe_arena_set_allocated_user_aircraft_config(
    ::xpilot::XplaneData_UserAircraftConfigData* user_aircraft_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_aircraft_config_);
  }
  user_aircraft_config_ = user_aircraft_config;
  if (user_aircraft_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.XplaneData.user_aircraft_config)
}
inline ::xpilot::XplaneData_UserAircraftConfigData* XplaneData::release_user_aircraft_config() {
  _has_bits_[0] &= ~0x00000002u;
  ::xpilot::XplaneData_UserAircraftConfigData* temp = user_aircraft_config_;
  user_aircraft_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::XplaneData_UserAircraftConfigData* XplaneData::unsafe_arena_release_user_aircraft_config() {
  // @@protoc_insertion_point(field_release:xpilot.XplaneData.user_aircraft_config)
  _has_bits_[0] &= ~0x00000002u;
  ::xpilot::XplaneData_UserAircraftConfigData* temp = user_aircraft_config_;
  user_aircraft_config_ = nullptr;
  return temp;
}
inline ::xpilot::XplaneData_UserAircraftConfigData* XplaneData::_internal_mutable_user_aircraft_config() {
  _has_bits_[0] |= 0x00000002u;
  if (user_aircraft_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::XplaneData_UserAircraftConfigData>(GetArena());
    user_aircraft_config_ = p;
  }
  return user_aircraft_config_;
}
inline ::xpilot::XplaneData_UserAircraftConfigData* XplaneData::mutable_user_aircraft_config() {
  // @@protoc_insertion_point(field_mutable:xpilot.XplaneData.user_aircraft_config)
  return _internal_mutable_user_aircraft_config();
}
inline void XplaneData::set_allocated_user_aircraft_config(::xpilot::XplaneData_UserAircraftConfigData* user_aircraft_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_aircraft_config_;
  }
  if (user_aircraft_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_aircraft_config);
    if (message_arena != submessage_arena) {
      user_aircraft_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_aircraft_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_aircraft_config_ = user_aircraft_config;
  // @@protoc_insertion_point(field_set_allocated:xpilot.XplaneData.user_aircraft_config)
}

// .xpilot.XplaneData.RadioStack radio_stack = 3;
inline bool XplaneData::_internal_has_radio_stack() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || radio_stack_ != nullptr);
  return value;
}
inline bool XplaneData::has_radio_stack() const {
  return _internal_has_radio_stack();
}
inline void XplaneData::clear_radio_stack() {
  if (GetArena() == nullptr && radio_stack_ != nullptr) {
    delete radio_stack_;
  }
  radio_stack_ = nullptr;
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::xpilot::XplaneData_RadioStack& XplaneData::_internal_radio_stack() const {
  const ::xpilot::XplaneData_RadioStack* p = radio_stack_;
  return p != nullptr ? *p : reinterpret_cast<const ::xpilot::XplaneData_RadioStack&>(
      ::xpilot::_XplaneData_RadioStack_default_instance_);
}
inline const ::xpilot::XplaneData_RadioStack& XplaneData::radio_stack() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.radio_stack)
  return _internal_radio_stack();
}
inline void XplaneData::unsafe_arena_set_allocated_radio_stack(
    ::xpilot::XplaneData_RadioStack* radio_stack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radio_stack_);
  }
  radio_stack_ = radio_stack;
  if (radio_stack) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.XplaneData.radio_stack)
}
inline ::xpilot::XplaneData_RadioStack* XplaneData::release_radio_stack() {
  _has_bits_[0] &= ~0x00000004u;
  ::xpilot::XplaneData_RadioStack* temp = radio_stack_;
  radio_stack_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::XplaneData_RadioStack* XplaneData::unsafe_arena_release_radio_stack() {
  // @@protoc_insertion_point(field_release:xpilot.XplaneData.radio_stack)
  _has_bits_[0] &= ~0x00000004u;
  ::xpilot::XplaneData_RadioStack* temp = radio_stack_;
  radio_stack_ = nullptr;
  return temp;
}
inline ::xpilot::XplaneData_RadioStack* XplaneData::_internal_mutable_radio_stack() {
  _has_bits_[0] |= 0x00000004u;
  if (radio_stack_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::XplaneData_RadioStack>(GetArena());
    radio_stack_ = p;
  }
  return radio_stack_;
}
inline ::xpilot::XplaneData_RadioStack* XplaneData::mutable_radio_stack() {
  // @@protoc_insertion_point(field_mutable:xpilot.XplaneData.radio_stack)
  return _internal_mutable_radio_stack();
}
inline void XplaneData::set_allocated_radio_stack(::xpilot::XplaneData_RadioStack* radio_stack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete radio_stack_;
  }
  if (radio_stack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(radio_stack);
    if (message_arena != submessage_arena) {
      radio_stack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radio_stack, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  radio_stack_ = radio_stack;
  // @@protoc_insertion_point(field_set_allocated:xpilot.XplaneData.radio_stack)
}

// bool replay_mode = 4;
inline bool XplaneData::_internal_has_replay_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool XplaneData::has_replay_mode() const {
  return _internal_has_replay_mode();
}
inline void XplaneData::clear_replay_mode() {
  replay_mode_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool XplaneData::_internal_replay_mode() const {
  return replay_mode_;
}
inline bool XplaneData::replay_mode() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneData.replay_mode)
  return _internal_replay_mode();
}
inline void XplaneData::_internal_set_replay_mode(bool value) {
  _has_bits_[0] |= 0x00000008u;
  replay_mode_ = value;
}
inline void XplaneData::set_replay_mode(bool value) {
  _internal_set_replay_mode(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneData.replay_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_XplaneData_2eproto
