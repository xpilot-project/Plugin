// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: xplanedata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xpilot {

  /// <summary>Holder for reflection information generated from xplanedata.proto</summary>
  public static partial class XplanedataReflection {

    #region Descriptor
    /// <summary>File descriptor for xplanedata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XplanedataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChB4cGxhbmVkYXRhLnByb3RvEgZ4cGlsb3Qitg0KClhwbGFuZURhdGESIAoT",
            "YXVkaW9fY29tX3NlbGVjdGlvbhgBIAEoBUgAiAEBEhcKCmNvbTFfcG93ZXIY",
            "AiABKAhIAYgBARIWCgljb20xX2ZyZXEYAyABKAVIAogBARIbCg5jb20xX3N0",
            "YnlfZnJlcRgEIAEoBUgDiAEBEiEKFGNvbTFfYXVkaW9fc2VsZWN0aW9uGAUg",
            "ASgISASIAQESGAoLY29tMV92b2x1bWUYBiABKAJIBYgBARIXCgpjb20yX3Bv",
            "d2VyGAcgASgISAaIAQESFgoJY29tMl9mcmVxGAggASgFSAeIAQESGwoOY29t",
            "Ml9zdGJ5X2ZyZXEYCSABKAVICIgBARIhChRjb20yX2F1ZGlvX3NlbGVjdGlv",
            "bhgKIAEoCEgJiAEBEhgKC2NvbTJfdm9sdW1lGAsgASgCSAqIAQESHgoRYXZp",
            "b25pY3NfcG93ZXJfb24YDCABKAhIC4gBARIVCghsYXRpdHVkZRgNIAEoAUgM",
            "iAEBEhYKCWxvbmdpdHVkZRgOIAEoAUgNiAEBEhUKCGFsdGl0dWRlGA8gASgB",
            "SA6IAQESHgoRcHJlc3N1cmVfYWx0aXR1ZGUYECABKAFID4gBARIZCgxncm91",
            "bmRfc3BlZWQYESABKAFIEIgBARISCgVwaXRjaBgSIAEoAUgRiAEBEhEKBHJv",
            "bGwYEyABKAFIEogBARIQCgN5YXcYFCABKAFIE4gBARIdChB0cmFuc3BvbmRl",
            "cl9jb2RlGBUgASgFSBSIAQESHQoQdHJhbnNwb25kZXJfbW9kZRgWIAEoBUgV",
            "iAEBEh4KEXRyYW5zcG9uZGVyX2lkZW50GBcgASgISBaIAQESHQoQYmVhY29u",
            "X2xpZ2h0c19vbhgYIAEoCEgXiAEBEh4KEWxhbmRpbmdfbGlnaHRzX29uGBkg",
            "ASgISBiIAQESGgoNbmF2X2xpZ2h0c19vbhgaIAEoCEgZiAEBEh0KEHN0cm9i",
            "ZV9saWdodHNfb24YGyABKAhIGogBARIbCg50YXhpX2xpZ2h0c19vbhgcIAEo",
            "CEgbiAEBEhIKBWZsYXBzGB0gASgBSByIAQESFgoJZ2Vhcl9kb3duGB4gASgI",
            "SB2IAQESGQoMc3BlZWRfYnJha2VzGB8gASgBSB6IAQESGQoMZW5naW5lX2Nv",
            "dW50GCAgASgFSB+IAQESHAoPZW5naW5lMV9ydW5uaW5nGCEgASgISCCIAQES",
            "HAoPZW5naW5lMl9ydW5uaW5nGCIgASgISCGIAQESHAoPZW5naW5lM19ydW5u",
            "aW5nGCMgASgISCKIAQESHAoPZW5naW5lNF9ydW5uaW5nGCQgASgISCOIAQES",
            "FgoJb25fZ3JvdW5kGCUgASgISCSIAQESGAoLcmVwbGF5X21vZGUYJiABKAhI",
            "JYgBAUIWChRfYXVkaW9fY29tX3NlbGVjdGlvbkINCgtfY29tMV9wb3dlckIM",
            "CgpfY29tMV9mcmVxQhEKD19jb20xX3N0YnlfZnJlcUIXChVfY29tMV9hdWRp",
            "b19zZWxlY3Rpb25CDgoMX2NvbTFfdm9sdW1lQg0KC19jb20yX3Bvd2VyQgwK",
            "Cl9jb20yX2ZyZXFCEQoPX2NvbTJfc3RieV9mcmVxQhcKFV9jb20yX2F1ZGlv",
            "X3NlbGVjdGlvbkIOCgxfY29tMl92b2x1bWVCFAoSX2F2aW9uaWNzX3Bvd2Vy",
            "X29uQgsKCV9sYXRpdHVkZUIMCgpfbG9uZ2l0dWRlQgsKCV9hbHRpdHVkZUIU",
            "ChJfcHJlc3N1cmVfYWx0aXR1ZGVCDwoNX2dyb3VuZF9zcGVlZEIICgZfcGl0",
            "Y2hCBwoFX3JvbGxCBgoEX3lhd0ITChFfdHJhbnNwb25kZXJfY29kZUITChFf",
            "dHJhbnNwb25kZXJfbW9kZUIUChJfdHJhbnNwb25kZXJfaWRlbnRCEwoRX2Jl",
            "YWNvbl9saWdodHNfb25CFAoSX2xhbmRpbmdfbGlnaHRzX29uQhAKDl9uYXZf",
            "bGlnaHRzX29uQhMKEV9zdHJvYmVfbGlnaHRzX29uQhEKD190YXhpX2xpZ2h0",
            "c19vbkIICgZfZmxhcHNCDAoKX2dlYXJfZG93bkIPCg1fc3BlZWRfYnJha2Vz",
            "Qg8KDV9lbmdpbmVfY291bnRCEgoQX2VuZ2luZTFfcnVubmluZ0ISChBfZW5n",
            "aW5lMl9ydW5uaW5nQhIKEF9lbmdpbmUzX3J1bm5pbmdCEgoQX2VuZ2luZTRf",
            "cnVubmluZ0IMCgpfb25fZ3JvdW5kQg4KDF9yZXBsYXlfbW9kZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xpilot.XplaneData), global::Xpilot.XplaneData.Parser, new[]{ "AudioComSelection", "Com1Power", "Com1Freq", "Com1StbyFreq", "Com1AudioSelection", "Com1Volume", "Com2Power", "Com2Freq", "Com2StbyFreq", "Com2AudioSelection", "Com2Volume", "AvionicsPowerOn", "Latitude", "Longitude", "Altitude", "PressureAltitude", "GroundSpeed", "Pitch", "Roll", "Yaw", "TransponderCode", "TransponderMode", "TransponderIdent", "BeaconLightsOn", "LandingLightsOn", "NavLightsOn", "StrobeLightsOn", "TaxiLightsOn", "Flaps", "GearDown", "SpeedBrakes", "EngineCount", "Engine1Running", "Engine2Running", "Engine3Running", "Engine4Running", "OnGround", "ReplayMode" }, new[]{ "AudioComSelection", "Com1Power", "Com1Freq", "Com1StbyFreq", "Com1AudioSelection", "Com1Volume", "Com2Power", "Com2Freq", "Com2StbyFreq", "Com2AudioSelection", "Com2Volume", "AvionicsPowerOn", "Latitude", "Longitude", "Altitude", "PressureAltitude", "GroundSpeed", "Pitch", "Roll", "Yaw", "TransponderCode", "TransponderMode", "TransponderIdent", "BeaconLightsOn", "LandingLightsOn", "NavLightsOn", "StrobeLightsOn", "TaxiLightsOn", "Flaps", "GearDown", "SpeedBrakes", "EngineCount", "Engine1Running", "Engine2Running", "Engine3Running", "Engine4Running", "OnGround", "ReplayMode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class XplaneData : pb::IMessage<XplaneData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<XplaneData> _parser = new pb::MessageParser<XplaneData>(() => new XplaneData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    private int _hasBits1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XplaneData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Xpilot.XplanedataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XplaneData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XplaneData(XplaneData other) : this() {
      _hasBits0 = other._hasBits0;
      _hasBits1 = other._hasBits1;
      audioComSelection_ = other.audioComSelection_;
      com1Power_ = other.com1Power_;
      com1Freq_ = other.com1Freq_;
      com1StbyFreq_ = other.com1StbyFreq_;
      com1AudioSelection_ = other.com1AudioSelection_;
      com1Volume_ = other.com1Volume_;
      com2Power_ = other.com2Power_;
      com2Freq_ = other.com2Freq_;
      com2StbyFreq_ = other.com2StbyFreq_;
      com2AudioSelection_ = other.com2AudioSelection_;
      com2Volume_ = other.com2Volume_;
      avionicsPowerOn_ = other.avionicsPowerOn_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      altitude_ = other.altitude_;
      pressureAltitude_ = other.pressureAltitude_;
      groundSpeed_ = other.groundSpeed_;
      pitch_ = other.pitch_;
      roll_ = other.roll_;
      yaw_ = other.yaw_;
      transponderCode_ = other.transponderCode_;
      transponderMode_ = other.transponderMode_;
      transponderIdent_ = other.transponderIdent_;
      beaconLightsOn_ = other.beaconLightsOn_;
      landingLightsOn_ = other.landingLightsOn_;
      navLightsOn_ = other.navLightsOn_;
      strobeLightsOn_ = other.strobeLightsOn_;
      taxiLightsOn_ = other.taxiLightsOn_;
      flaps_ = other.flaps_;
      gearDown_ = other.gearDown_;
      speedBrakes_ = other.speedBrakes_;
      engineCount_ = other.engineCount_;
      engine1Running_ = other.engine1Running_;
      engine2Running_ = other.engine2Running_;
      engine3Running_ = other.engine3Running_;
      engine4Running_ = other.engine4Running_;
      onGround_ = other.onGround_;
      replayMode_ = other.replayMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XplaneData Clone() {
      return new XplaneData(this);
    }

    /// <summary>Field number for the "audio_com_selection" field.</summary>
    public const int AudioComSelectionFieldNumber = 1;
    private int audioComSelection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AudioComSelection {
      get { if ((_hasBits0 & 1) != 0) { return audioComSelection_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        audioComSelection_ = value;
      }
    }
    /// <summary>Gets whether the "audio_com_selection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAudioComSelection {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "audio_com_selection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAudioComSelection() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "com1_power" field.</summary>
    public const int Com1PowerFieldNumber = 2;
    private bool com1Power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Com1Power {
      get { if ((_hasBits0 & 2) != 0) { return com1Power_; } else { return false; } }
      set {
        _hasBits0 |= 2;
        com1Power_ = value;
      }
    }
    /// <summary>Gets whether the "com1_power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1Power {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "com1_power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1Power() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "com1_freq" field.</summary>
    public const int Com1FreqFieldNumber = 3;
    private int com1Freq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Com1Freq {
      get { if ((_hasBits0 & 4) != 0) { return com1Freq_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        com1Freq_ = value;
      }
    }
    /// <summary>Gets whether the "com1_freq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1Freq {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "com1_freq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1Freq() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "com1_stby_freq" field.</summary>
    public const int Com1StbyFreqFieldNumber = 4;
    private int com1StbyFreq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Com1StbyFreq {
      get { if ((_hasBits0 & 8) != 0) { return com1StbyFreq_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        com1StbyFreq_ = value;
      }
    }
    /// <summary>Gets whether the "com1_stby_freq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1StbyFreq {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "com1_stby_freq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1StbyFreq() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "com1_audio_selection" field.</summary>
    public const int Com1AudioSelectionFieldNumber = 5;
    private bool com1AudioSelection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Com1AudioSelection {
      get { if ((_hasBits0 & 16) != 0) { return com1AudioSelection_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        com1AudioSelection_ = value;
      }
    }
    /// <summary>Gets whether the "com1_audio_selection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1AudioSelection {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "com1_audio_selection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1AudioSelection() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "com1_volume" field.</summary>
    public const int Com1VolumeFieldNumber = 6;
    private float com1Volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Com1Volume {
      get { if ((_hasBits0 & 32) != 0) { return com1Volume_; } else { return 0F; } }
      set {
        _hasBits0 |= 32;
        com1Volume_ = value;
      }
    }
    /// <summary>Gets whether the "com1_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom1Volume {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "com1_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom1Volume() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "com2_power" field.</summary>
    public const int Com2PowerFieldNumber = 7;
    private bool com2Power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Com2Power {
      get { if ((_hasBits0 & 64) != 0) { return com2Power_; } else { return false; } }
      set {
        _hasBits0 |= 64;
        com2Power_ = value;
      }
    }
    /// <summary>Gets whether the "com2_power" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2Power {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "com2_power" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2Power() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "com2_freq" field.</summary>
    public const int Com2FreqFieldNumber = 8;
    private int com2Freq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Com2Freq {
      get { if ((_hasBits0 & 128) != 0) { return com2Freq_; } else { return 0; } }
      set {
        _hasBits0 |= 128;
        com2Freq_ = value;
      }
    }
    /// <summary>Gets whether the "com2_freq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2Freq {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "com2_freq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2Freq() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "com2_stby_freq" field.</summary>
    public const int Com2StbyFreqFieldNumber = 9;
    private int com2StbyFreq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Com2StbyFreq {
      get { if ((_hasBits0 & 256) != 0) { return com2StbyFreq_; } else { return 0; } }
      set {
        _hasBits0 |= 256;
        com2StbyFreq_ = value;
      }
    }
    /// <summary>Gets whether the "com2_stby_freq" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2StbyFreq {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "com2_stby_freq" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2StbyFreq() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "com2_audio_selection" field.</summary>
    public const int Com2AudioSelectionFieldNumber = 10;
    private bool com2AudioSelection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Com2AudioSelection {
      get { if ((_hasBits0 & 512) != 0) { return com2AudioSelection_; } else { return false; } }
      set {
        _hasBits0 |= 512;
        com2AudioSelection_ = value;
      }
    }
    /// <summary>Gets whether the "com2_audio_selection" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2AudioSelection {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "com2_audio_selection" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2AudioSelection() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "com2_volume" field.</summary>
    public const int Com2VolumeFieldNumber = 11;
    private float com2Volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Com2Volume {
      get { if ((_hasBits0 & 1024) != 0) { return com2Volume_; } else { return 0F; } }
      set {
        _hasBits0 |= 1024;
        com2Volume_ = value;
      }
    }
    /// <summary>Gets whether the "com2_volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCom2Volume {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "com2_volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCom2Volume() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "avionics_power_on" field.</summary>
    public const int AvionicsPowerOnFieldNumber = 12;
    private bool avionicsPowerOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AvionicsPowerOn {
      get { if ((_hasBits0 & 2048) != 0) { return avionicsPowerOn_; } else { return false; } }
      set {
        _hasBits0 |= 2048;
        avionicsPowerOn_ = value;
      }
    }
    /// <summary>Gets whether the "avionics_power_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAvionicsPowerOn {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "avionics_power_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAvionicsPowerOn() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 13;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { if ((_hasBits0 & 4096) != 0) { return latitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 4096;
        latitude_ = value;
      }
    }
    /// <summary>Gets whether the "latitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLatitude {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "latitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLatitude() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 14;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { if ((_hasBits0 & 8192) != 0) { return longitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 8192;
        longitude_ = value;
      }
    }
    /// <summary>Gets whether the "longitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLongitude {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "longitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLongitude() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 15;
    private double altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Altitude {
      get { if ((_hasBits0 & 16384) != 0) { return altitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 16384;
        altitude_ = value;
      }
    }
    /// <summary>Gets whether the "altitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAltitude {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "altitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAltitude() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "pressure_altitude" field.</summary>
    public const int PressureAltitudeFieldNumber = 16;
    private double pressureAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PressureAltitude {
      get { if ((_hasBits0 & 32768) != 0) { return pressureAltitude_; } else { return 0D; } }
      set {
        _hasBits0 |= 32768;
        pressureAltitude_ = value;
      }
    }
    /// <summary>Gets whether the "pressure_altitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPressureAltitude {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "pressure_altitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPressureAltitude() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "ground_speed" field.</summary>
    public const int GroundSpeedFieldNumber = 17;
    private double groundSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GroundSpeed {
      get { if ((_hasBits0 & 65536) != 0) { return groundSpeed_; } else { return 0D; } }
      set {
        _hasBits0 |= 65536;
        groundSpeed_ = value;
      }
    }
    /// <summary>Gets whether the "ground_speed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroundSpeed {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "ground_speed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroundSpeed() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 18;
    private double pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pitch {
      get { if ((_hasBits0 & 131072) != 0) { return pitch_; } else { return 0D; } }
      set {
        _hasBits0 |= 131072;
        pitch_ = value;
      }
    }
    /// <summary>Gets whether the "pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPitch {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPitch() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 19;
    private double roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Roll {
      get { if ((_hasBits0 & 262144) != 0) { return roll_; } else { return 0D; } }
      set {
        _hasBits0 |= 262144;
        roll_ = value;
      }
    }
    /// <summary>Gets whether the "roll" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRoll {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "roll" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRoll() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 20;
    private double yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Yaw {
      get { if ((_hasBits0 & 524288) != 0) { return yaw_; } else { return 0D; } }
      set {
        _hasBits0 |= 524288;
        yaw_ = value;
      }
    }
    /// <summary>Gets whether the "yaw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasYaw {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "yaw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearYaw() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "transponder_code" field.</summary>
    public const int TransponderCodeFieldNumber = 21;
    private int transponderCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransponderCode {
      get { if ((_hasBits0 & 1048576) != 0) { return transponderCode_; } else { return 0; } }
      set {
        _hasBits0 |= 1048576;
        transponderCode_ = value;
      }
    }
    /// <summary>Gets whether the "transponder_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransponderCode {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "transponder_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransponderCode() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "transponder_mode" field.</summary>
    public const int TransponderModeFieldNumber = 22;
    private int transponderMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransponderMode {
      get { if ((_hasBits0 & 2097152) != 0) { return transponderMode_; } else { return 0; } }
      set {
        _hasBits0 |= 2097152;
        transponderMode_ = value;
      }
    }
    /// <summary>Gets whether the "transponder_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransponderMode {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "transponder_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransponderMode() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "transponder_ident" field.</summary>
    public const int TransponderIdentFieldNumber = 23;
    private bool transponderIdent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransponderIdent {
      get { if ((_hasBits0 & 4194304) != 0) { return transponderIdent_; } else { return false; } }
      set {
        _hasBits0 |= 4194304;
        transponderIdent_ = value;
      }
    }
    /// <summary>Gets whether the "transponder_ident" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransponderIdent {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "transponder_ident" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransponderIdent() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "beacon_lights_on" field.</summary>
    public const int BeaconLightsOnFieldNumber = 24;
    private bool beaconLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BeaconLightsOn {
      get { if ((_hasBits0 & 8388608) != 0) { return beaconLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 8388608;
        beaconLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "beacon_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBeaconLightsOn {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "beacon_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBeaconLightsOn() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "landing_lights_on" field.</summary>
    public const int LandingLightsOnFieldNumber = 25;
    private bool landingLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LandingLightsOn {
      get { if ((_hasBits0 & 16777216) != 0) { return landingLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 16777216;
        landingLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "landing_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLandingLightsOn {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "landing_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLandingLightsOn() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "nav_lights_on" field.</summary>
    public const int NavLightsOnFieldNumber = 26;
    private bool navLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NavLightsOn {
      get { if ((_hasBits0 & 33554432) != 0) { return navLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 33554432;
        navLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "nav_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNavLightsOn {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "nav_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNavLightsOn() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "strobe_lights_on" field.</summary>
    public const int StrobeLightsOnFieldNumber = 27;
    private bool strobeLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StrobeLightsOn {
      get { if ((_hasBits0 & 67108864) != 0) { return strobeLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 67108864;
        strobeLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "strobe_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStrobeLightsOn {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "strobe_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrobeLightsOn() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "taxi_lights_on" field.</summary>
    public const int TaxiLightsOnFieldNumber = 28;
    private bool taxiLightsOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TaxiLightsOn {
      get { if ((_hasBits0 & 134217728) != 0) { return taxiLightsOn_; } else { return false; } }
      set {
        _hasBits0 |= 134217728;
        taxiLightsOn_ = value;
      }
    }
    /// <summary>Gets whether the "taxi_lights_on" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaxiLightsOn {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "taxi_lights_on" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaxiLightsOn() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "flaps" field.</summary>
    public const int FlapsFieldNumber = 29;
    private double flaps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Flaps {
      get { if ((_hasBits0 & 268435456) != 0) { return flaps_; } else { return 0D; } }
      set {
        _hasBits0 |= 268435456;
        flaps_ = value;
      }
    }
    /// <summary>Gets whether the "flaps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlaps {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "flaps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlaps() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "gear_down" field.</summary>
    public const int GearDownFieldNumber = 30;
    private bool gearDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GearDown {
      get { if ((_hasBits0 & 536870912) != 0) { return gearDown_; } else { return false; } }
      set {
        _hasBits0 |= 536870912;
        gearDown_ = value;
      }
    }
    /// <summary>Gets whether the "gear_down" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGearDown {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "gear_down" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGearDown() {
      _hasBits0 &= ~536870912;
    }

    /// <summary>Field number for the "speed_brakes" field.</summary>
    public const int SpeedBrakesFieldNumber = 31;
    private double speedBrakes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SpeedBrakes {
      get { if ((_hasBits0 & 1073741824) != 0) { return speedBrakes_; } else { return 0D; } }
      set {
        _hasBits0 |= 1073741824;
        speedBrakes_ = value;
      }
    }
    /// <summary>Gets whether the "speed_brakes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSpeedBrakes {
      get { return (_hasBits0 & 1073741824) != 0; }
    }
    /// <summary>Clears the value of the "speed_brakes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSpeedBrakes() {
      _hasBits0 &= ~1073741824;
    }

    /// <summary>Field number for the "engine_count" field.</summary>
    public const int EngineCountFieldNumber = 32;
    private int engineCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EngineCount {
      get { if ((_hasBits0 & -2147483648) != 0) { return engineCount_; } else { return 0; } }
      set {
        _hasBits0 |= -2147483648;
        engineCount_ = value;
      }
    }
    /// <summary>Gets whether the "engine_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngineCount {
      get { return (_hasBits0 & -2147483648) != 0; }
    }
    /// <summary>Clears the value of the "engine_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngineCount() {
      _hasBits0 &= ~-2147483648;
    }

    /// <summary>Field number for the "engine1_running" field.</summary>
    public const int Engine1RunningFieldNumber = 33;
    private bool engine1Running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Engine1Running {
      get { if ((_hasBits1 & 1) != 0) { return engine1Running_; } else { return false; } }
      set {
        _hasBits1 |= 1;
        engine1Running_ = value;
      }
    }
    /// <summary>Gets whether the "engine1_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine1Running {
      get { return (_hasBits1 & 1) != 0; }
    }
    /// <summary>Clears the value of the "engine1_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine1Running() {
      _hasBits1 &= ~1;
    }

    /// <summary>Field number for the "engine2_running" field.</summary>
    public const int Engine2RunningFieldNumber = 34;
    private bool engine2Running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Engine2Running {
      get { if ((_hasBits1 & 2) != 0) { return engine2Running_; } else { return false; } }
      set {
        _hasBits1 |= 2;
        engine2Running_ = value;
      }
    }
    /// <summary>Gets whether the "engine2_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine2Running {
      get { return (_hasBits1 & 2) != 0; }
    }
    /// <summary>Clears the value of the "engine2_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine2Running() {
      _hasBits1 &= ~2;
    }

    /// <summary>Field number for the "engine3_running" field.</summary>
    public const int Engine3RunningFieldNumber = 35;
    private bool engine3Running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Engine3Running {
      get { if ((_hasBits1 & 4) != 0) { return engine3Running_; } else { return false; } }
      set {
        _hasBits1 |= 4;
        engine3Running_ = value;
      }
    }
    /// <summary>Gets whether the "engine3_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine3Running {
      get { return (_hasBits1 & 4) != 0; }
    }
    /// <summary>Clears the value of the "engine3_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine3Running() {
      _hasBits1 &= ~4;
    }

    /// <summary>Field number for the "engine4_running" field.</summary>
    public const int Engine4RunningFieldNumber = 36;
    private bool engine4Running_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Engine4Running {
      get { if ((_hasBits1 & 8) != 0) { return engine4Running_; } else { return false; } }
      set {
        _hasBits1 |= 8;
        engine4Running_ = value;
      }
    }
    /// <summary>Gets whether the "engine4_running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEngine4Running {
      get { return (_hasBits1 & 8) != 0; }
    }
    /// <summary>Clears the value of the "engine4_running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEngine4Running() {
      _hasBits1 &= ~8;
    }

    /// <summary>Field number for the "on_ground" field.</summary>
    public const int OnGroundFieldNumber = 37;
    private bool onGround_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnGround {
      get { if ((_hasBits1 & 16) != 0) { return onGround_; } else { return false; } }
      set {
        _hasBits1 |= 16;
        onGround_ = value;
      }
    }
    /// <summary>Gets whether the "on_ground" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOnGround {
      get { return (_hasBits1 & 16) != 0; }
    }
    /// <summary>Clears the value of the "on_ground" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnGround() {
      _hasBits1 &= ~16;
    }

    /// <summary>Field number for the "replay_mode" field.</summary>
    public const int ReplayModeFieldNumber = 38;
    private bool replayMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReplayMode {
      get { if ((_hasBits1 & 32) != 0) { return replayMode_; } else { return false; } }
      set {
        _hasBits1 |= 32;
        replayMode_ = value;
      }
    }
    /// <summary>Gets whether the "replay_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReplayMode {
      get { return (_hasBits1 & 32) != 0; }
    }
    /// <summary>Clears the value of the "replay_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReplayMode() {
      _hasBits1 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XplaneData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XplaneData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AudioComSelection != other.AudioComSelection) return false;
      if (Com1Power != other.Com1Power) return false;
      if (Com1Freq != other.Com1Freq) return false;
      if (Com1StbyFreq != other.Com1StbyFreq) return false;
      if (Com1AudioSelection != other.Com1AudioSelection) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Com1Volume, other.Com1Volume)) return false;
      if (Com2Power != other.Com2Power) return false;
      if (Com2Freq != other.Com2Freq) return false;
      if (Com2StbyFreq != other.Com2StbyFreq) return false;
      if (Com2AudioSelection != other.Com2AudioSelection) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Com2Volume, other.Com2Volume)) return false;
      if (AvionicsPowerOn != other.AvionicsPowerOn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PressureAltitude, other.PressureAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GroundSpeed, other.GroundSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (TransponderCode != other.TransponderCode) return false;
      if (TransponderMode != other.TransponderMode) return false;
      if (TransponderIdent != other.TransponderIdent) return false;
      if (BeaconLightsOn != other.BeaconLightsOn) return false;
      if (LandingLightsOn != other.LandingLightsOn) return false;
      if (NavLightsOn != other.NavLightsOn) return false;
      if (StrobeLightsOn != other.StrobeLightsOn) return false;
      if (TaxiLightsOn != other.TaxiLightsOn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Flaps, other.Flaps)) return false;
      if (GearDown != other.GearDown) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpeedBrakes, other.SpeedBrakes)) return false;
      if (EngineCount != other.EngineCount) return false;
      if (Engine1Running != other.Engine1Running) return false;
      if (Engine2Running != other.Engine2Running) return false;
      if (Engine3Running != other.Engine3Running) return false;
      if (Engine4Running != other.Engine4Running) return false;
      if (OnGround != other.OnGround) return false;
      if (ReplayMode != other.ReplayMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAudioComSelection) hash ^= AudioComSelection.GetHashCode();
      if (HasCom1Power) hash ^= Com1Power.GetHashCode();
      if (HasCom1Freq) hash ^= Com1Freq.GetHashCode();
      if (HasCom1StbyFreq) hash ^= Com1StbyFreq.GetHashCode();
      if (HasCom1AudioSelection) hash ^= Com1AudioSelection.GetHashCode();
      if (HasCom1Volume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Com1Volume);
      if (HasCom2Power) hash ^= Com2Power.GetHashCode();
      if (HasCom2Freq) hash ^= Com2Freq.GetHashCode();
      if (HasCom2StbyFreq) hash ^= Com2StbyFreq.GetHashCode();
      if (HasCom2AudioSelection) hash ^= Com2AudioSelection.GetHashCode();
      if (HasCom2Volume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Com2Volume);
      if (HasAvionicsPowerOn) hash ^= AvionicsPowerOn.GetHashCode();
      if (HasLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (HasLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (HasAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Altitude);
      if (HasPressureAltitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PressureAltitude);
      if (HasGroundSpeed) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GroundSpeed);
      if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (HasRoll) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
      if (HasYaw) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Yaw);
      if (HasTransponderCode) hash ^= TransponderCode.GetHashCode();
      if (HasTransponderMode) hash ^= TransponderMode.GetHashCode();
      if (HasTransponderIdent) hash ^= TransponderIdent.GetHashCode();
      if (HasBeaconLightsOn) hash ^= BeaconLightsOn.GetHashCode();
      if (HasLandingLightsOn) hash ^= LandingLightsOn.GetHashCode();
      if (HasNavLightsOn) hash ^= NavLightsOn.GetHashCode();
      if (HasStrobeLightsOn) hash ^= StrobeLightsOn.GetHashCode();
      if (HasTaxiLightsOn) hash ^= TaxiLightsOn.GetHashCode();
      if (HasFlaps) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Flaps);
      if (HasGearDown) hash ^= GearDown.GetHashCode();
      if (HasSpeedBrakes) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpeedBrakes);
      if (HasEngineCount) hash ^= EngineCount.GetHashCode();
      if (HasEngine1Running) hash ^= Engine1Running.GetHashCode();
      if (HasEngine2Running) hash ^= Engine2Running.GetHashCode();
      if (HasEngine3Running) hash ^= Engine3Running.GetHashCode();
      if (HasEngine4Running) hash ^= Engine4Running.GetHashCode();
      if (HasOnGround) hash ^= OnGround.GetHashCode();
      if (HasReplayMode) hash ^= ReplayMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasAudioComSelection) {
        output.WriteRawTag(8);
        output.WriteInt32(AudioComSelection);
      }
      if (HasCom1Power) {
        output.WriteRawTag(16);
        output.WriteBool(Com1Power);
      }
      if (HasCom1Freq) {
        output.WriteRawTag(24);
        output.WriteInt32(Com1Freq);
      }
      if (HasCom1StbyFreq) {
        output.WriteRawTag(32);
        output.WriteInt32(Com1StbyFreq);
      }
      if (HasCom1AudioSelection) {
        output.WriteRawTag(40);
        output.WriteBool(Com1AudioSelection);
      }
      if (HasCom1Volume) {
        output.WriteRawTag(53);
        output.WriteFloat(Com1Volume);
      }
      if (HasCom2Power) {
        output.WriteRawTag(56);
        output.WriteBool(Com2Power);
      }
      if (HasCom2Freq) {
        output.WriteRawTag(64);
        output.WriteInt32(Com2Freq);
      }
      if (HasCom2StbyFreq) {
        output.WriteRawTag(72);
        output.WriteInt32(Com2StbyFreq);
      }
      if (HasCom2AudioSelection) {
        output.WriteRawTag(80);
        output.WriteBool(Com2AudioSelection);
      }
      if (HasCom2Volume) {
        output.WriteRawTag(93);
        output.WriteFloat(Com2Volume);
      }
      if (HasAvionicsPowerOn) {
        output.WriteRawTag(96);
        output.WriteBool(AvionicsPowerOn);
      }
      if (HasLatitude) {
        output.WriteRawTag(105);
        output.WriteDouble(Latitude);
      }
      if (HasLongitude) {
        output.WriteRawTag(113);
        output.WriteDouble(Longitude);
      }
      if (HasAltitude) {
        output.WriteRawTag(121);
        output.WriteDouble(Altitude);
      }
      if (HasPressureAltitude) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(PressureAltitude);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(GroundSpeed);
      }
      if (HasPitch) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(Pitch);
      }
      if (HasRoll) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Roll);
      }
      if (HasYaw) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Yaw);
      }
      if (HasTransponderCode) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(TransponderCode);
      }
      if (HasTransponderMode) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(TransponderMode);
      }
      if (HasTransponderIdent) {
        output.WriteRawTag(184, 1);
        output.WriteBool(TransponderIdent);
      }
      if (HasBeaconLightsOn) {
        output.WriteRawTag(192, 1);
        output.WriteBool(BeaconLightsOn);
      }
      if (HasLandingLightsOn) {
        output.WriteRawTag(200, 1);
        output.WriteBool(LandingLightsOn);
      }
      if (HasNavLightsOn) {
        output.WriteRawTag(208, 1);
        output.WriteBool(NavLightsOn);
      }
      if (HasStrobeLightsOn) {
        output.WriteRawTag(216, 1);
        output.WriteBool(StrobeLightsOn);
      }
      if (HasTaxiLightsOn) {
        output.WriteRawTag(224, 1);
        output.WriteBool(TaxiLightsOn);
      }
      if (HasFlaps) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(Flaps);
      }
      if (HasGearDown) {
        output.WriteRawTag(240, 1);
        output.WriteBool(GearDown);
      }
      if (HasSpeedBrakes) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(SpeedBrakes);
      }
      if (HasEngineCount) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(EngineCount);
      }
      if (HasEngine1Running) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Engine1Running);
      }
      if (HasEngine2Running) {
        output.WriteRawTag(144, 2);
        output.WriteBool(Engine2Running);
      }
      if (HasEngine3Running) {
        output.WriteRawTag(152, 2);
        output.WriteBool(Engine3Running);
      }
      if (HasEngine4Running) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Engine4Running);
      }
      if (HasOnGround) {
        output.WriteRawTag(168, 2);
        output.WriteBool(OnGround);
      }
      if (HasReplayMode) {
        output.WriteRawTag(176, 2);
        output.WriteBool(ReplayMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAudioComSelection) {
        output.WriteRawTag(8);
        output.WriteInt32(AudioComSelection);
      }
      if (HasCom1Power) {
        output.WriteRawTag(16);
        output.WriteBool(Com1Power);
      }
      if (HasCom1Freq) {
        output.WriteRawTag(24);
        output.WriteInt32(Com1Freq);
      }
      if (HasCom1StbyFreq) {
        output.WriteRawTag(32);
        output.WriteInt32(Com1StbyFreq);
      }
      if (HasCom1AudioSelection) {
        output.WriteRawTag(40);
        output.WriteBool(Com1AudioSelection);
      }
      if (HasCom1Volume) {
        output.WriteRawTag(53);
        output.WriteFloat(Com1Volume);
      }
      if (HasCom2Power) {
        output.WriteRawTag(56);
        output.WriteBool(Com2Power);
      }
      if (HasCom2Freq) {
        output.WriteRawTag(64);
        output.WriteInt32(Com2Freq);
      }
      if (HasCom2StbyFreq) {
        output.WriteRawTag(72);
        output.WriteInt32(Com2StbyFreq);
      }
      if (HasCom2AudioSelection) {
        output.WriteRawTag(80);
        output.WriteBool(Com2AudioSelection);
      }
      if (HasCom2Volume) {
        output.WriteRawTag(93);
        output.WriteFloat(Com2Volume);
      }
      if (HasAvionicsPowerOn) {
        output.WriteRawTag(96);
        output.WriteBool(AvionicsPowerOn);
      }
      if (HasLatitude) {
        output.WriteRawTag(105);
        output.WriteDouble(Latitude);
      }
      if (HasLongitude) {
        output.WriteRawTag(113);
        output.WriteDouble(Longitude);
      }
      if (HasAltitude) {
        output.WriteRawTag(121);
        output.WriteDouble(Altitude);
      }
      if (HasPressureAltitude) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(PressureAltitude);
      }
      if (HasGroundSpeed) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(GroundSpeed);
      }
      if (HasPitch) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(Pitch);
      }
      if (HasRoll) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(Roll);
      }
      if (HasYaw) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Yaw);
      }
      if (HasTransponderCode) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(TransponderCode);
      }
      if (HasTransponderMode) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(TransponderMode);
      }
      if (HasTransponderIdent) {
        output.WriteRawTag(184, 1);
        output.WriteBool(TransponderIdent);
      }
      if (HasBeaconLightsOn) {
        output.WriteRawTag(192, 1);
        output.WriteBool(BeaconLightsOn);
      }
      if (HasLandingLightsOn) {
        output.WriteRawTag(200, 1);
        output.WriteBool(LandingLightsOn);
      }
      if (HasNavLightsOn) {
        output.WriteRawTag(208, 1);
        output.WriteBool(NavLightsOn);
      }
      if (HasStrobeLightsOn) {
        output.WriteRawTag(216, 1);
        output.WriteBool(StrobeLightsOn);
      }
      if (HasTaxiLightsOn) {
        output.WriteRawTag(224, 1);
        output.WriteBool(TaxiLightsOn);
      }
      if (HasFlaps) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(Flaps);
      }
      if (HasGearDown) {
        output.WriteRawTag(240, 1);
        output.WriteBool(GearDown);
      }
      if (HasSpeedBrakes) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(SpeedBrakes);
      }
      if (HasEngineCount) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(EngineCount);
      }
      if (HasEngine1Running) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Engine1Running);
      }
      if (HasEngine2Running) {
        output.WriteRawTag(144, 2);
        output.WriteBool(Engine2Running);
      }
      if (HasEngine3Running) {
        output.WriteRawTag(152, 2);
        output.WriteBool(Engine3Running);
      }
      if (HasEngine4Running) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Engine4Running);
      }
      if (HasOnGround) {
        output.WriteRawTag(168, 2);
        output.WriteBool(OnGround);
      }
      if (HasReplayMode) {
        output.WriteRawTag(176, 2);
        output.WriteBool(ReplayMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasAudioComSelection) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AudioComSelection);
      }
      if (HasCom1Power) {
        size += 1 + 1;
      }
      if (HasCom1Freq) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Com1Freq);
      }
      if (HasCom1StbyFreq) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Com1StbyFreq);
      }
      if (HasCom1AudioSelection) {
        size += 1 + 1;
      }
      if (HasCom1Volume) {
        size += 1 + 4;
      }
      if (HasCom2Power) {
        size += 1 + 1;
      }
      if (HasCom2Freq) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Com2Freq);
      }
      if (HasCom2StbyFreq) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Com2StbyFreq);
      }
      if (HasCom2AudioSelection) {
        size += 1 + 1;
      }
      if (HasCom2Volume) {
        size += 1 + 4;
      }
      if (HasAvionicsPowerOn) {
        size += 1 + 1;
      }
      if (HasLatitude) {
        size += 1 + 8;
      }
      if (HasLongitude) {
        size += 1 + 8;
      }
      if (HasAltitude) {
        size += 1 + 8;
      }
      if (HasPressureAltitude) {
        size += 2 + 8;
      }
      if (HasGroundSpeed) {
        size += 2 + 8;
      }
      if (HasPitch) {
        size += 2 + 8;
      }
      if (HasRoll) {
        size += 2 + 8;
      }
      if (HasYaw) {
        size += 2 + 8;
      }
      if (HasTransponderCode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransponderCode);
      }
      if (HasTransponderMode) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransponderMode);
      }
      if (HasTransponderIdent) {
        size += 2 + 1;
      }
      if (HasBeaconLightsOn) {
        size += 2 + 1;
      }
      if (HasLandingLightsOn) {
        size += 2 + 1;
      }
      if (HasNavLightsOn) {
        size += 2 + 1;
      }
      if (HasStrobeLightsOn) {
        size += 2 + 1;
      }
      if (HasTaxiLightsOn) {
        size += 2 + 1;
      }
      if (HasFlaps) {
        size += 2 + 8;
      }
      if (HasGearDown) {
        size += 2 + 1;
      }
      if (HasSpeedBrakes) {
        size += 2 + 8;
      }
      if (HasEngineCount) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EngineCount);
      }
      if (HasEngine1Running) {
        size += 2 + 1;
      }
      if (HasEngine2Running) {
        size += 2 + 1;
      }
      if (HasEngine3Running) {
        size += 2 + 1;
      }
      if (HasEngine4Running) {
        size += 2 + 1;
      }
      if (HasOnGround) {
        size += 2 + 1;
      }
      if (HasReplayMode) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XplaneData other) {
      if (other == null) {
        return;
      }
      if (other.HasAudioComSelection) {
        AudioComSelection = other.AudioComSelection;
      }
      if (other.HasCom1Power) {
        Com1Power = other.Com1Power;
      }
      if (other.HasCom1Freq) {
        Com1Freq = other.Com1Freq;
      }
      if (other.HasCom1StbyFreq) {
        Com1StbyFreq = other.Com1StbyFreq;
      }
      if (other.HasCom1AudioSelection) {
        Com1AudioSelection = other.Com1AudioSelection;
      }
      if (other.HasCom1Volume) {
        Com1Volume = other.Com1Volume;
      }
      if (other.HasCom2Power) {
        Com2Power = other.Com2Power;
      }
      if (other.HasCom2Freq) {
        Com2Freq = other.Com2Freq;
      }
      if (other.HasCom2StbyFreq) {
        Com2StbyFreq = other.Com2StbyFreq;
      }
      if (other.HasCom2AudioSelection) {
        Com2AudioSelection = other.Com2AudioSelection;
      }
      if (other.HasCom2Volume) {
        Com2Volume = other.Com2Volume;
      }
      if (other.HasAvionicsPowerOn) {
        AvionicsPowerOn = other.AvionicsPowerOn;
      }
      if (other.HasLatitude) {
        Latitude = other.Latitude;
      }
      if (other.HasLongitude) {
        Longitude = other.Longitude;
      }
      if (other.HasAltitude) {
        Altitude = other.Altitude;
      }
      if (other.HasPressureAltitude) {
        PressureAltitude = other.PressureAltitude;
      }
      if (other.HasGroundSpeed) {
        GroundSpeed = other.GroundSpeed;
      }
      if (other.HasPitch) {
        Pitch = other.Pitch;
      }
      if (other.HasRoll) {
        Roll = other.Roll;
      }
      if (other.HasYaw) {
        Yaw = other.Yaw;
      }
      if (other.HasTransponderCode) {
        TransponderCode = other.TransponderCode;
      }
      if (other.HasTransponderMode) {
        TransponderMode = other.TransponderMode;
      }
      if (other.HasTransponderIdent) {
        TransponderIdent = other.TransponderIdent;
      }
      if (other.HasBeaconLightsOn) {
        BeaconLightsOn = other.BeaconLightsOn;
      }
      if (other.HasLandingLightsOn) {
        LandingLightsOn = other.LandingLightsOn;
      }
      if (other.HasNavLightsOn) {
        NavLightsOn = other.NavLightsOn;
      }
      if (other.HasStrobeLightsOn) {
        StrobeLightsOn = other.StrobeLightsOn;
      }
      if (other.HasTaxiLightsOn) {
        TaxiLightsOn = other.TaxiLightsOn;
      }
      if (other.HasFlaps) {
        Flaps = other.Flaps;
      }
      if (other.HasGearDown) {
        GearDown = other.GearDown;
      }
      if (other.HasSpeedBrakes) {
        SpeedBrakes = other.SpeedBrakes;
      }
      if (other.HasEngineCount) {
        EngineCount = other.EngineCount;
      }
      if (other.HasEngine1Running) {
        Engine1Running = other.Engine1Running;
      }
      if (other.HasEngine2Running) {
        Engine2Running = other.Engine2Running;
      }
      if (other.HasEngine3Running) {
        Engine3Running = other.Engine3Running;
      }
      if (other.HasEngine4Running) {
        Engine4Running = other.Engine4Running;
      }
      if (other.HasOnGround) {
        OnGround = other.OnGround;
      }
      if (other.HasReplayMode) {
        ReplayMode = other.ReplayMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AudioComSelection = input.ReadInt32();
            break;
          }
          case 16: {
            Com1Power = input.ReadBool();
            break;
          }
          case 24: {
            Com1Freq = input.ReadInt32();
            break;
          }
          case 32: {
            Com1StbyFreq = input.ReadInt32();
            break;
          }
          case 40: {
            Com1AudioSelection = input.ReadBool();
            break;
          }
          case 53: {
            Com1Volume = input.ReadFloat();
            break;
          }
          case 56: {
            Com2Power = input.ReadBool();
            break;
          }
          case 64: {
            Com2Freq = input.ReadInt32();
            break;
          }
          case 72: {
            Com2StbyFreq = input.ReadInt32();
            break;
          }
          case 80: {
            Com2AudioSelection = input.ReadBool();
            break;
          }
          case 93: {
            Com2Volume = input.ReadFloat();
            break;
          }
          case 96: {
            AvionicsPowerOn = input.ReadBool();
            break;
          }
          case 105: {
            Latitude = input.ReadDouble();
            break;
          }
          case 113: {
            Longitude = input.ReadDouble();
            break;
          }
          case 121: {
            Altitude = input.ReadDouble();
            break;
          }
          case 129: {
            PressureAltitude = input.ReadDouble();
            break;
          }
          case 137: {
            GroundSpeed = input.ReadDouble();
            break;
          }
          case 145: {
            Pitch = input.ReadDouble();
            break;
          }
          case 153: {
            Roll = input.ReadDouble();
            break;
          }
          case 161: {
            Yaw = input.ReadDouble();
            break;
          }
          case 168: {
            TransponderCode = input.ReadInt32();
            break;
          }
          case 176: {
            TransponderMode = input.ReadInt32();
            break;
          }
          case 184: {
            TransponderIdent = input.ReadBool();
            break;
          }
          case 192: {
            BeaconLightsOn = input.ReadBool();
            break;
          }
          case 200: {
            LandingLightsOn = input.ReadBool();
            break;
          }
          case 208: {
            NavLightsOn = input.ReadBool();
            break;
          }
          case 216: {
            StrobeLightsOn = input.ReadBool();
            break;
          }
          case 224: {
            TaxiLightsOn = input.ReadBool();
            break;
          }
          case 233: {
            Flaps = input.ReadDouble();
            break;
          }
          case 240: {
            GearDown = input.ReadBool();
            break;
          }
          case 249: {
            SpeedBrakes = input.ReadDouble();
            break;
          }
          case 256: {
            EngineCount = input.ReadInt32();
            break;
          }
          case 264: {
            Engine1Running = input.ReadBool();
            break;
          }
          case 272: {
            Engine2Running = input.ReadBool();
            break;
          }
          case 280: {
            Engine3Running = input.ReadBool();
            break;
          }
          case 288: {
            Engine4Running = input.ReadBool();
            break;
          }
          case 296: {
            OnGround = input.ReadBool();
            break;
          }
          case 304: {
            ReplayMode = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AudioComSelection = input.ReadInt32();
            break;
          }
          case 16: {
            Com1Power = input.ReadBool();
            break;
          }
          case 24: {
            Com1Freq = input.ReadInt32();
            break;
          }
          case 32: {
            Com1StbyFreq = input.ReadInt32();
            break;
          }
          case 40: {
            Com1AudioSelection = input.ReadBool();
            break;
          }
          case 53: {
            Com1Volume = input.ReadFloat();
            break;
          }
          case 56: {
            Com2Power = input.ReadBool();
            break;
          }
          case 64: {
            Com2Freq = input.ReadInt32();
            break;
          }
          case 72: {
            Com2StbyFreq = input.ReadInt32();
            break;
          }
          case 80: {
            Com2AudioSelection = input.ReadBool();
            break;
          }
          case 93: {
            Com2Volume = input.ReadFloat();
            break;
          }
          case 96: {
            AvionicsPowerOn = input.ReadBool();
            break;
          }
          case 105: {
            Latitude = input.ReadDouble();
            break;
          }
          case 113: {
            Longitude = input.ReadDouble();
            break;
          }
          case 121: {
            Altitude = input.ReadDouble();
            break;
          }
          case 129: {
            PressureAltitude = input.ReadDouble();
            break;
          }
          case 137: {
            GroundSpeed = input.ReadDouble();
            break;
          }
          case 145: {
            Pitch = input.ReadDouble();
            break;
          }
          case 153: {
            Roll = input.ReadDouble();
            break;
          }
          case 161: {
            Yaw = input.ReadDouble();
            break;
          }
          case 168: {
            TransponderCode = input.ReadInt32();
            break;
          }
          case 176: {
            TransponderMode = input.ReadInt32();
            break;
          }
          case 184: {
            TransponderIdent = input.ReadBool();
            break;
          }
          case 192: {
            BeaconLightsOn = input.ReadBool();
            break;
          }
          case 200: {
            LandingLightsOn = input.ReadBool();
            break;
          }
          case 208: {
            NavLightsOn = input.ReadBool();
            break;
          }
          case 216: {
            StrobeLightsOn = input.ReadBool();
            break;
          }
          case 224: {
            TaxiLightsOn = input.ReadBool();
            break;
          }
          case 233: {
            Flaps = input.ReadDouble();
            break;
          }
          case 240: {
            GearDown = input.ReadBool();
            break;
          }
          case 249: {
            SpeedBrakes = input.ReadDouble();
            break;
          }
          case 256: {
            EngineCount = input.ReadInt32();
            break;
          }
          case 264: {
            Engine1Running = input.ReadBool();
            break;
          }
          case 272: {
            Engine2Running = input.ReadBool();
            break;
          }
          case 280: {
            Engine3Running = input.ReadBool();
            break;
          }
          case 288: {
            Engine4Running = input.ReadBool();
            break;
          }
          case 296: {
            OnGround = input.ReadBool();
            break;
          }
          case 304: {
            ReplayMode = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
