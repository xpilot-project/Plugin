// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlightPlanReceived.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FlightPlanReceived_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FlightPlanReceived_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "FlightPlan.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FlightPlanReceived_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FlightPlanReceived_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FlightPlanReceived_2eproto;
namespace xpilot {
class FlightPlanReceived;
struct FlightPlanReceivedDefaultTypeInternal;
extern FlightPlanReceivedDefaultTypeInternal _FlightPlanReceived_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::FlightPlanReceived* Arena::CreateMaybeMessage<::xpilot::FlightPlanReceived>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class FlightPlanReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.FlightPlanReceived) */ {
 public:
  inline FlightPlanReceived() : FlightPlanReceived(nullptr) {}
  ~FlightPlanReceived() override;
  explicit constexpr FlightPlanReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlightPlanReceived(const FlightPlanReceived& from);
  FlightPlanReceived(FlightPlanReceived&& from) noexcept
    : FlightPlanReceived() {
    *this = ::std::move(from);
  }

  inline FlightPlanReceived& operator=(const FlightPlanReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlightPlanReceived& operator=(FlightPlanReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlightPlanReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlightPlanReceived* internal_default_instance() {
    return reinterpret_cast<const FlightPlanReceived*>(
               &_FlightPlanReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlightPlanReceived& a, FlightPlanReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(FlightPlanReceived* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlightPlanReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlightPlanReceived* New() const final {
    return new FlightPlanReceived();
  }

  FlightPlanReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlightPlanReceived>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlightPlanReceived& from);
  void MergeFrom(const FlightPlanReceived& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlightPlanReceived* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.FlightPlanReceived";
  }
  protected:
  explicit FlightPlanReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlightPlanFieldNumber = 1,
  };
  // optional .xpilot.FlightPlan flight_plan = 1;
  bool has_flight_plan() const;
  private:
  bool _internal_has_flight_plan() const;
  public:
  void clear_flight_plan();
  const ::xpilot::FlightPlan& flight_plan() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::xpilot::FlightPlan* release_flight_plan();
  ::xpilot::FlightPlan* mutable_flight_plan();
  void set_allocated_flight_plan(::xpilot::FlightPlan* flight_plan);
  private:
  const ::xpilot::FlightPlan& _internal_flight_plan() const;
  ::xpilot::FlightPlan* _internal_mutable_flight_plan();
  public:
  void unsafe_arena_set_allocated_flight_plan(
      ::xpilot::FlightPlan* flight_plan);
  ::xpilot::FlightPlan* unsafe_arena_release_flight_plan();

  // @@protoc_insertion_point(class_scope:xpilot.FlightPlanReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::xpilot::FlightPlan* flight_plan_;
  friend struct ::TableStruct_FlightPlanReceived_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlightPlanReceived

// optional .xpilot.FlightPlan flight_plan = 1;
inline bool FlightPlanReceived::_internal_has_flight_plan() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || flight_plan_ != nullptr);
  return value;
}
inline bool FlightPlanReceived::has_flight_plan() const {
  return _internal_has_flight_plan();
}
inline const ::xpilot::FlightPlan& FlightPlanReceived::_internal_flight_plan() const {
  const ::xpilot::FlightPlan* p = flight_plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::xpilot::FlightPlan&>(
      ::xpilot::_FlightPlan_default_instance_);
}
inline const ::xpilot::FlightPlan& FlightPlanReceived::flight_plan() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlanReceived.flight_plan)
  return _internal_flight_plan();
}
inline void FlightPlanReceived::unsafe_arena_set_allocated_flight_plan(
    ::xpilot::FlightPlan* flight_plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flight_plan_);
  }
  flight_plan_ = flight_plan;
  if (flight_plan) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.FlightPlanReceived.flight_plan)
}
inline ::xpilot::FlightPlan* FlightPlanReceived::release_flight_plan() {
  _has_bits_[0] &= ~0x00000001u;
  ::xpilot::FlightPlan* temp = flight_plan_;
  flight_plan_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::FlightPlan* FlightPlanReceived::unsafe_arena_release_flight_plan() {
  // @@protoc_insertion_point(field_release:xpilot.FlightPlanReceived.flight_plan)
  _has_bits_[0] &= ~0x00000001u;
  ::xpilot::FlightPlan* temp = flight_plan_;
  flight_plan_ = nullptr;
  return temp;
}
inline ::xpilot::FlightPlan* FlightPlanReceived::_internal_mutable_flight_plan() {
  _has_bits_[0] |= 0x00000001u;
  if (flight_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::FlightPlan>(GetArenaForAllocation());
    flight_plan_ = p;
  }
  return flight_plan_;
}
inline ::xpilot::FlightPlan* FlightPlanReceived::mutable_flight_plan() {
  // @@protoc_insertion_point(field_mutable:xpilot.FlightPlanReceived.flight_plan)
  return _internal_mutable_flight_plan();
}
inline void FlightPlanReceived::set_allocated_flight_plan(::xpilot::FlightPlan* flight_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flight_plan_);
  }
  if (flight_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flight_plan));
    if (message_arena != submessage_arena) {
      flight_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flight_plan, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  flight_plan_ = flight_plan;
  // @@protoc_insertion_point(field_set_allocated:xpilot.FlightPlanReceived.flight_plan)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FlightPlanReceived_2eproto
