// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlightPlan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FlightPlan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FlightPlan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FlightPlan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FlightPlan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FlightPlan_2eproto;
namespace xpilot {
class FlightPlan;
struct FlightPlanDefaultTypeInternal;
extern FlightPlanDefaultTypeInternal _FlightPlan_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::FlightPlan* Arena::CreateMaybeMessage<::xpilot::FlightPlan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

enum FlightPlan_VoiceType : int {
  FlightPlan_VoiceType_UNKNOWN = 0,
  FlightPlan_VoiceType_VOICE = 1,
  FlightPlan_VoiceType_RECEIVE = 2,
  FlightPlan_VoiceType_TEXT = 3,
  FlightPlan_VoiceType_FlightPlan_VoiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FlightPlan_VoiceType_FlightPlan_VoiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlightPlan_VoiceType_IsValid(int value);
constexpr FlightPlan_VoiceType FlightPlan_VoiceType_VoiceType_MIN = FlightPlan_VoiceType_UNKNOWN;
constexpr FlightPlan_VoiceType FlightPlan_VoiceType_VoiceType_MAX = FlightPlan_VoiceType_TEXT;
constexpr int FlightPlan_VoiceType_VoiceType_ARRAYSIZE = FlightPlan_VoiceType_VoiceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightPlan_VoiceType_descriptor();
template<typename T>
inline const std::string& FlightPlan_VoiceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlightPlan_VoiceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlightPlan_VoiceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlightPlan_VoiceType_descriptor(), enum_t_value);
}
inline bool FlightPlan_VoiceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlightPlan_VoiceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlightPlan_VoiceType>(
    FlightPlan_VoiceType_descriptor(), name, value);
}
// ===================================================================

class FlightPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.FlightPlan) */ {
 public:
  inline FlightPlan() : FlightPlan(nullptr) {}
  ~FlightPlan() override;
  explicit constexpr FlightPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlightPlan(const FlightPlan& from);
  FlightPlan(FlightPlan&& from) noexcept
    : FlightPlan() {
    *this = ::std::move(from);
  }

  inline FlightPlan& operator=(const FlightPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlightPlan& operator=(FlightPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlightPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlightPlan* internal_default_instance() {
    return reinterpret_cast<const FlightPlan*>(
               &_FlightPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlightPlan& a, FlightPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(FlightPlan* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlightPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlightPlan* New() const final {
    return new FlightPlan();
  }

  FlightPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlightPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlightPlan& from);
  void MergeFrom(const FlightPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlightPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.FlightPlan";
  }
  protected:
  explicit FlightPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlightPlan_VoiceType VoiceType;
  static constexpr VoiceType UNKNOWN =
    FlightPlan_VoiceType_UNKNOWN;
  static constexpr VoiceType VOICE =
    FlightPlan_VoiceType_VOICE;
  static constexpr VoiceType RECEIVE =
    FlightPlan_VoiceType_RECEIVE;
  static constexpr VoiceType TEXT =
    FlightPlan_VoiceType_TEXT;
  static inline bool VoiceType_IsValid(int value) {
    return FlightPlan_VoiceType_IsValid(value);
  }
  static constexpr VoiceType VoiceType_MIN =
    FlightPlan_VoiceType_VoiceType_MIN;
  static constexpr VoiceType VoiceType_MAX =
    FlightPlan_VoiceType_VoiceType_MAX;
  static constexpr int VoiceType_ARRAYSIZE =
    FlightPlan_VoiceType_VoiceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VoiceType_descriptor() {
    return FlightPlan_VoiceType_descriptor();
  }
  template<typename T>
  static inline const std::string& VoiceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VoiceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VoiceType_Name.");
    return FlightPlan_VoiceType_Name(enum_t_value);
  }
  static inline bool VoiceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VoiceType* value) {
    return FlightPlan_VoiceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFlightRulesFieldNumber = 1,
    kDepartureAirportFieldNumber = 2,
    kDestinationAirportFieldNumber = 3,
    kAlternateAirportFieldNumber = 4,
    kRouteFieldNumber = 12,
    kRemarksFieldNumber = 13,
    kEquipmentSuffixFieldNumber = 14,
    kDepartureTimeFieldNumber = 5,
    kEnrouteHoursFieldNumber = 6,
    kEnrouteMinutesFieldNumber = 7,
    kFuelHoursFieldNumber = 8,
    kFuelMinutesFieldNumber = 9,
    kCruiseSpeedFieldNumber = 10,
    kCruiseAltitudeFieldNumber = 11,
    kVoiceTypeFieldNumber = 15,
    kIsHeavyFieldNumber = 16,
  };
  // optional string flight_rules = 1;
  bool has_flight_rules() const;
  private:
  bool _internal_has_flight_rules() const;
  public:
  void clear_flight_rules();
  const std::string& flight_rules() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_flight_rules(ArgT0&& arg0, ArgT... args);
  std::string* mutable_flight_rules();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_flight_rules();
  void set_allocated_flight_rules(std::string* flight_rules);
  private:
  const std::string& _internal_flight_rules() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_flight_rules(const std::string& value);
  std::string* _internal_mutable_flight_rules();
  public:

  // optional string departure_airport = 2;
  bool has_departure_airport() const;
  private:
  bool _internal_has_departure_airport() const;
  public:
  void clear_departure_airport();
  const std::string& departure_airport() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_departure_airport(ArgT0&& arg0, ArgT... args);
  std::string* mutable_departure_airport();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_departure_airport();
  void set_allocated_departure_airport(std::string* departure_airport);
  private:
  const std::string& _internal_departure_airport() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departure_airport(const std::string& value);
  std::string* _internal_mutable_departure_airport();
  public:

  // optional string destination_airport = 3;
  bool has_destination_airport() const;
  private:
  bool _internal_has_destination_airport() const;
  public:
  void clear_destination_airport();
  const std::string& destination_airport() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_airport(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_airport();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_destination_airport();
  void set_allocated_destination_airport(std::string* destination_airport);
  private:
  const std::string& _internal_destination_airport() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_airport(const std::string& value);
  std::string* _internal_mutable_destination_airport();
  public:

  // optional string alternate_airport = 4;
  bool has_alternate_airport() const;
  private:
  bool _internal_has_alternate_airport() const;
  public:
  void clear_alternate_airport();
  const std::string& alternate_airport() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alternate_airport(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alternate_airport();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_alternate_airport();
  void set_allocated_alternate_airport(std::string* alternate_airport);
  private:
  const std::string& _internal_alternate_airport() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alternate_airport(const std::string& value);
  std::string* _internal_mutable_alternate_airport();
  public:

  // optional string route = 12;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const std::string& route() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // optional string remarks = 13;
  bool has_remarks() const;
  private:
  bool _internal_has_remarks() const;
  public:
  void clear_remarks();
  const std::string& remarks() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remarks(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remarks();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_remarks();
  void set_allocated_remarks(std::string* remarks);
  private:
  const std::string& _internal_remarks() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remarks(const std::string& value);
  std::string* _internal_mutable_remarks();
  public:

  // optional string equipment_suffix = 14;
  bool has_equipment_suffix() const;
  private:
  bool _internal_has_equipment_suffix() const;
  public:
  void clear_equipment_suffix();
  const std::string& equipment_suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_equipment_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_equipment_suffix();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_equipment_suffix();
  void set_allocated_equipment_suffix(std::string* equipment_suffix);
  private:
  const std::string& _internal_equipment_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_equipment_suffix(const std::string& value);
  std::string* _internal_mutable_equipment_suffix();
  public:

  // optional int32 departure_time = 5;
  bool has_departure_time() const;
  private:
  bool _internal_has_departure_time() const;
  public:
  void clear_departure_time();
  ::PROTOBUF_NAMESPACE_ID::int32 departure_time() const;
  void set_departure_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_departure_time() const;
  void _internal_set_departure_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 enroute_hours = 6;
  bool has_enroute_hours() const;
  private:
  bool _internal_has_enroute_hours() const;
  public:
  void clear_enroute_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 enroute_hours() const;
  void set_enroute_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enroute_hours() const;
  void _internal_set_enroute_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 enroute_minutes = 7;
  bool has_enroute_minutes() const;
  private:
  bool _internal_has_enroute_minutes() const;
  public:
  void clear_enroute_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 enroute_minutes() const;
  void set_enroute_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enroute_minutes() const;
  void _internal_set_enroute_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fuel_hours = 8;
  bool has_fuel_hours() const;
  private:
  bool _internal_has_fuel_hours() const;
  public:
  void clear_fuel_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_hours() const;
  void set_fuel_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fuel_hours() const;
  void _internal_set_fuel_hours(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 fuel_minutes = 9;
  bool has_fuel_minutes() const;
  private:
  bool _internal_has_fuel_minutes() const;
  public:
  void clear_fuel_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_minutes() const;
  void set_fuel_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fuel_minutes() const;
  void _internal_set_fuel_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cruise_speed = 10;
  bool has_cruise_speed() const;
  private:
  bool _internal_has_cruise_speed() const;
  public:
  void clear_cruise_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 cruise_speed() const;
  void set_cruise_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cruise_speed() const;
  void _internal_set_cruise_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 cruise_altitude = 11;
  bool has_cruise_altitude() const;
  private:
  bool _internal_has_cruise_altitude() const;
  public:
  void clear_cruise_altitude();
  ::PROTOBUF_NAMESPACE_ID::int32 cruise_altitude() const;
  void set_cruise_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cruise_altitude() const;
  void _internal_set_cruise_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .xpilot.FlightPlan.VoiceType voice_type = 15;
  bool has_voice_type() const;
  private:
  bool _internal_has_voice_type() const;
  public:
  void clear_voice_type();
  ::xpilot::FlightPlan_VoiceType voice_type() const;
  void set_voice_type(::xpilot::FlightPlan_VoiceType value);
  private:
  ::xpilot::FlightPlan_VoiceType _internal_voice_type() const;
  void _internal_set_voice_type(::xpilot::FlightPlan_VoiceType value);
  public:

  // optional bool is_heavy = 16;
  bool has_is_heavy() const;
  private:
  bool _internal_has_is_heavy() const;
  public:
  void clear_is_heavy();
  bool is_heavy() const;
  void set_is_heavy(bool value);
  private:
  bool _internal_is_heavy() const;
  void _internal_set_is_heavy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.FlightPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flight_rules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departure_airport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_airport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alternate_airport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remarks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipment_suffix_;
  ::PROTOBUF_NAMESPACE_ID::int32 departure_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 enroute_hours_;
  ::PROTOBUF_NAMESPACE_ID::int32 enroute_minutes_;
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_hours_;
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_minutes_;
  ::PROTOBUF_NAMESPACE_ID::int32 cruise_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 cruise_altitude_;
  int voice_type_;
  bool is_heavy_;
  friend struct ::TableStruct_FlightPlan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlightPlan

// optional string flight_rules = 1;
inline bool FlightPlan::_internal_has_flight_rules() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FlightPlan::has_flight_rules() const {
  return _internal_has_flight_rules();
}
inline void FlightPlan::clear_flight_rules() {
  flight_rules_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FlightPlan::flight_rules() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.flight_rules)
  return _internal_flight_rules();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightPlan::set_flight_rules(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 flight_rules_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.flight_rules)
}
inline std::string* FlightPlan::mutable_flight_rules() {
  // @@protoc_insertion_point(field_mutable:xpilot.FlightPlan.flight_rules)
  return _internal_mutable_flight_rules();
}
inline const std::string& FlightPlan::_internal_flight_rules() const {
  return flight_rules_.Get();
}
inline void FlightPlan::_internal_set_flight_rules(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  flight_rules_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlightPlan::_internal_mutable_flight_rules() {
  _has_bits_[0] |= 0x00000001u;
  return flight_rules_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlightPlan::release_flight_rules() {
  // @@protoc_insertion_point(field_release:xpilot.FlightPlan.flight_rules)
  if (!_internal_has_flight_rules()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return flight_rules_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlightPlan::set_allocated_flight_rules(std::string* flight_rules) {
  if (flight_rules != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  flight_rules_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flight_rules,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.FlightPlan.flight_rules)
}

// optional string departure_airport = 2;
inline bool FlightPlan::_internal_has_departure_airport() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FlightPlan::has_departure_airport() const {
  return _internal_has_departure_airport();
}
inline void FlightPlan::clear_departure_airport() {
  departure_airport_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FlightPlan::departure_airport() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.departure_airport)
  return _internal_departure_airport();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightPlan::set_departure_airport(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 departure_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.departure_airport)
}
inline std::string* FlightPlan::mutable_departure_airport() {
  // @@protoc_insertion_point(field_mutable:xpilot.FlightPlan.departure_airport)
  return _internal_mutable_departure_airport();
}
inline const std::string& FlightPlan::_internal_departure_airport() const {
  return departure_airport_.Get();
}
inline void FlightPlan::_internal_set_departure_airport(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  departure_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlightPlan::_internal_mutable_departure_airport() {
  _has_bits_[0] |= 0x00000002u;
  return departure_airport_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlightPlan::release_departure_airport() {
  // @@protoc_insertion_point(field_release:xpilot.FlightPlan.departure_airport)
  if (!_internal_has_departure_airport()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return departure_airport_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlightPlan::set_allocated_departure_airport(std::string* departure_airport) {
  if (departure_airport != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  departure_airport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departure_airport,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.FlightPlan.departure_airport)
}

// optional string destination_airport = 3;
inline bool FlightPlan::_internal_has_destination_airport() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FlightPlan::has_destination_airport() const {
  return _internal_has_destination_airport();
}
inline void FlightPlan::clear_destination_airport() {
  destination_airport_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FlightPlan::destination_airport() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.destination_airport)
  return _internal_destination_airport();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightPlan::set_destination_airport(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 destination_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.destination_airport)
}
inline std::string* FlightPlan::mutable_destination_airport() {
  // @@protoc_insertion_point(field_mutable:xpilot.FlightPlan.destination_airport)
  return _internal_mutable_destination_airport();
}
inline const std::string& FlightPlan::_internal_destination_airport() const {
  return destination_airport_.Get();
}
inline void FlightPlan::_internal_set_destination_airport(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  destination_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlightPlan::_internal_mutable_destination_airport() {
  _has_bits_[0] |= 0x00000004u;
  return destination_airport_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlightPlan::release_destination_airport() {
  // @@protoc_insertion_point(field_release:xpilot.FlightPlan.destination_airport)
  if (!_internal_has_destination_airport()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return destination_airport_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlightPlan::set_allocated_destination_airport(std::string* destination_airport) {
  if (destination_airport != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  destination_airport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination_airport,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.FlightPlan.destination_airport)
}

// optional string alternate_airport = 4;
inline bool FlightPlan::_internal_has_alternate_airport() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FlightPlan::has_alternate_airport() const {
  return _internal_has_alternate_airport();
}
inline void FlightPlan::clear_alternate_airport() {
  alternate_airport_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FlightPlan::alternate_airport() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.alternate_airport)
  return _internal_alternate_airport();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightPlan::set_alternate_airport(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 alternate_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.alternate_airport)
}
inline std::string* FlightPlan::mutable_alternate_airport() {
  // @@protoc_insertion_point(field_mutable:xpilot.FlightPlan.alternate_airport)
  return _internal_mutable_alternate_airport();
}
inline const std::string& FlightPlan::_internal_alternate_airport() const {
  return alternate_airport_.Get();
}
inline void FlightPlan::_internal_set_alternate_airport(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  alternate_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlightPlan::_internal_mutable_alternate_airport() {
  _has_bits_[0] |= 0x00000008u;
  return alternate_airport_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlightPlan::release_alternate_airport() {
  // @@protoc_insertion_point(field_release:xpilot.FlightPlan.alternate_airport)
  if (!_internal_has_alternate_airport()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return alternate_airport_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlightPlan::set_allocated_alternate_airport(std::string* alternate_airport) {
  if (alternate_airport != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  alternate_airport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alternate_airport,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.FlightPlan.alternate_airport)
}

// optional int32 departure_time = 5;
inline bool FlightPlan::_internal_has_departure_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FlightPlan::has_departure_time() const {
  return _internal_has_departure_time();
}
inline void FlightPlan::clear_departure_time() {
  departure_time_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::_internal_departure_time() const {
  return departure_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::departure_time() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.departure_time)
  return _internal_departure_time();
}
inline void FlightPlan::_internal_set_departure_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  departure_time_ = value;
}
inline void FlightPlan::set_departure_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_departure_time(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.departure_time)
}

// optional int32 enroute_hours = 6;
inline bool FlightPlan::_internal_has_enroute_hours() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool FlightPlan::has_enroute_hours() const {
  return _internal_has_enroute_hours();
}
inline void FlightPlan::clear_enroute_hours() {
  enroute_hours_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::_internal_enroute_hours() const {
  return enroute_hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::enroute_hours() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.enroute_hours)
  return _internal_enroute_hours();
}
inline void FlightPlan::_internal_set_enroute_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  enroute_hours_ = value;
}
inline void FlightPlan::set_enroute_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enroute_hours(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.enroute_hours)
}

// optional int32 enroute_minutes = 7;
inline bool FlightPlan::_internal_has_enroute_minutes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool FlightPlan::has_enroute_minutes() const {
  return _internal_has_enroute_minutes();
}
inline void FlightPlan::clear_enroute_minutes() {
  enroute_minutes_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::_internal_enroute_minutes() const {
  return enroute_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::enroute_minutes() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.enroute_minutes)
  return _internal_enroute_minutes();
}
inline void FlightPlan::_internal_set_enroute_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  enroute_minutes_ = value;
}
inline void FlightPlan::set_enroute_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enroute_minutes(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.enroute_minutes)
}

// optional int32 fuel_hours = 8;
inline bool FlightPlan::_internal_has_fuel_hours() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool FlightPlan::has_fuel_hours() const {
  return _internal_has_fuel_hours();
}
inline void FlightPlan::clear_fuel_hours() {
  fuel_hours_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::_internal_fuel_hours() const {
  return fuel_hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::fuel_hours() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.fuel_hours)
  return _internal_fuel_hours();
}
inline void FlightPlan::_internal_set_fuel_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  fuel_hours_ = value;
}
inline void FlightPlan::set_fuel_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fuel_hours(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.fuel_hours)
}

// optional int32 fuel_minutes = 9;
inline bool FlightPlan::_internal_has_fuel_minutes() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool FlightPlan::has_fuel_minutes() const {
  return _internal_has_fuel_minutes();
}
inline void FlightPlan::clear_fuel_minutes() {
  fuel_minutes_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::_internal_fuel_minutes() const {
  return fuel_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::fuel_minutes() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.fuel_minutes)
  return _internal_fuel_minutes();
}
inline void FlightPlan::_internal_set_fuel_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  fuel_minutes_ = value;
}
inline void FlightPlan::set_fuel_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fuel_minutes(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.fuel_minutes)
}

// optional int32 cruise_speed = 10;
inline bool FlightPlan::_internal_has_cruise_speed() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool FlightPlan::has_cruise_speed() const {
  return _internal_has_cruise_speed();
}
inline void FlightPlan::clear_cruise_speed() {
  cruise_speed_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::_internal_cruise_speed() const {
  return cruise_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::cruise_speed() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.cruise_speed)
  return _internal_cruise_speed();
}
inline void FlightPlan::_internal_set_cruise_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  cruise_speed_ = value;
}
inline void FlightPlan::set_cruise_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cruise_speed(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.cruise_speed)
}

// optional int32 cruise_altitude = 11;
inline bool FlightPlan::_internal_has_cruise_altitude() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool FlightPlan::has_cruise_altitude() const {
  return _internal_has_cruise_altitude();
}
inline void FlightPlan::clear_cruise_altitude() {
  cruise_altitude_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::_internal_cruise_altitude() const {
  return cruise_altitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlightPlan::cruise_altitude() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.cruise_altitude)
  return _internal_cruise_altitude();
}
inline void FlightPlan::_internal_set_cruise_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  cruise_altitude_ = value;
}
inline void FlightPlan::set_cruise_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cruise_altitude(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.cruise_altitude)
}

// optional string route = 12;
inline bool FlightPlan::_internal_has_route() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FlightPlan::has_route() const {
  return _internal_has_route();
}
inline void FlightPlan::clear_route() {
  route_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& FlightPlan::route() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.route)
  return _internal_route();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightPlan::set_route(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.route)
}
inline std::string* FlightPlan::mutable_route() {
  // @@protoc_insertion_point(field_mutable:xpilot.FlightPlan.route)
  return _internal_mutable_route();
}
inline const std::string& FlightPlan::_internal_route() const {
  return route_.Get();
}
inline void FlightPlan::_internal_set_route(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  route_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlightPlan::_internal_mutable_route() {
  _has_bits_[0] |= 0x00000010u;
  return route_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlightPlan::release_route() {
  // @@protoc_insertion_point(field_release:xpilot.FlightPlan.route)
  if (!_internal_has_route()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return route_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlightPlan::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  route_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.FlightPlan.route)
}

// optional string remarks = 13;
inline bool FlightPlan::_internal_has_remarks() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FlightPlan::has_remarks() const {
  return _internal_has_remarks();
}
inline void FlightPlan::clear_remarks() {
  remarks_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& FlightPlan::remarks() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.remarks)
  return _internal_remarks();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightPlan::set_remarks(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 remarks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.remarks)
}
inline std::string* FlightPlan::mutable_remarks() {
  // @@protoc_insertion_point(field_mutable:xpilot.FlightPlan.remarks)
  return _internal_mutable_remarks();
}
inline const std::string& FlightPlan::_internal_remarks() const {
  return remarks_.Get();
}
inline void FlightPlan::_internal_set_remarks(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  remarks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlightPlan::_internal_mutable_remarks() {
  _has_bits_[0] |= 0x00000020u;
  return remarks_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlightPlan::release_remarks() {
  // @@protoc_insertion_point(field_release:xpilot.FlightPlan.remarks)
  if (!_internal_has_remarks()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return remarks_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlightPlan::set_allocated_remarks(std::string* remarks) {
  if (remarks != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  remarks_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remarks,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.FlightPlan.remarks)
}

// optional string equipment_suffix = 14;
inline bool FlightPlan::_internal_has_equipment_suffix() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FlightPlan::has_equipment_suffix() const {
  return _internal_has_equipment_suffix();
}
inline void FlightPlan::clear_equipment_suffix() {
  equipment_suffix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& FlightPlan::equipment_suffix() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.equipment_suffix)
  return _internal_equipment_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlightPlan::set_equipment_suffix(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 equipment_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.equipment_suffix)
}
inline std::string* FlightPlan::mutable_equipment_suffix() {
  // @@protoc_insertion_point(field_mutable:xpilot.FlightPlan.equipment_suffix)
  return _internal_mutable_equipment_suffix();
}
inline const std::string& FlightPlan::_internal_equipment_suffix() const {
  return equipment_suffix_.Get();
}
inline void FlightPlan::_internal_set_equipment_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  equipment_suffix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlightPlan::_internal_mutable_equipment_suffix() {
  _has_bits_[0] |= 0x00000040u;
  return equipment_suffix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlightPlan::release_equipment_suffix() {
  // @@protoc_insertion_point(field_release:xpilot.FlightPlan.equipment_suffix)
  if (!_internal_has_equipment_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return equipment_suffix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlightPlan::set_allocated_equipment_suffix(std::string* equipment_suffix) {
  if (equipment_suffix != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  equipment_suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipment_suffix,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.FlightPlan.equipment_suffix)
}

// optional .xpilot.FlightPlan.VoiceType voice_type = 15;
inline bool FlightPlan::_internal_has_voice_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool FlightPlan::has_voice_type() const {
  return _internal_has_voice_type();
}
inline void FlightPlan::clear_voice_type() {
  voice_type_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::xpilot::FlightPlan_VoiceType FlightPlan::_internal_voice_type() const {
  return static_cast< ::xpilot::FlightPlan_VoiceType >(voice_type_);
}
inline ::xpilot::FlightPlan_VoiceType FlightPlan::voice_type() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.voice_type)
  return _internal_voice_type();
}
inline void FlightPlan::_internal_set_voice_type(::xpilot::FlightPlan_VoiceType value) {
  _has_bits_[0] |= 0x00004000u;
  voice_type_ = value;
}
inline void FlightPlan::set_voice_type(::xpilot::FlightPlan_VoiceType value) {
  _internal_set_voice_type(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.voice_type)
}

// optional bool is_heavy = 16;
inline bool FlightPlan::_internal_has_is_heavy() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool FlightPlan::has_is_heavy() const {
  return _internal_has_is_heavy();
}
inline void FlightPlan::clear_is_heavy() {
  is_heavy_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool FlightPlan::_internal_is_heavy() const {
  return is_heavy_;
}
inline bool FlightPlan::is_heavy() const {
  // @@protoc_insertion_point(field_get:xpilot.FlightPlan.is_heavy)
  return _internal_is_heavy();
}
inline void FlightPlan::_internal_set_is_heavy(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_heavy_ = value;
}
inline void FlightPlan::set_is_heavy(bool value) {
  _internal_set_is_heavy(value);
  // @@protoc_insertion_point(field_set:xpilot.FlightPlan.is_heavy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xpilot::FlightPlan_VoiceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xpilot::FlightPlan_VoiceType>() {
  return ::xpilot::FlightPlan_VoiceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FlightPlan_2eproto
