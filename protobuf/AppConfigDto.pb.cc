// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppConfigDto.proto

#include "AppConfigDto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr AppConfigDto_ConnectInfo::AppConfigDto_ConnectInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , selcal_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , observer_mode_(false){}
struct AppConfigDto_ConnectInfoDefaultTypeInternal {
  constexpr AppConfigDto_ConnectInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppConfigDto_ConnectInfoDefaultTypeInternal() {}
  union {
    AppConfigDto_ConnectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppConfigDto_ConnectInfoDefaultTypeInternal _AppConfigDto_ConnectInfo_default_instance_;
constexpr AppConfigDto_InputDevicesEntry_DoNotUse::AppConfigDto_InputDevicesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppConfigDto_InputDevicesEntry_DoNotUseDefaultTypeInternal {
  constexpr AppConfigDto_InputDevicesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppConfigDto_InputDevicesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppConfigDto_InputDevicesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppConfigDto_InputDevicesEntry_DoNotUseDefaultTypeInternal _AppConfigDto_InputDevicesEntry_DoNotUse_default_instance_;
constexpr AppConfigDto_OutputDevicesEntry_DoNotUse::AppConfigDto_OutputDevicesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppConfigDto_OutputDevicesEntry_DoNotUseDefaultTypeInternal {
  constexpr AppConfigDto_OutputDevicesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppConfigDto_OutputDevicesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppConfigDto_OutputDevicesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppConfigDto_OutputDevicesEntry_DoNotUseDefaultTypeInternal _AppConfigDto_OutputDevicesEntry_DoNotUse_default_instance_;
constexpr AppConfigDto_AudioDriversEntry_DoNotUse::AppConfigDto_AudioDriversEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppConfigDto_AudioDriversEntry_DoNotUseDefaultTypeInternal {
  constexpr AppConfigDto_AudioDriversEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppConfigDto_AudioDriversEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppConfigDto_AudioDriversEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppConfigDto_AudioDriversEntry_DoNotUseDefaultTypeInternal _AppConfigDto_AudioDriversEntry_DoNotUse_default_instance_;
constexpr AppConfigDto_ServerListEntry_DoNotUse::AppConfigDto_ServerListEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppConfigDto_ServerListEntry_DoNotUseDefaultTypeInternal {
  constexpr AppConfigDto_ServerListEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppConfigDto_ServerListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppConfigDto_ServerListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppConfigDto_ServerListEntry_DoNotUseDefaultTypeInternal _AppConfigDto_ServerListEntry_DoNotUse_default_instance_;
constexpr AppConfigDto::AppConfigDto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_devices_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , output_devices_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , audio_drivers_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , server_list_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , recent_connections_()
  , vatsim_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vatsim_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , home_airport_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , input_device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_device_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audio_driver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , com1_volume_(0)
  , com2_volume_(0)
  , hf_squelch_(false)
  , auto_squawk_modec_(false)
  , enable_notification_sounds_(false){}
struct AppConfigDtoDefaultTypeInternal {
  constexpr AppConfigDtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppConfigDtoDefaultTypeInternal() {}
  union {
    AppConfigDto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppConfigDtoDefaultTypeInternal _AppConfigDto_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AppConfigDto_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AppConfigDto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AppConfigDto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AppConfigDto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ConnectInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ConnectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ConnectInfo, callsign_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ConnectInfo, type_code_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ConnectInfo, selcal_code_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ConnectInfo, observer_mode_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_InputDevicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_InputDevicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_InputDevicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_InputDevicesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_OutputDevicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_OutputDevicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_OutputDevicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_OutputDevicesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_AudioDriversEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_AudioDriversEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_AudioDriversEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_AudioDriversEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ServerListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ServerListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ServerListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto_ServerListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, vatsim_id_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, vatsim_password_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, name_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, home_airport_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, hf_squelch_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, com1_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, com2_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, input_devices_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, output_devices_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, audio_drivers_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, input_device_name_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, output_device_name_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, audio_driver_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, server_list_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, auto_squawk_modec_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, enable_notification_sounds_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, server_name_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AppConfigDto, recent_connections_),
  0,
  1,
  2,
  3,
  10,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  ~0u,
  11,
  12,
  7,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::xpilot::AppConfigDto_ConnectInfo)},
  { 13, 20, sizeof(::xpilot::AppConfigDto_InputDevicesEntry_DoNotUse)},
  { 22, 29, sizeof(::xpilot::AppConfigDto_OutputDevicesEntry_DoNotUse)},
  { 31, 38, sizeof(::xpilot::AppConfigDto_AudioDriversEntry_DoNotUse)},
  { 40, 47, sizeof(::xpilot::AppConfigDto_ServerListEntry_DoNotUse)},
  { 49, 72, sizeof(::xpilot::AppConfigDto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_AppConfigDto_ConnectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_AppConfigDto_InputDevicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_AppConfigDto_OutputDevicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_AppConfigDto_AudioDriversEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_AppConfigDto_ServerListEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_AppConfigDto_default_instance_),
};

const char descriptor_table_protodef_AppConfigDto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022AppConfigDto.proto\022\006xpilot\"\251\n\n\014AppConf"
  "igDto\022\026\n\tvatsim_id\030\001 \001(\tH\000\210\001\001\022\034\n\017vatsim_"
  "password\030\002 \001(\tH\001\210\001\001\022\021\n\004name\030\003 \001(\tH\002\210\001\001\022\031"
  "\n\014home_airport\030\004 \001(\tH\003\210\001\001\022\027\n\nhf_squelch\030"
  "\005 \001(\010H\004\210\001\001\022\030\n\013com1_volume\030\006 \001(\002H\005\210\001\001\022\030\n\013"
  "com2_volume\030\007 \001(\002H\006\210\001\001\022=\n\rinput_devices\030"
  "\010 \003(\0132&.xpilot.AppConfigDto.InputDevices"
  "Entry\022\?\n\016output_devices\030\t \003(\0132\'.xpilot.A"
  "ppConfigDto.OutputDevicesEntry\022=\n\raudio_"
  "drivers\030\n \003(\0132&.xpilot.AppConfigDto.Audi"
  "oDriversEntry\022\036\n\021input_device_name\030\013 \001(\t"
  "H\007\210\001\001\022\037\n\022output_device_name\030\014 \001(\tH\010\210\001\001\022\031"
  "\n\014audio_driver\030\r \001(\tH\t\210\001\001\0229\n\013server_list"
  "\030\016 \003(\0132$.xpilot.AppConfigDto.ServerListE"
  "ntry\022\036\n\021auto_squawk_modec\030\017 \001(\010H\n\210\001\001\022\'\n\032"
  "enable_notification_sounds\030\020 \001(\010H\013\210\001\001\022\030\n"
  "\013server_name\030\021 \001(\tH\014\210\001\001\022<\n\022recent_connec"
  "tions\030\022 \003(\0132 .xpilot.AppConfigDto.Connec"
  "tInfo\032\257\001\n\013ConnectInfo\022\025\n\010callsign\030\001 \001(\tH"
  "\000\210\001\001\022\026\n\ttype_code\030\002 \001(\tH\001\210\001\001\022\030\n\013selcal_c"
  "ode\030\003 \001(\tH\002\210\001\001\022\032\n\robserver_mode\030\004 \001(\010H\003\210"
  "\001\001B\013\n\t_callsignB\014\n\n_type_codeB\016\n\014_selcal"
  "_codeB\020\n\016_observer_mode\0323\n\021InputDevicesE"
  "ntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0324\n\022"
  "OutputDevicesEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\0323\n\021AudioDriversEntry\022\013\n\003key\030\001"
  " \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017ServerListEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\014\n\n_v"
  "atsim_idB\022\n\020_vatsim_passwordB\007\n\005_nameB\017\n"
  "\r_home_airportB\r\n\013_hf_squelchB\016\n\014_com1_v"
  "olumeB\016\n\014_com2_volumeB\024\n\022_input_device_n"
  "ameB\025\n\023_output_device_nameB\017\n\r_audio_dri"
  "verB\024\n\022_auto_squawk_modecB\035\n\033_enable_not"
  "ification_soundsB\016\n\014_server_nameB\031\252\002\026Vat"
  "sim.Xpilot.Protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AppConfigDto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AppConfigDto_2eproto = {
  false, false, 1387, descriptor_table_protodef_AppConfigDto_2eproto, "AppConfigDto.proto", 
  &descriptor_table_AppConfigDto_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_AppConfigDto_2eproto::offsets,
  file_level_metadata_AppConfigDto_2eproto, file_level_enum_descriptors_AppConfigDto_2eproto, file_level_service_descriptors_AppConfigDto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_AppConfigDto_2eproto_getter() {
  return &descriptor_table_AppConfigDto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_AppConfigDto_2eproto(&descriptor_table_AppConfigDto_2eproto);
namespace xpilot {

// ===================================================================

class AppConfigDto_ConnectInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AppConfigDto_ConnectInfo>()._has_bits_);
  static void set_has_callsign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_selcal_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_observer_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AppConfigDto_ConnectInfo::AppConfigDto_ConnectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.AppConfigDto.ConnectInfo)
}
AppConfigDto_ConnectInfo::AppConfigDto_ConnectInfo(const AppConfigDto_ConnectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callsign()) {
    callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callsign(), 
      GetArenaForAllocation());
  }
  type_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type_code()) {
    type_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_code(), 
      GetArenaForAllocation());
  }
  selcal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_selcal_code()) {
    selcal_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_selcal_code(), 
      GetArenaForAllocation());
  }
  observer_mode_ = from.observer_mode_;
  // @@protoc_insertion_point(copy_constructor:xpilot.AppConfigDto.ConnectInfo)
}

void AppConfigDto_ConnectInfo::SharedCtor() {
callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
selcal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
observer_mode_ = false;
}

AppConfigDto_ConnectInfo::~AppConfigDto_ConnectInfo() {
  // @@protoc_insertion_point(destructor:xpilot.AppConfigDto.ConnectInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppConfigDto_ConnectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selcal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppConfigDto_ConnectInfo::ArenaDtor(void* object) {
  AppConfigDto_ConnectInfo* _this = reinterpret_cast< AppConfigDto_ConnectInfo* >(object);
  (void)_this;
}
void AppConfigDto_ConnectInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppConfigDto_ConnectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppConfigDto_ConnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.AppConfigDto.ConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      callsign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      selcal_code_.ClearNonDefaultToEmpty();
    }
  }
  observer_mode_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppConfigDto_ConnectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string callsign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.ConnectInfo.callsign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.ConnectInfo.type_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string selcal_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_selcal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.ConnectInfo.selcal_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool observer_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_observer_mode(&has_bits);
          observer_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppConfigDto_ConnectInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.AppConfigDto.ConnectInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string callsign = 1;
  if (_internal_has_callsign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callsign().data(), static_cast<int>(this->_internal_callsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.ConnectInfo.callsign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_callsign(), target);
  }

  // optional string type_code = 2;
  if (_internal_has_type_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_code().data(), static_cast<int>(this->_internal_type_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.ConnectInfo.type_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type_code(), target);
  }

  // optional string selcal_code = 3;
  if (_internal_has_selcal_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selcal_code().data(), static_cast<int>(this->_internal_selcal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.ConnectInfo.selcal_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_selcal_code(), target);
  }

  // optional bool observer_mode = 4;
  if (_internal_has_observer_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_observer_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.AppConfigDto.ConnectInfo)
  return target;
}

size_t AppConfigDto_ConnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.AppConfigDto.ConnectInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string callsign = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callsign());
    }

    // optional string type_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type_code());
    }

    // optional string selcal_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selcal_code());
    }

    // optional bool observer_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppConfigDto_ConnectInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.AppConfigDto.ConnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AppConfigDto_ConnectInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppConfigDto_ConnectInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.AppConfigDto.ConnectInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.AppConfigDto.ConnectInfo)
    MergeFrom(*source);
  }
}

void AppConfigDto_ConnectInfo::MergeFrom(const AppConfigDto_ConnectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.AppConfigDto.ConnectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_callsign(from._internal_callsign());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type_code(from._internal_type_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_selcal_code(from._internal_selcal_code());
    }
    if (cached_has_bits & 0x00000008u) {
      observer_mode_ = from.observer_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppConfigDto_ConnectInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.AppConfigDto.ConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppConfigDto_ConnectInfo::CopyFrom(const AppConfigDto_ConnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.AppConfigDto.ConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppConfigDto_ConnectInfo::IsInitialized() const {
  return true;
}

void AppConfigDto_ConnectInfo::InternalSwap(AppConfigDto_ConnectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &callsign_, GetArenaForAllocation(),
      &other->callsign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_code_, GetArenaForAllocation(),
      &other->type_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &selcal_code_, GetArenaForAllocation(),
      &other->selcal_code_, other->GetArenaForAllocation()
  );
  swap(observer_mode_, other->observer_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppConfigDto_ConnectInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AppConfigDto_2eproto_getter, &descriptor_table_AppConfigDto_2eproto_once,
      file_level_metadata_AppConfigDto_2eproto[0]);
}

// ===================================================================

AppConfigDto_InputDevicesEntry_DoNotUse::AppConfigDto_InputDevicesEntry_DoNotUse() {}
AppConfigDto_InputDevicesEntry_DoNotUse::AppConfigDto_InputDevicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppConfigDto_InputDevicesEntry_DoNotUse::MergeFrom(const AppConfigDto_InputDevicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppConfigDto_InputDevicesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AppConfigDto_2eproto_getter, &descriptor_table_AppConfigDto_2eproto_once,
      file_level_metadata_AppConfigDto_2eproto[1]);
}
void AppConfigDto_InputDevicesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

AppConfigDto_OutputDevicesEntry_DoNotUse::AppConfigDto_OutputDevicesEntry_DoNotUse() {}
AppConfigDto_OutputDevicesEntry_DoNotUse::AppConfigDto_OutputDevicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppConfigDto_OutputDevicesEntry_DoNotUse::MergeFrom(const AppConfigDto_OutputDevicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppConfigDto_OutputDevicesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AppConfigDto_2eproto_getter, &descriptor_table_AppConfigDto_2eproto_once,
      file_level_metadata_AppConfigDto_2eproto[2]);
}
void AppConfigDto_OutputDevicesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

AppConfigDto_AudioDriversEntry_DoNotUse::AppConfigDto_AudioDriversEntry_DoNotUse() {}
AppConfigDto_AudioDriversEntry_DoNotUse::AppConfigDto_AudioDriversEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppConfigDto_AudioDriversEntry_DoNotUse::MergeFrom(const AppConfigDto_AudioDriversEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppConfigDto_AudioDriversEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AppConfigDto_2eproto_getter, &descriptor_table_AppConfigDto_2eproto_once,
      file_level_metadata_AppConfigDto_2eproto[3]);
}
void AppConfigDto_AudioDriversEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

AppConfigDto_ServerListEntry_DoNotUse::AppConfigDto_ServerListEntry_DoNotUse() {}
AppConfigDto_ServerListEntry_DoNotUse::AppConfigDto_ServerListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppConfigDto_ServerListEntry_DoNotUse::MergeFrom(const AppConfigDto_ServerListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppConfigDto_ServerListEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AppConfigDto_2eproto_getter, &descriptor_table_AppConfigDto_2eproto_once,
      file_level_metadata_AppConfigDto_2eproto[4]);
}
void AppConfigDto_ServerListEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AppConfigDto::_Internal {
 public:
  using HasBits = decltype(std::declval<AppConfigDto>()._has_bits_);
  static void set_has_vatsim_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vatsim_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_home_airport(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hf_squelch(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_com1_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_com2_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_input_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_output_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_audio_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_auto_squawk_modec(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_enable_notification_sounds(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_server_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

AppConfigDto::AppConfigDto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_devices_(arena),
  output_devices_(arena),
  audio_drivers_(arena),
  server_list_(arena),
  recent_connections_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.AppConfigDto)
}
AppConfigDto::AppConfigDto(const AppConfigDto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      recent_connections_(from.recent_connections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_devices_.MergeFrom(from.input_devices_);
  output_devices_.MergeFrom(from.output_devices_);
  audio_drivers_.MergeFrom(from.audio_drivers_);
  server_list_.MergeFrom(from.server_list_);
  vatsim_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vatsim_id()) {
    vatsim_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vatsim_id(), 
      GetArenaForAllocation());
  }
  vatsim_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vatsim_password()) {
    vatsim_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vatsim_password(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  home_airport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_home_airport()) {
    home_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_home_airport(), 
      GetArenaForAllocation());
  }
  input_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_input_device_name()) {
    input_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_device_name(), 
      GetArenaForAllocation());
  }
  output_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_device_name()) {
    output_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_device_name(), 
      GetArenaForAllocation());
  }
  audio_driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_audio_driver()) {
    audio_driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_driver(), 
      GetArenaForAllocation());
  }
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_name()) {
    server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&com1_volume_, &from.com1_volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_notification_sounds_) -
    reinterpret_cast<char*>(&com1_volume_)) + sizeof(enable_notification_sounds_));
  // @@protoc_insertion_point(copy_constructor:xpilot.AppConfigDto)
}

void AppConfigDto::SharedCtor() {
vatsim_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vatsim_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
home_airport_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
input_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
output_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
audio_driver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&com1_volume_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_notification_sounds_) -
    reinterpret_cast<char*>(&com1_volume_)) + sizeof(enable_notification_sounds_));
}

AppConfigDto::~AppConfigDto() {
  // @@protoc_insertion_point(destructor:xpilot.AppConfigDto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppConfigDto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vatsim_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vatsim_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  home_airport_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_driver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppConfigDto::ArenaDtor(void* object) {
  AppConfigDto* _this = reinterpret_cast< AppConfigDto* >(object);
  (void)_this;
  _this->input_devices_. ~MapField();
  _this->output_devices_. ~MapField();
  _this->audio_drivers_. ~MapField();
  _this->server_list_. ~MapField();
}
inline void AppConfigDto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AppConfigDto::ArenaDtor);
  }
}
void AppConfigDto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppConfigDto::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.AppConfigDto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_devices_.Clear();
  output_devices_.Clear();
  audio_drivers_.Clear();
  server_list_.Clear();
  recent_connections_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vatsim_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      vatsim_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      home_airport_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      input_device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      output_device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      audio_driver_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      server_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&com1_volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_notification_sounds_) -
        reinterpret_cast<char*>(&com1_volume_)) + sizeof(enable_notification_sounds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppConfigDto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string vatsim_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vatsim_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.vatsim_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vatsim_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vatsim_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.vatsim_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string home_airport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_home_airport();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.home_airport"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hf_squelch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hf_squelch(&has_bits);
          hf_squelch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float com1_volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_com1_volume(&has_bits);
          com1_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float com2_volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_com2_volume(&has_bits);
          com2_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<int32, string> input_devices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&input_devices_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> output_devices = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&output_devices_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, string> audio_drivers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&audio_drivers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string input_device_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_input_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.input_device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_device_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_output_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.output_device_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string audio_driver = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_audio_driver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.audio_driver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> server_list = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&server_list_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool auto_squawk_modec = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_auto_squawk_modec(&has_bits);
          auto_squawk_modec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enable_notification_sounds = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_enable_notification_sounds(&has_bits);
          enable_notification_sounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string server_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AppConfigDto.server_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .xpilot.AppConfigDto.ConnectInfo recent_connections = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_recent_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppConfigDto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.AppConfigDto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string vatsim_id = 1;
  if (_internal_has_vatsim_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vatsim_id().data(), static_cast<int>(this->_internal_vatsim_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.vatsim_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vatsim_id(), target);
  }

  // optional string vatsim_password = 2;
  if (_internal_has_vatsim_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vatsim_password().data(), static_cast<int>(this->_internal_vatsim_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.vatsim_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vatsim_password(), target);
  }

  // optional string name = 3;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string home_airport = 4;
  if (_internal_has_home_airport()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home_airport().data(), static_cast<int>(this->_internal_home_airport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.home_airport");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_home_airport(), target);
  }

  // optional bool hf_squelch = 5;
  if (_internal_has_hf_squelch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hf_squelch(), target);
  }

  // optional float com1_volume = 6;
  if (_internal_has_com1_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_com1_volume(), target);
  }

  // optional float com2_volume = 7;
  if (_internal_has_com2_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_com2_volume(), target);
  }

  // map<int32, string> input_devices = 8;
  if (!this->_internal_input_devices().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xpilot.AppConfigDto.InputDevicesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_input_devices().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_input_devices().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_input_devices().begin();
          it != this->_internal_input_devices().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppConfigDto_InputDevicesEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_input_devices().begin();
          it != this->_internal_input_devices().end(); ++it) {
        target = AppConfigDto_InputDevicesEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> output_devices = 9;
  if (!this->_internal_output_devices().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xpilot.AppConfigDto.OutputDevicesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_output_devices().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_output_devices().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_output_devices().begin();
          it != this->_internal_output_devices().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppConfigDto_OutputDevicesEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_output_devices().begin();
          it != this->_internal_output_devices().end(); ++it) {
        target = AppConfigDto_OutputDevicesEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, string> audio_drivers = 10;
  if (!this->_internal_audio_drivers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xpilot.AppConfigDto.AudioDriversEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_audio_drivers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_audio_drivers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_audio_drivers().begin();
          it != this->_internal_audio_drivers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppConfigDto_AudioDriversEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->_internal_audio_drivers().begin();
          it != this->_internal_audio_drivers().end(); ++it) {
        target = AppConfigDto_AudioDriversEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional string input_device_name = 11;
  if (_internal_has_input_device_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_device_name().data(), static_cast<int>(this->_internal_input_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.input_device_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_input_device_name(), target);
  }

  // optional string output_device_name = 12;
  if (_internal_has_output_device_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_device_name().data(), static_cast<int>(this->_internal_output_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.output_device_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_output_device_name(), target);
  }

  // optional string audio_driver = 13;
  if (_internal_has_audio_driver()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_driver().data(), static_cast<int>(this->_internal_audio_driver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.audio_driver");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_audio_driver(), target);
  }

  // map<string, string> server_list = 14;
  if (!this->_internal_server_list().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xpilot.AppConfigDto.ServerListEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "xpilot.AppConfigDto.ServerListEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_server_list().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_server_list().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_server_list().begin();
          it != this->_internal_server_list().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppConfigDto_ServerListEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_server_list().begin();
          it != this->_internal_server_list().end(); ++it) {
        target = AppConfigDto_ServerListEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional bool auto_squawk_modec = 15;
  if (_internal_has_auto_squawk_modec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_auto_squawk_modec(), target);
  }

  // optional bool enable_notification_sounds = 16;
  if (_internal_has_enable_notification_sounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_enable_notification_sounds(), target);
  }

  // optional string server_name = 17;
  if (_internal_has_server_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AppConfigDto.server_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_server_name(), target);
  }

  // repeated .xpilot.AppConfigDto.ConnectInfo recent_connections = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recent_connections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_recent_connections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.AppConfigDto)
  return target;
}

size_t AppConfigDto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.AppConfigDto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> input_devices = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_devices_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_input_devices().begin();
      it != this->_internal_input_devices().end(); ++it) {
    total_size += AppConfigDto_InputDevicesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> output_devices = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_output_devices_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_output_devices().begin();
      it != this->_internal_output_devices().end(); ++it) {
    total_size += AppConfigDto_OutputDevicesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, string> audio_drivers = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_audio_drivers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->_internal_audio_drivers().begin();
      it != this->_internal_audio_drivers().end(); ++it) {
    total_size += AppConfigDto_AudioDriversEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> server_list = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_server_list_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_server_list().begin();
      it != this->_internal_server_list().end(); ++it) {
    total_size += AppConfigDto_ServerListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .xpilot.AppConfigDto.ConnectInfo recent_connections = 18;
  total_size += 2UL * this->_internal_recent_connections_size();
  for (const auto& msg : this->recent_connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string vatsim_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vatsim_id());
    }

    // optional string vatsim_password = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vatsim_password());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string home_airport = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_home_airport());
    }

    // optional string input_device_name = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_input_device_name());
    }

    // optional string output_device_name = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_device_name());
    }

    // optional string audio_driver = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_audio_driver());
    }

    // optional string server_name = 17;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_name());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional float com1_volume = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float com2_volume = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional bool hf_squelch = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool auto_squawk_modec = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool enable_notification_sounds = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppConfigDto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.AppConfigDto)
  GOOGLE_DCHECK_NE(&from, this);
  const AppConfigDto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppConfigDto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.AppConfigDto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.AppConfigDto)
    MergeFrom(*source);
  }
}

void AppConfigDto::MergeFrom(const AppConfigDto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.AppConfigDto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_devices_.MergeFrom(from.input_devices_);
  output_devices_.MergeFrom(from.output_devices_);
  audio_drivers_.MergeFrom(from.audio_drivers_);
  server_list_.MergeFrom(from.server_list_);
  recent_connections_.MergeFrom(from.recent_connections_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_vatsim_id(from._internal_vatsim_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_vatsim_password(from._internal_vatsim_password());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_home_airport(from._internal_home_airport());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_input_device_name(from._internal_input_device_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_output_device_name(from._internal_output_device_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_audio_driver(from._internal_audio_driver());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_server_name(from._internal_server_name());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      com1_volume_ = from.com1_volume_;
    }
    if (cached_has_bits & 0x00000200u) {
      com2_volume_ = from.com2_volume_;
    }
    if (cached_has_bits & 0x00000400u) {
      hf_squelch_ = from.hf_squelch_;
    }
    if (cached_has_bits & 0x00000800u) {
      auto_squawk_modec_ = from.auto_squawk_modec_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_notification_sounds_ = from.enable_notification_sounds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppConfigDto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.AppConfigDto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppConfigDto::CopyFrom(const AppConfigDto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.AppConfigDto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppConfigDto::IsInitialized() const {
  return true;
}

void AppConfigDto::InternalSwap(AppConfigDto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_devices_.InternalSwap(&other->input_devices_);
  output_devices_.InternalSwap(&other->output_devices_);
  audio_drivers_.InternalSwap(&other->audio_drivers_);
  server_list_.InternalSwap(&other->server_list_);
  recent_connections_.InternalSwap(&other->recent_connections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vatsim_id_, GetArenaForAllocation(),
      &other->vatsim_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vatsim_password_, GetArenaForAllocation(),
      &other->vatsim_password_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &home_airport_, GetArenaForAllocation(),
      &other->home_airport_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &input_device_name_, GetArenaForAllocation(),
      &other->input_device_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &output_device_name_, GetArenaForAllocation(),
      &other->output_device_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &audio_driver_, GetArenaForAllocation(),
      &other->audio_driver_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_name_, GetArenaForAllocation(),
      &other->server_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppConfigDto, enable_notification_sounds_)
      + sizeof(AppConfigDto::enable_notification_sounds_)
      - PROTOBUF_FIELD_OFFSET(AppConfigDto, com1_volume_)>(
          reinterpret_cast<char*>(&com1_volume_),
          reinterpret_cast<char*>(&other->com1_volume_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppConfigDto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_AppConfigDto_2eproto_getter, &descriptor_table_AppConfigDto_2eproto_once,
      file_level_metadata_AppConfigDto_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::AppConfigDto_ConnectInfo* Arena::CreateMaybeMessage< ::xpilot::AppConfigDto_ConnectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::AppConfigDto_ConnectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::AppConfigDto_InputDevicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xpilot::AppConfigDto_InputDevicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::AppConfigDto_InputDevicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::AppConfigDto_OutputDevicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::xpilot::AppConfigDto_OutputDevicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::AppConfigDto_OutputDevicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::AppConfigDto_AudioDriversEntry_DoNotUse* Arena::CreateMaybeMessage< ::xpilot::AppConfigDto_AudioDriversEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::AppConfigDto_AudioDriversEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::AppConfigDto_ServerListEntry_DoNotUse* Arena::CreateMaybeMessage< ::xpilot::AppConfigDto_ServerListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::AppConfigDto_ServerListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::AppConfigDto* Arena::CreateMaybeMessage< ::xpilot::AppConfigDto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::AppConfigDto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
