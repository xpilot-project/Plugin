// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SetTransponder.proto

#include "SetTransponder.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr SetTransponder::SetTransponder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(0)
  , mode_c_(false)
  , ident_(false){}
struct SetTransponderDefaultTypeInternal {
  constexpr SetTransponderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTransponderDefaultTypeInternal() {}
  union {
    SetTransponder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTransponderDefaultTypeInternal _SetTransponder_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SetTransponder_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SetTransponder_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SetTransponder_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SetTransponder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::SetTransponder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::SetTransponder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::SetTransponder, code_),
  PROTOBUF_FIELD_OFFSET(::xpilot::SetTransponder, mode_c_),
  PROTOBUF_FIELD_OFFSET(::xpilot::SetTransponder, ident_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::xpilot::SetTransponder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_SetTransponder_default_instance_),
};

const char descriptor_table_protodef_SetTransponder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024SetTransponder.proto\022\006xpilot\"j\n\016SetTra"
  "nsponder\022\021\n\004code\030\001 \001(\005H\000\210\001\001\022\023\n\006mode_c\030\002 "
  "\001(\010H\001\210\001\001\022\022\n\005ident\030\003 \001(\010H\002\210\001\001B\007\n\005_codeB\t\n"
  "\007_mode_cB\010\n\006_identB\031\252\002\026Vatsim.Xpilot.Pro"
  "tobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SetTransponder_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SetTransponder_2eproto = {
  false, false, 173, descriptor_table_protodef_SetTransponder_2eproto, "SetTransponder.proto", 
  &descriptor_table_SetTransponder_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_SetTransponder_2eproto::offsets,
  file_level_metadata_SetTransponder_2eproto, file_level_enum_descriptors_SetTransponder_2eproto, file_level_service_descriptors_SetTransponder_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_SetTransponder_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SetTransponder_2eproto);
  return descriptor_table_SetTransponder_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_SetTransponder_2eproto(&descriptor_table_SetTransponder_2eproto);
namespace xpilot {

// ===================================================================

class SetTransponder::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTransponder>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode_c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SetTransponder::SetTransponder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.SetTransponder)
}
SetTransponder::SetTransponder(const SetTransponder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&code_)) + sizeof(ident_));
  // @@protoc_insertion_point(copy_constructor:xpilot.SetTransponder)
}

void SetTransponder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&code_)) + sizeof(ident_));
}

SetTransponder::~SetTransponder() {
  // @@protoc_insertion_point(destructor:xpilot.SetTransponder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetTransponder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetTransponder::ArenaDtor(void* object) {
  SetTransponder* _this = reinterpret_cast< SetTransponder* >(object);
  (void)_this;
}
void SetTransponder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTransponder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTransponder::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.SetTransponder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ident_) -
        reinterpret_cast<char*>(&code_)) + sizeof(ident_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTransponder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mode_c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mode_c(&has_bits);
          mode_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ident = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ident(&has_bits);
          ident_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTransponder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.SetTransponder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (_internal_has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // bool mode_c = 2;
  if (_internal_has_mode_c()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mode_c(), target);
  }

  // bool ident = 3;
  if (_internal_has_ident()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ident(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.SetTransponder)
  return target;
}

size_t SetTransponder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.SetTransponder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // int32 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_code());
    }

    // bool mode_c = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // bool ident = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTransponder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.SetTransponder)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTransponder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTransponder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.SetTransponder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.SetTransponder)
    MergeFrom(*source);
  }
}

void SetTransponder::MergeFrom(const SetTransponder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.SetTransponder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_c_ = from.mode_c_;
    }
    if (cached_has_bits & 0x00000004u) {
      ident_ = from.ident_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetTransponder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.SetTransponder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTransponder::CopyFrom(const SetTransponder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.SetTransponder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTransponder::IsInitialized() const {
  return true;
}

void SetTransponder::InternalSwap(SetTransponder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTransponder, ident_)
      + sizeof(SetTransponder::ident_)
      - PROTOBUF_FIELD_OFFSET(SetTransponder, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTransponder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::SetTransponder* Arena::CreateMaybeMessage< ::xpilot::SetTransponder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::SetTransponder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
