// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wrapper.proto

#include "Wrapper.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr Wrapper::Wrapper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , _oneof_case_{}{}
struct WrapperDefaultTypeInternal {
  constexpr WrapperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WrapperDefaultTypeInternal() {}
  union {
    Wrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WrapperDefaultTypeInternal _Wrapper_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Wrapper_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Wrapper_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Wrapper_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Wrapper_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::Wrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::xpilot::Wrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::Wrapper, timestamp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::xpilot::Wrapper, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xpilot::Wrapper)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_Wrapper_default_instance_),
};

const char descriptor_table_protodef_Wrapper_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rWrapper.proto\022\006xpilot\032\037google/protobuf"
  "/timestamp.proto\032\020XplaneData.proto\032\027Plug"
  "inInformation.proto\032\023CslValidation.proto"
  "\032\016AddPlane.proto\032\026ChangePlaneModel.proto"
  "\032\024PositionUpdate.proto\032\021DeletePlane.prot"
  "o\032\026NetworkConnected.proto\032\031NetworkDiscon"
  "nected.proto\032\024AirplaneConfig.proto\032\027Near"
  "byControllers.proto\032\034PrivateMessageRecei"
  "ved.proto\032\030PrivateMessageSent.proto\032\024Set"
  "Transponder.proto\032\030FastPositionUpdate.pr"
  "oto\032\025PlaneAddedToSim.proto\032\031PlaneRemoved"
  "FromSim.proto\032\023SetRadioStack.proto\032\030Requ"
  "estStationInfo.proto\032\027TriggerDisconnect."
  "proto\032\032RadioMessageReceived.proto\032\026Radio"
  "MessageSent.proto\"\366\t\n\007Wrapper\022-\n\ttimesta"
  "mp\030\001 \001(\0132\032.google.protobuf.Timestamp\022)\n\013"
  "xplane_data\030\002 \001(\0132\022.xpilot.XplaneDataH\000\022"
  "1\n\017position_update\030\003 \001(\0132\026.xpilot.Positi"
  "onUpdateH\000\022:\n\024fast_position_update\030\004 \001(\013"
  "2\032.xpilot.FastPositionUpdateH\000\0221\n\017airpla"
  "ne_config\030\005 \001(\0132\026.xpilot.AirplaneConfigH"
  "\000\022%\n\tadd_plane\030\006 \001(\0132\020.xpilot.AddPlaneH\000"
  "\0225\n\022plane_added_to_sim\030\007 \001(\0132\027.xpilot.Pl"
  "aneAddedToSimH\000\0226\n\022change_plane_model\030\010 "
  "\001(\0132\030.xpilot.ChangePlaneModelH\000\022+\n\014delet"
  "e_plane\030\t \001(\0132\023.xpilot.DeletePlaneH\000\022B\n\030"
  "private_message_received\030\n \001(\0132\036.xpilot."
  "PrivateMessageReceivedH\000\022:\n\024private_mess"
  "age_sent\030\013 \001(\0132\032.xpilot.PrivateMessageSe"
  "ntH\000\022>\n\026radio_message_received\030\014 \001(\0132\034.x"
  "pilot.RadioMessageReceivedH\000\0226\n\022radio_me"
  "ssage_sent\030\r \001(\0132\030.xpilot.RadioMessageSe"
  "ntH\000\0225\n\021network_connected\030\016 \001(\0132\030.xpilot"
  ".NetworkConnectedH\000\022;\n\024network_disconnec"
  "ted\030\017 \001(\0132\033.xpilot.NetworkDisconnectedH\000"
  "\0227\n\022nearby_controllers\030\020 \001(\0132\031.xpilot.Ne"
  "arbyControllersH\000\0221\n\017set_transponder\030\021 \001"
  "(\0132\026.xpilot.SetTransponderH\000\022/\n\016set_radi"
  "ostack\030\022 \001(\0132\025.xpilot.SetRadioStackH\000\0227\n"
  "\022plugin_information\030\023 \001(\0132\031.xpilot.Plugi"
  "nInformationH\000\022/\n\016csl_validation\030\024 \001(\0132\025"
  ".xpilot.CslValidationH\000\022:\n\024request_stati"
  "on_info\030\025 \001(\0132\032.xpilot.RequestStationInf"
  "oH\000\0227\n\022trigger_disconnect\030\026 \001(\0132\031.xpilot"
  ".TriggerDisconnectH\000\022=\n\026plane_removed_fr"
  "om_sim\030\027 \001(\0132\033.xpilot.PlaneRemovedFromSi"
  "mH\000B\005\n\003msgB\031\252\002\026Vatsim.Xpilot.Protobufb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Wrapper_2eproto_deps[23] = {
  &::descriptor_table_AddPlane_2eproto,
  &::descriptor_table_AirplaneConfig_2eproto,
  &::descriptor_table_ChangePlaneModel_2eproto,
  &::descriptor_table_CslValidation_2eproto,
  &::descriptor_table_DeletePlane_2eproto,
  &::descriptor_table_FastPositionUpdate_2eproto,
  &::descriptor_table_NearbyControllers_2eproto,
  &::descriptor_table_NetworkConnected_2eproto,
  &::descriptor_table_NetworkDisconnected_2eproto,
  &::descriptor_table_PlaneAddedToSim_2eproto,
  &::descriptor_table_PlaneRemovedFromSim_2eproto,
  &::descriptor_table_PluginInformation_2eproto,
  &::descriptor_table_PositionUpdate_2eproto,
  &::descriptor_table_PrivateMessageReceived_2eproto,
  &::descriptor_table_PrivateMessageSent_2eproto,
  &::descriptor_table_RadioMessageReceived_2eproto,
  &::descriptor_table_RadioMessageSent_2eproto,
  &::descriptor_table_RequestStationInfo_2eproto,
  &::descriptor_table_SetRadioStack_2eproto,
  &::descriptor_table_SetTransponder_2eproto,
  &::descriptor_table_TriggerDisconnect_2eproto,
  &::descriptor_table_XplaneData_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Wrapper_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Wrapper_2eproto = {
  false, false, 1885, descriptor_table_protodef_Wrapper_2eproto, "Wrapper.proto", 
  &descriptor_table_Wrapper_2eproto_once, descriptor_table_Wrapper_2eproto_deps, 23, 1,
  schemas, file_default_instances, TableStruct_Wrapper_2eproto::offsets,
  file_level_metadata_Wrapper_2eproto, file_level_enum_descriptors_Wrapper_2eproto, file_level_service_descriptors_Wrapper_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Wrapper_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Wrapper_2eproto);
  return descriptor_table_Wrapper_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Wrapper_2eproto(&descriptor_table_Wrapper_2eproto);
namespace xpilot {

// ===================================================================

class Wrapper::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Wrapper* msg);
  static const ::xpilot::XplaneData& xplane_data(const Wrapper* msg);
  static const ::xpilot::PositionUpdate& position_update(const Wrapper* msg);
  static const ::xpilot::FastPositionUpdate& fast_position_update(const Wrapper* msg);
  static const ::xpilot::AirplaneConfig& airplane_config(const Wrapper* msg);
  static const ::xpilot::AddPlane& add_plane(const Wrapper* msg);
  static const ::xpilot::PlaneAddedToSim& plane_added_to_sim(const Wrapper* msg);
  static const ::xpilot::ChangePlaneModel& change_plane_model(const Wrapper* msg);
  static const ::xpilot::DeletePlane& delete_plane(const Wrapper* msg);
  static const ::xpilot::PrivateMessageReceived& private_message_received(const Wrapper* msg);
  static const ::xpilot::PrivateMessageSent& private_message_sent(const Wrapper* msg);
  static const ::xpilot::RadioMessageReceived& radio_message_received(const Wrapper* msg);
  static const ::xpilot::RadioMessageSent& radio_message_sent(const Wrapper* msg);
  static const ::xpilot::NetworkConnected& network_connected(const Wrapper* msg);
  static const ::xpilot::NetworkDisconnected& network_disconnected(const Wrapper* msg);
  static const ::xpilot::NearbyControllers& nearby_controllers(const Wrapper* msg);
  static const ::xpilot::SetTransponder& set_transponder(const Wrapper* msg);
  static const ::xpilot::SetRadioStack& set_radiostack(const Wrapper* msg);
  static const ::xpilot::PluginInformation& plugin_information(const Wrapper* msg);
  static const ::xpilot::CslValidation& csl_validation(const Wrapper* msg);
  static const ::xpilot::RequestStationInfo& request_station_info(const Wrapper* msg);
  static const ::xpilot::TriggerDisconnect& trigger_disconnect(const Wrapper* msg);
  static const ::xpilot::PlaneRemovedFromSim& plane_removed_from_sim(const Wrapper* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Wrapper::_Internal::timestamp(const Wrapper* msg) {
  return *msg->timestamp_;
}
const ::xpilot::XplaneData&
Wrapper::_Internal::xplane_data(const Wrapper* msg) {
  return *msg->msg_.xplane_data_;
}
const ::xpilot::PositionUpdate&
Wrapper::_Internal::position_update(const Wrapper* msg) {
  return *msg->msg_.position_update_;
}
const ::xpilot::FastPositionUpdate&
Wrapper::_Internal::fast_position_update(const Wrapper* msg) {
  return *msg->msg_.fast_position_update_;
}
const ::xpilot::AirplaneConfig&
Wrapper::_Internal::airplane_config(const Wrapper* msg) {
  return *msg->msg_.airplane_config_;
}
const ::xpilot::AddPlane&
Wrapper::_Internal::add_plane(const Wrapper* msg) {
  return *msg->msg_.add_plane_;
}
const ::xpilot::PlaneAddedToSim&
Wrapper::_Internal::plane_added_to_sim(const Wrapper* msg) {
  return *msg->msg_.plane_added_to_sim_;
}
const ::xpilot::ChangePlaneModel&
Wrapper::_Internal::change_plane_model(const Wrapper* msg) {
  return *msg->msg_.change_plane_model_;
}
const ::xpilot::DeletePlane&
Wrapper::_Internal::delete_plane(const Wrapper* msg) {
  return *msg->msg_.delete_plane_;
}
const ::xpilot::PrivateMessageReceived&
Wrapper::_Internal::private_message_received(const Wrapper* msg) {
  return *msg->msg_.private_message_received_;
}
const ::xpilot::PrivateMessageSent&
Wrapper::_Internal::private_message_sent(const Wrapper* msg) {
  return *msg->msg_.private_message_sent_;
}
const ::xpilot::RadioMessageReceived&
Wrapper::_Internal::radio_message_received(const Wrapper* msg) {
  return *msg->msg_.radio_message_received_;
}
const ::xpilot::RadioMessageSent&
Wrapper::_Internal::radio_message_sent(const Wrapper* msg) {
  return *msg->msg_.radio_message_sent_;
}
const ::xpilot::NetworkConnected&
Wrapper::_Internal::network_connected(const Wrapper* msg) {
  return *msg->msg_.network_connected_;
}
const ::xpilot::NetworkDisconnected&
Wrapper::_Internal::network_disconnected(const Wrapper* msg) {
  return *msg->msg_.network_disconnected_;
}
const ::xpilot::NearbyControllers&
Wrapper::_Internal::nearby_controllers(const Wrapper* msg) {
  return *msg->msg_.nearby_controllers_;
}
const ::xpilot::SetTransponder&
Wrapper::_Internal::set_transponder(const Wrapper* msg) {
  return *msg->msg_.set_transponder_;
}
const ::xpilot::SetRadioStack&
Wrapper::_Internal::set_radiostack(const Wrapper* msg) {
  return *msg->msg_.set_radiostack_;
}
const ::xpilot::PluginInformation&
Wrapper::_Internal::plugin_information(const Wrapper* msg) {
  return *msg->msg_.plugin_information_;
}
const ::xpilot::CslValidation&
Wrapper::_Internal::csl_validation(const Wrapper* msg) {
  return *msg->msg_.csl_validation_;
}
const ::xpilot::RequestStationInfo&
Wrapper::_Internal::request_station_info(const Wrapper* msg) {
  return *msg->msg_.request_station_info_;
}
const ::xpilot::TriggerDisconnect&
Wrapper::_Internal::trigger_disconnect(const Wrapper* msg) {
  return *msg->msg_.trigger_disconnect_;
}
const ::xpilot::PlaneRemovedFromSim&
Wrapper::_Internal::plane_removed_from_sim(const Wrapper* msg) {
  return *msg->msg_.plane_removed_from_sim_;
}
void Wrapper::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void Wrapper::set_allocated_xplane_data(::xpilot::XplaneData* xplane_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (xplane_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xplane_data)->GetArena();
    if (message_arena != submessage_arena) {
      xplane_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xplane_data, submessage_arena);
    }
    set_has_xplane_data();
    msg_.xplane_data_ = xplane_data;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.xplane_data)
}
void Wrapper::clear_xplane_data() {
  if (_internal_has_xplane_data()) {
    if (GetArena() == nullptr) {
      delete msg_.xplane_data_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_position_update(::xpilot::PositionUpdate* position_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (position_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_update)->GetArena();
    if (message_arena != submessage_arena) {
      position_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_update, submessage_arena);
    }
    set_has_position_update();
    msg_.position_update_ = position_update;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.position_update)
}
void Wrapper::clear_position_update() {
  if (_internal_has_position_update()) {
    if (GetArena() == nullptr) {
      delete msg_.position_update_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_fast_position_update(::xpilot::FastPositionUpdate* fast_position_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (fast_position_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fast_position_update)->GetArena();
    if (message_arena != submessage_arena) {
      fast_position_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fast_position_update, submessage_arena);
    }
    set_has_fast_position_update();
    msg_.fast_position_update_ = fast_position_update;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.fast_position_update)
}
void Wrapper::clear_fast_position_update() {
  if (_internal_has_fast_position_update()) {
    if (GetArena() == nullptr) {
      delete msg_.fast_position_update_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_airplane_config(::xpilot::AirplaneConfig* airplane_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (airplane_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airplane_config)->GetArena();
    if (message_arena != submessage_arena) {
      airplane_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airplane_config, submessage_arena);
    }
    set_has_airplane_config();
    msg_.airplane_config_ = airplane_config;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.airplane_config)
}
void Wrapper::clear_airplane_config() {
  if (_internal_has_airplane_config()) {
    if (GetArena() == nullptr) {
      delete msg_.airplane_config_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_add_plane(::xpilot::AddPlane* add_plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (add_plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_plane)->GetArena();
    if (message_arena != submessage_arena) {
      add_plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_plane, submessage_arena);
    }
    set_has_add_plane();
    msg_.add_plane_ = add_plane;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.add_plane)
}
void Wrapper::clear_add_plane() {
  if (_internal_has_add_plane()) {
    if (GetArena() == nullptr) {
      delete msg_.add_plane_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_plane_added_to_sim(::xpilot::PlaneAddedToSim* plane_added_to_sim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (plane_added_to_sim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plane_added_to_sim)->GetArena();
    if (message_arena != submessage_arena) {
      plane_added_to_sim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plane_added_to_sim, submessage_arena);
    }
    set_has_plane_added_to_sim();
    msg_.plane_added_to_sim_ = plane_added_to_sim;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.plane_added_to_sim)
}
void Wrapper::clear_plane_added_to_sim() {
  if (_internal_has_plane_added_to_sim()) {
    if (GetArena() == nullptr) {
      delete msg_.plane_added_to_sim_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_change_plane_model(::xpilot::ChangePlaneModel* change_plane_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (change_plane_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(change_plane_model)->GetArena();
    if (message_arena != submessage_arena) {
      change_plane_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_plane_model, submessage_arena);
    }
    set_has_change_plane_model();
    msg_.change_plane_model_ = change_plane_model;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.change_plane_model)
}
void Wrapper::clear_change_plane_model() {
  if (_internal_has_change_plane_model()) {
    if (GetArena() == nullptr) {
      delete msg_.change_plane_model_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_delete_plane(::xpilot::DeletePlane* delete_plane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (delete_plane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_plane)->GetArena();
    if (message_arena != submessage_arena) {
      delete_plane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_plane, submessage_arena);
    }
    set_has_delete_plane();
    msg_.delete_plane_ = delete_plane;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.delete_plane)
}
void Wrapper::clear_delete_plane() {
  if (_internal_has_delete_plane()) {
    if (GetArena() == nullptr) {
      delete msg_.delete_plane_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_private_message_received(::xpilot::PrivateMessageReceived* private_message_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (private_message_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(private_message_received)->GetArena();
    if (message_arena != submessage_arena) {
      private_message_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, private_message_received, submessage_arena);
    }
    set_has_private_message_received();
    msg_.private_message_received_ = private_message_received;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.private_message_received)
}
void Wrapper::clear_private_message_received() {
  if (_internal_has_private_message_received()) {
    if (GetArena() == nullptr) {
      delete msg_.private_message_received_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_private_message_sent(::xpilot::PrivateMessageSent* private_message_sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (private_message_sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(private_message_sent)->GetArena();
    if (message_arena != submessage_arena) {
      private_message_sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, private_message_sent, submessage_arena);
    }
    set_has_private_message_sent();
    msg_.private_message_sent_ = private_message_sent;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.private_message_sent)
}
void Wrapper::clear_private_message_sent() {
  if (_internal_has_private_message_sent()) {
    if (GetArena() == nullptr) {
      delete msg_.private_message_sent_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_radio_message_received(::xpilot::RadioMessageReceived* radio_message_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (radio_message_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radio_message_received)->GetArena();
    if (message_arena != submessage_arena) {
      radio_message_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radio_message_received, submessage_arena);
    }
    set_has_radio_message_received();
    msg_.radio_message_received_ = radio_message_received;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.radio_message_received)
}
void Wrapper::clear_radio_message_received() {
  if (_internal_has_radio_message_received()) {
    if (GetArena() == nullptr) {
      delete msg_.radio_message_received_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_radio_message_sent(::xpilot::RadioMessageSent* radio_message_sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (radio_message_sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radio_message_sent)->GetArena();
    if (message_arena != submessage_arena) {
      radio_message_sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radio_message_sent, submessage_arena);
    }
    set_has_radio_message_sent();
    msg_.radio_message_sent_ = radio_message_sent;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.radio_message_sent)
}
void Wrapper::clear_radio_message_sent() {
  if (_internal_has_radio_message_sent()) {
    if (GetArena() == nullptr) {
      delete msg_.radio_message_sent_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_network_connected(::xpilot::NetworkConnected* network_connected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (network_connected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_connected)->GetArena();
    if (message_arena != submessage_arena) {
      network_connected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_connected, submessage_arena);
    }
    set_has_network_connected();
    msg_.network_connected_ = network_connected;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.network_connected)
}
void Wrapper::clear_network_connected() {
  if (_internal_has_network_connected()) {
    if (GetArena() == nullptr) {
      delete msg_.network_connected_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_network_disconnected(::xpilot::NetworkDisconnected* network_disconnected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (network_disconnected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_disconnected)->GetArena();
    if (message_arena != submessage_arena) {
      network_disconnected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_disconnected, submessage_arena);
    }
    set_has_network_disconnected();
    msg_.network_disconnected_ = network_disconnected;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.network_disconnected)
}
void Wrapper::clear_network_disconnected() {
  if (_internal_has_network_disconnected()) {
    if (GetArena() == nullptr) {
      delete msg_.network_disconnected_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_nearby_controllers(::xpilot::NearbyControllers* nearby_controllers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (nearby_controllers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nearby_controllers)->GetArena();
    if (message_arena != submessage_arena) {
      nearby_controllers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nearby_controllers, submessage_arena);
    }
    set_has_nearby_controllers();
    msg_.nearby_controllers_ = nearby_controllers;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.nearby_controllers)
}
void Wrapper::clear_nearby_controllers() {
  if (_internal_has_nearby_controllers()) {
    if (GetArena() == nullptr) {
      delete msg_.nearby_controllers_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_set_transponder(::xpilot::SetTransponder* set_transponder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (set_transponder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_transponder)->GetArena();
    if (message_arena != submessage_arena) {
      set_transponder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_transponder, submessage_arena);
    }
    set_has_set_transponder();
    msg_.set_transponder_ = set_transponder;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.set_transponder)
}
void Wrapper::clear_set_transponder() {
  if (_internal_has_set_transponder()) {
    if (GetArena() == nullptr) {
      delete msg_.set_transponder_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_set_radiostack(::xpilot::SetRadioStack* set_radiostack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (set_radiostack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(set_radiostack)->GetArena();
    if (message_arena != submessage_arena) {
      set_radiostack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_radiostack, submessage_arena);
    }
    set_has_set_radiostack();
    msg_.set_radiostack_ = set_radiostack;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.set_radiostack)
}
void Wrapper::clear_set_radiostack() {
  if (_internal_has_set_radiostack()) {
    if (GetArena() == nullptr) {
      delete msg_.set_radiostack_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_plugin_information(::xpilot::PluginInformation* plugin_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (plugin_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plugin_information)->GetArena();
    if (message_arena != submessage_arena) {
      plugin_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plugin_information, submessage_arena);
    }
    set_has_plugin_information();
    msg_.plugin_information_ = plugin_information;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.plugin_information)
}
void Wrapper::clear_plugin_information() {
  if (_internal_has_plugin_information()) {
    if (GetArena() == nullptr) {
      delete msg_.plugin_information_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_csl_validation(::xpilot::CslValidation* csl_validation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (csl_validation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(csl_validation)->GetArena();
    if (message_arena != submessage_arena) {
      csl_validation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csl_validation, submessage_arena);
    }
    set_has_csl_validation();
    msg_.csl_validation_ = csl_validation;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.csl_validation)
}
void Wrapper::clear_csl_validation() {
  if (_internal_has_csl_validation()) {
    if (GetArena() == nullptr) {
      delete msg_.csl_validation_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_request_station_info(::xpilot::RequestStationInfo* request_station_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (request_station_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_station_info)->GetArena();
    if (message_arena != submessage_arena) {
      request_station_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_station_info, submessage_arena);
    }
    set_has_request_station_info();
    msg_.request_station_info_ = request_station_info;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.request_station_info)
}
void Wrapper::clear_request_station_info() {
  if (_internal_has_request_station_info()) {
    if (GetArena() == nullptr) {
      delete msg_.request_station_info_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_trigger_disconnect(::xpilot::TriggerDisconnect* trigger_disconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (trigger_disconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_disconnect)->GetArena();
    if (message_arena != submessage_arena) {
      trigger_disconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_disconnect, submessage_arena);
    }
    set_has_trigger_disconnect();
    msg_.trigger_disconnect_ = trigger_disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.trigger_disconnect)
}
void Wrapper::clear_trigger_disconnect() {
  if (_internal_has_trigger_disconnect()) {
    if (GetArena() == nullptr) {
      delete msg_.trigger_disconnect_;
    }
    clear_has_msg();
  }
}
void Wrapper::set_allocated_plane_removed_from_sim(::xpilot::PlaneRemovedFromSim* plane_removed_from_sim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (plane_removed_from_sim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plane_removed_from_sim)->GetArena();
    if (message_arena != submessage_arena) {
      plane_removed_from_sim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plane_removed_from_sim, submessage_arena);
    }
    set_has_plane_removed_from_sim();
    msg_.plane_removed_from_sim_ = plane_removed_from_sim;
  }
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.plane_removed_from_sim)
}
void Wrapper::clear_plane_removed_from_sim() {
  if (_internal_has_plane_removed_from_sim()) {
    if (GetArena() == nullptr) {
      delete msg_.plane_removed_from_sim_;
    }
    clear_has_msg();
  }
}
Wrapper::Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.Wrapper)
}
Wrapper::Wrapper(const Wrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kXplaneData: {
      _internal_mutable_xplane_data()->::xpilot::XplaneData::MergeFrom(from._internal_xplane_data());
      break;
    }
    case kPositionUpdate: {
      _internal_mutable_position_update()->::xpilot::PositionUpdate::MergeFrom(from._internal_position_update());
      break;
    }
    case kFastPositionUpdate: {
      _internal_mutable_fast_position_update()->::xpilot::FastPositionUpdate::MergeFrom(from._internal_fast_position_update());
      break;
    }
    case kAirplaneConfig: {
      _internal_mutable_airplane_config()->::xpilot::AirplaneConfig::MergeFrom(from._internal_airplane_config());
      break;
    }
    case kAddPlane: {
      _internal_mutable_add_plane()->::xpilot::AddPlane::MergeFrom(from._internal_add_plane());
      break;
    }
    case kPlaneAddedToSim: {
      _internal_mutable_plane_added_to_sim()->::xpilot::PlaneAddedToSim::MergeFrom(from._internal_plane_added_to_sim());
      break;
    }
    case kChangePlaneModel: {
      _internal_mutable_change_plane_model()->::xpilot::ChangePlaneModel::MergeFrom(from._internal_change_plane_model());
      break;
    }
    case kDeletePlane: {
      _internal_mutable_delete_plane()->::xpilot::DeletePlane::MergeFrom(from._internal_delete_plane());
      break;
    }
    case kPrivateMessageReceived: {
      _internal_mutable_private_message_received()->::xpilot::PrivateMessageReceived::MergeFrom(from._internal_private_message_received());
      break;
    }
    case kPrivateMessageSent: {
      _internal_mutable_private_message_sent()->::xpilot::PrivateMessageSent::MergeFrom(from._internal_private_message_sent());
      break;
    }
    case kRadioMessageReceived: {
      _internal_mutable_radio_message_received()->::xpilot::RadioMessageReceived::MergeFrom(from._internal_radio_message_received());
      break;
    }
    case kRadioMessageSent: {
      _internal_mutable_radio_message_sent()->::xpilot::RadioMessageSent::MergeFrom(from._internal_radio_message_sent());
      break;
    }
    case kNetworkConnected: {
      _internal_mutable_network_connected()->::xpilot::NetworkConnected::MergeFrom(from._internal_network_connected());
      break;
    }
    case kNetworkDisconnected: {
      _internal_mutable_network_disconnected()->::xpilot::NetworkDisconnected::MergeFrom(from._internal_network_disconnected());
      break;
    }
    case kNearbyControllers: {
      _internal_mutable_nearby_controllers()->::xpilot::NearbyControllers::MergeFrom(from._internal_nearby_controllers());
      break;
    }
    case kSetTransponder: {
      _internal_mutable_set_transponder()->::xpilot::SetTransponder::MergeFrom(from._internal_set_transponder());
      break;
    }
    case kSetRadiostack: {
      _internal_mutable_set_radiostack()->::xpilot::SetRadioStack::MergeFrom(from._internal_set_radiostack());
      break;
    }
    case kPluginInformation: {
      _internal_mutable_plugin_information()->::xpilot::PluginInformation::MergeFrom(from._internal_plugin_information());
      break;
    }
    case kCslValidation: {
      _internal_mutable_csl_validation()->::xpilot::CslValidation::MergeFrom(from._internal_csl_validation());
      break;
    }
    case kRequestStationInfo: {
      _internal_mutable_request_station_info()->::xpilot::RequestStationInfo::MergeFrom(from._internal_request_station_info());
      break;
    }
    case kTriggerDisconnect: {
      _internal_mutable_trigger_disconnect()->::xpilot::TriggerDisconnect::MergeFrom(from._internal_trigger_disconnect());
      break;
    }
    case kPlaneRemovedFromSim: {
      _internal_mutable_plane_removed_from_sim()->::xpilot::PlaneRemovedFromSim::MergeFrom(from._internal_plane_removed_from_sim());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:xpilot.Wrapper)
}

void Wrapper::SharedCtor() {
timestamp_ = nullptr;
clear_has_msg();
}

Wrapper::~Wrapper() {
  // @@protoc_insertion_point(destructor:xpilot.Wrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Wrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (has_msg()) {
    clear_msg();
  }
}

void Wrapper::ArenaDtor(void* object) {
  Wrapper* _this = reinterpret_cast< Wrapper* >(object);
  (void)_this;
}
void Wrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Wrapper::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:xpilot.Wrapper)
  switch (msg_case()) {
    case kXplaneData: {
      if (GetArena() == nullptr) {
        delete msg_.xplane_data_;
      }
      break;
    }
    case kPositionUpdate: {
      if (GetArena() == nullptr) {
        delete msg_.position_update_;
      }
      break;
    }
    case kFastPositionUpdate: {
      if (GetArena() == nullptr) {
        delete msg_.fast_position_update_;
      }
      break;
    }
    case kAirplaneConfig: {
      if (GetArena() == nullptr) {
        delete msg_.airplane_config_;
      }
      break;
    }
    case kAddPlane: {
      if (GetArena() == nullptr) {
        delete msg_.add_plane_;
      }
      break;
    }
    case kPlaneAddedToSim: {
      if (GetArena() == nullptr) {
        delete msg_.plane_added_to_sim_;
      }
      break;
    }
    case kChangePlaneModel: {
      if (GetArena() == nullptr) {
        delete msg_.change_plane_model_;
      }
      break;
    }
    case kDeletePlane: {
      if (GetArena() == nullptr) {
        delete msg_.delete_plane_;
      }
      break;
    }
    case kPrivateMessageReceived: {
      if (GetArena() == nullptr) {
        delete msg_.private_message_received_;
      }
      break;
    }
    case kPrivateMessageSent: {
      if (GetArena() == nullptr) {
        delete msg_.private_message_sent_;
      }
      break;
    }
    case kRadioMessageReceived: {
      if (GetArena() == nullptr) {
        delete msg_.radio_message_received_;
      }
      break;
    }
    case kRadioMessageSent: {
      if (GetArena() == nullptr) {
        delete msg_.radio_message_sent_;
      }
      break;
    }
    case kNetworkConnected: {
      if (GetArena() == nullptr) {
        delete msg_.network_connected_;
      }
      break;
    }
    case kNetworkDisconnected: {
      if (GetArena() == nullptr) {
        delete msg_.network_disconnected_;
      }
      break;
    }
    case kNearbyControllers: {
      if (GetArena() == nullptr) {
        delete msg_.nearby_controllers_;
      }
      break;
    }
    case kSetTransponder: {
      if (GetArena() == nullptr) {
        delete msg_.set_transponder_;
      }
      break;
    }
    case kSetRadiostack: {
      if (GetArena() == nullptr) {
        delete msg_.set_radiostack_;
      }
      break;
    }
    case kPluginInformation: {
      if (GetArena() == nullptr) {
        delete msg_.plugin_information_;
      }
      break;
    }
    case kCslValidation: {
      if (GetArena() == nullptr) {
        delete msg_.csl_validation_;
      }
      break;
    }
    case kRequestStationInfo: {
      if (GetArena() == nullptr) {
        delete msg_.request_station_info_;
      }
      break;
    }
    case kTriggerDisconnect: {
      if (GetArena() == nullptr) {
        delete msg_.trigger_disconnect_;
      }
      break;
    }
    case kPlaneRemovedFromSim: {
      if (GetArena() == nullptr) {
        delete msg_.plane_removed_from_sim_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Wrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.Wrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.XplaneData xplane_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_xplane_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PositionUpdate position_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.FastPositionUpdate fast_position_update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_position_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.AirplaneConfig airplane_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_airplane_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.AddPlane add_plane = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_plane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PlaneAddedToSim plane_added_to_sim = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_plane_added_to_sim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.ChangePlaneModel change_plane_model = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_plane_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.DeletePlane delete_plane = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_plane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PrivateMessageReceived private_message_received = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_private_message_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PrivateMessageSent private_message_sent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_private_message_sent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.RadioMessageReceived radio_message_received = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_message_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.RadioMessageSent radio_message_sent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_message_sent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.NetworkConnected network_connected = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_connected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.NetworkDisconnected network_disconnected = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_disconnected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.NearbyControllers nearby_controllers = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_nearby_controllers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.SetTransponder set_transponder = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_transponder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.SetRadioStack set_radiostack = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_radiostack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PluginInformation plugin_information = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_information(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.CslValidation csl_validation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_csl_validation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.RequestStationInfo request_station_info = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_station_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.TriggerDisconnect trigger_disconnect = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_disconnect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.PlaneRemovedFromSim plane_removed_from_sim = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_plane_removed_from_sim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.Wrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .xpilot.XplaneData xplane_data = 2;
  if (_internal_has_xplane_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::xplane_data(this), target, stream);
  }

  // .xpilot.PositionUpdate position_update = 3;
  if (_internal_has_position_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position_update(this), target, stream);
  }

  // .xpilot.FastPositionUpdate fast_position_update = 4;
  if (_internal_has_fast_position_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fast_position_update(this), target, stream);
  }

  // .xpilot.AirplaneConfig airplane_config = 5;
  if (_internal_has_airplane_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::airplane_config(this), target, stream);
  }

  // .xpilot.AddPlane add_plane = 6;
  if (_internal_has_add_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::add_plane(this), target, stream);
  }

  // .xpilot.PlaneAddedToSim plane_added_to_sim = 7;
  if (_internal_has_plane_added_to_sim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::plane_added_to_sim(this), target, stream);
  }

  // .xpilot.ChangePlaneModel change_plane_model = 8;
  if (_internal_has_change_plane_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::change_plane_model(this), target, stream);
  }

  // .xpilot.DeletePlane delete_plane = 9;
  if (_internal_has_delete_plane()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::delete_plane(this), target, stream);
  }

  // .xpilot.PrivateMessageReceived private_message_received = 10;
  if (_internal_has_private_message_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::private_message_received(this), target, stream);
  }

  // .xpilot.PrivateMessageSent private_message_sent = 11;
  if (_internal_has_private_message_sent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::private_message_sent(this), target, stream);
  }

  // .xpilot.RadioMessageReceived radio_message_received = 12;
  if (_internal_has_radio_message_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::radio_message_received(this), target, stream);
  }

  // .xpilot.RadioMessageSent radio_message_sent = 13;
  if (_internal_has_radio_message_sent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::radio_message_sent(this), target, stream);
  }

  // .xpilot.NetworkConnected network_connected = 14;
  if (_internal_has_network_connected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::network_connected(this), target, stream);
  }

  // .xpilot.NetworkDisconnected network_disconnected = 15;
  if (_internal_has_network_disconnected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::network_disconnected(this), target, stream);
  }

  // .xpilot.NearbyControllers nearby_controllers = 16;
  if (_internal_has_nearby_controllers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::nearby_controllers(this), target, stream);
  }

  // .xpilot.SetTransponder set_transponder = 17;
  if (_internal_has_set_transponder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::set_transponder(this), target, stream);
  }

  // .xpilot.SetRadioStack set_radiostack = 18;
  if (_internal_has_set_radiostack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::set_radiostack(this), target, stream);
  }

  // .xpilot.PluginInformation plugin_information = 19;
  if (_internal_has_plugin_information()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::plugin_information(this), target, stream);
  }

  // .xpilot.CslValidation csl_validation = 20;
  if (_internal_has_csl_validation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::csl_validation(this), target, stream);
  }

  // .xpilot.RequestStationInfo request_station_info = 21;
  if (_internal_has_request_station_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::request_station_info(this), target, stream);
  }

  // .xpilot.TriggerDisconnect trigger_disconnect = 22;
  if (_internal_has_trigger_disconnect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::trigger_disconnect(this), target, stream);
  }

  // .xpilot.PlaneRemovedFromSim plane_removed_from_sim = 23;
  if (_internal_has_plane_removed_from_sim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::plane_removed_from_sim(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.Wrapper)
  return target;
}

size_t Wrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.Wrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  switch (msg_case()) {
    // .xpilot.XplaneData xplane_data = 2;
    case kXplaneData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.xplane_data_);
      break;
    }
    // .xpilot.PositionUpdate position_update = 3;
    case kPositionUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.position_update_);
      break;
    }
    // .xpilot.FastPositionUpdate fast_position_update = 4;
    case kFastPositionUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.fast_position_update_);
      break;
    }
    // .xpilot.AirplaneConfig airplane_config = 5;
    case kAirplaneConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.airplane_config_);
      break;
    }
    // .xpilot.AddPlane add_plane = 6;
    case kAddPlane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.add_plane_);
      break;
    }
    // .xpilot.PlaneAddedToSim plane_added_to_sim = 7;
    case kPlaneAddedToSim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.plane_added_to_sim_);
      break;
    }
    // .xpilot.ChangePlaneModel change_plane_model = 8;
    case kChangePlaneModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.change_plane_model_);
      break;
    }
    // .xpilot.DeletePlane delete_plane = 9;
    case kDeletePlane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.delete_plane_);
      break;
    }
    // .xpilot.PrivateMessageReceived private_message_received = 10;
    case kPrivateMessageReceived: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.private_message_received_);
      break;
    }
    // .xpilot.PrivateMessageSent private_message_sent = 11;
    case kPrivateMessageSent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.private_message_sent_);
      break;
    }
    // .xpilot.RadioMessageReceived radio_message_received = 12;
    case kRadioMessageReceived: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.radio_message_received_);
      break;
    }
    // .xpilot.RadioMessageSent radio_message_sent = 13;
    case kRadioMessageSent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.radio_message_sent_);
      break;
    }
    // .xpilot.NetworkConnected network_connected = 14;
    case kNetworkConnected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.network_connected_);
      break;
    }
    // .xpilot.NetworkDisconnected network_disconnected = 15;
    case kNetworkDisconnected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.network_disconnected_);
      break;
    }
    // .xpilot.NearbyControllers nearby_controllers = 16;
    case kNearbyControllers: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.nearby_controllers_);
      break;
    }
    // .xpilot.SetTransponder set_transponder = 17;
    case kSetTransponder: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.set_transponder_);
      break;
    }
    // .xpilot.SetRadioStack set_radiostack = 18;
    case kSetRadiostack: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.set_radiostack_);
      break;
    }
    // .xpilot.PluginInformation plugin_information = 19;
    case kPluginInformation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.plugin_information_);
      break;
    }
    // .xpilot.CslValidation csl_validation = 20;
    case kCslValidation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.csl_validation_);
      break;
    }
    // .xpilot.RequestStationInfo request_station_info = 21;
    case kRequestStationInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.request_station_info_);
      break;
    }
    // .xpilot.TriggerDisconnect trigger_disconnect = 22;
    case kTriggerDisconnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.trigger_disconnect_);
      break;
    }
    // .xpilot.PlaneRemovedFromSim plane_removed_from_sim = 23;
    case kPlaneRemovedFromSim: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.plane_removed_from_sim_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.Wrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const Wrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.Wrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.Wrapper)
    MergeFrom(*source);
  }
}

void Wrapper::MergeFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.Wrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  switch (from.msg_case()) {
    case kXplaneData: {
      _internal_mutable_xplane_data()->::xpilot::XplaneData::MergeFrom(from._internal_xplane_data());
      break;
    }
    case kPositionUpdate: {
      _internal_mutable_position_update()->::xpilot::PositionUpdate::MergeFrom(from._internal_position_update());
      break;
    }
    case kFastPositionUpdate: {
      _internal_mutable_fast_position_update()->::xpilot::FastPositionUpdate::MergeFrom(from._internal_fast_position_update());
      break;
    }
    case kAirplaneConfig: {
      _internal_mutable_airplane_config()->::xpilot::AirplaneConfig::MergeFrom(from._internal_airplane_config());
      break;
    }
    case kAddPlane: {
      _internal_mutable_add_plane()->::xpilot::AddPlane::MergeFrom(from._internal_add_plane());
      break;
    }
    case kPlaneAddedToSim: {
      _internal_mutable_plane_added_to_sim()->::xpilot::PlaneAddedToSim::MergeFrom(from._internal_plane_added_to_sim());
      break;
    }
    case kChangePlaneModel: {
      _internal_mutable_change_plane_model()->::xpilot::ChangePlaneModel::MergeFrom(from._internal_change_plane_model());
      break;
    }
    case kDeletePlane: {
      _internal_mutable_delete_plane()->::xpilot::DeletePlane::MergeFrom(from._internal_delete_plane());
      break;
    }
    case kPrivateMessageReceived: {
      _internal_mutable_private_message_received()->::xpilot::PrivateMessageReceived::MergeFrom(from._internal_private_message_received());
      break;
    }
    case kPrivateMessageSent: {
      _internal_mutable_private_message_sent()->::xpilot::PrivateMessageSent::MergeFrom(from._internal_private_message_sent());
      break;
    }
    case kRadioMessageReceived: {
      _internal_mutable_radio_message_received()->::xpilot::RadioMessageReceived::MergeFrom(from._internal_radio_message_received());
      break;
    }
    case kRadioMessageSent: {
      _internal_mutable_radio_message_sent()->::xpilot::RadioMessageSent::MergeFrom(from._internal_radio_message_sent());
      break;
    }
    case kNetworkConnected: {
      _internal_mutable_network_connected()->::xpilot::NetworkConnected::MergeFrom(from._internal_network_connected());
      break;
    }
    case kNetworkDisconnected: {
      _internal_mutable_network_disconnected()->::xpilot::NetworkDisconnected::MergeFrom(from._internal_network_disconnected());
      break;
    }
    case kNearbyControllers: {
      _internal_mutable_nearby_controllers()->::xpilot::NearbyControllers::MergeFrom(from._internal_nearby_controllers());
      break;
    }
    case kSetTransponder: {
      _internal_mutable_set_transponder()->::xpilot::SetTransponder::MergeFrom(from._internal_set_transponder());
      break;
    }
    case kSetRadiostack: {
      _internal_mutable_set_radiostack()->::xpilot::SetRadioStack::MergeFrom(from._internal_set_radiostack());
      break;
    }
    case kPluginInformation: {
      _internal_mutable_plugin_information()->::xpilot::PluginInformation::MergeFrom(from._internal_plugin_information());
      break;
    }
    case kCslValidation: {
      _internal_mutable_csl_validation()->::xpilot::CslValidation::MergeFrom(from._internal_csl_validation());
      break;
    }
    case kRequestStationInfo: {
      _internal_mutable_request_station_info()->::xpilot::RequestStationInfo::MergeFrom(from._internal_request_station_info());
      break;
    }
    case kTriggerDisconnect: {
      _internal_mutable_trigger_disconnect()->::xpilot::TriggerDisconnect::MergeFrom(from._internal_trigger_disconnect());
      break;
    }
    case kPlaneRemovedFromSim: {
      _internal_mutable_plane_removed_from_sim()->::xpilot::PlaneRemovedFromSim::MergeFrom(from._internal_plane_removed_from_sim());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void Wrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrapper::CopyFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrapper::IsInitialized() const {
  return true;
}

void Wrapper::InternalSwap(Wrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::Wrapper* Arena::CreateMaybeMessage< ::xpilot::Wrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::Wrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
