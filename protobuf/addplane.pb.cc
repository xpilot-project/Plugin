// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AddPlane.proto

#include "AddPlane.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr AddPlane_AircraftVisualState::AddPlane_AircraftVisualState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , altitude_(0)
  , pitch_(0)
  , heading_(0)
  , bank_(0){}
struct AddPlane_AircraftVisualStateDefaultTypeInternal {
  constexpr AddPlane_AircraftVisualStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddPlane_AircraftVisualStateDefaultTypeInternal() {}
  union {
    AddPlane_AircraftVisualState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddPlane_AircraftVisualStateDefaultTypeInternal _AddPlane_AircraftVisualState_default_instance_;
constexpr AddPlane::AddPlane(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , airline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , equipment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , visual_state_(nullptr){}
struct AddPlaneDefaultTypeInternal {
  constexpr AddPlaneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddPlaneDefaultTypeInternal() {}
  union {
    AddPlane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddPlaneDefaultTypeInternal _AddPlane_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AddPlane_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AddPlane_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AddPlane_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AddPlane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane_AircraftVisualState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane_AircraftVisualState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane_AircraftVisualState, latitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane_AircraftVisualState, longitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane_AircraftVisualState, altitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane_AircraftVisualState, pitch_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane_AircraftVisualState, heading_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane_AircraftVisualState, bank_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane, callsign_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane, visual_state_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane, airline_),
  PROTOBUF_FIELD_OFFSET(::xpilot::AddPlane, equipment_),
  0,
  3,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::xpilot::AddPlane_AircraftVisualState)},
  { 17, 26, sizeof(::xpilot::AddPlane)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_AddPlane_AircraftVisualState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_AddPlane_default_instance_),
};

const char descriptor_table_protodef_AddPlane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016AddPlane.proto\022\006xpilot\"\252\003\n\010AddPlane\022\025\n"
  "\010callsign\030\001 \001(\tH\000\210\001\001\022\?\n\014visual_state\030\002 \001"
  "(\0132$.xpilot.AddPlane.AircraftVisualState"
  "H\001\210\001\001\022\024\n\007airline\030\003 \001(\tH\002\210\001\001\022\026\n\tequipment"
  "\030\004 \001(\tH\003\210\001\001\032\337\001\n\023AircraftVisualState\022\025\n\010l"
  "atitude\030\001 \001(\001H\000\210\001\001\022\026\n\tlongitude\030\002 \001(\001H\001\210"
  "\001\001\022\025\n\010altitude\030\003 \001(\001H\002\210\001\001\022\022\n\005pitch\030\004 \001(\001"
  "H\003\210\001\001\022\024\n\007heading\030\005 \001(\001H\004\210\001\001\022\021\n\004bank\030\006 \001("
  "\001H\005\210\001\001B\013\n\t_latitudeB\014\n\n_longitudeB\013\n\t_al"
  "titudeB\010\n\006_pitchB\n\n\010_headingB\007\n\005_bankB\013\n"
  "\t_callsignB\017\n\r_visual_stateB\n\n\010_airlineB"
  "\014\n\n_equipmentB\031\252\002\026Vatsim.Xpilot.Protobuf"
  "b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AddPlane_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AddPlane_2eproto = {
  false, false, 488, descriptor_table_protodef_AddPlane_2eproto, "AddPlane.proto", 
  &descriptor_table_AddPlane_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_AddPlane_2eproto::offsets,
  file_level_metadata_AddPlane_2eproto, file_level_enum_descriptors_AddPlane_2eproto, file_level_service_descriptors_AddPlane_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_AddPlane_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_AddPlane_2eproto);
  return descriptor_table_AddPlane_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_AddPlane_2eproto(&descriptor_table_AddPlane_2eproto);
namespace xpilot {

// ===================================================================

class AddPlane_AircraftVisualState::_Internal {
 public:
  using HasBits = decltype(std::declval<AddPlane_AircraftVisualState>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bank(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

AddPlane_AircraftVisualState::AddPlane_AircraftVisualState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.AddPlane.AircraftVisualState)
}
AddPlane_AircraftVisualState::AddPlane_AircraftVisualState(const AddPlane_AircraftVisualState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&bank_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(bank_));
  // @@protoc_insertion_point(copy_constructor:xpilot.AddPlane.AircraftVisualState)
}

void AddPlane_AircraftVisualState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bank_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(bank_));
}

AddPlane_AircraftVisualState::~AddPlane_AircraftVisualState() {
  // @@protoc_insertion_point(destructor:xpilot.AddPlane.AircraftVisualState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPlane_AircraftVisualState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddPlane_AircraftVisualState::ArenaDtor(void* object) {
  AddPlane_AircraftVisualState* _this = reinterpret_cast< AddPlane_AircraftVisualState* >(object);
  (void)_this;
}
void AddPlane_AircraftVisualState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPlane_AircraftVisualState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPlane_AircraftVisualState::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.AddPlane.AircraftVisualState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bank_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(bank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPlane_AircraftVisualState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_bank(&has_bits);
          bank_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPlane_AircraftVisualState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.AddPlane.AircraftVisualState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (_internal_has_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (_internal_has_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double altitude = 3;
  if (_internal_has_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  // double pitch = 4;
  if (_internal_has_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_pitch(), target);
  }

  // double heading = 5;
  if (_internal_has_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  // double bank = 6;
  if (_internal_has_bank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_bank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.AddPlane.AircraftVisualState)
  return target;
}

size_t AddPlane_AircraftVisualState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.AddPlane.AircraftVisualState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // double latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // double longitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // double altitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // double pitch = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // double heading = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // double bank = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPlane_AircraftVisualState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.AddPlane.AircraftVisualState)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPlane_AircraftVisualState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPlane_AircraftVisualState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.AddPlane.AircraftVisualState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.AddPlane.AircraftVisualState)
    MergeFrom(*source);
  }
}

void AddPlane_AircraftVisualState::MergeFrom(const AddPlane_AircraftVisualState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.AddPlane.AircraftVisualState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000020u) {
      bank_ = from.bank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddPlane_AircraftVisualState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.AddPlane.AircraftVisualState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlane_AircraftVisualState::CopyFrom(const AddPlane_AircraftVisualState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.AddPlane.AircraftVisualState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlane_AircraftVisualState::IsInitialized() const {
  return true;
}

void AddPlane_AircraftVisualState::InternalSwap(AddPlane_AircraftVisualState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPlane_AircraftVisualState, bank_)
      + sizeof(AddPlane_AircraftVisualState::bank_)
      - PROTOBUF_FIELD_OFFSET(AddPlane_AircraftVisualState, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPlane_AircraftVisualState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddPlane::_Internal {
 public:
  using HasBits = decltype(std::declval<AddPlane>()._has_bits_);
  static void set_has_callsign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xpilot::AddPlane_AircraftVisualState& visual_state(const AddPlane* msg);
  static void set_has_visual_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_airline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_equipment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::xpilot::AddPlane_AircraftVisualState&
AddPlane::_Internal::visual_state(const AddPlane* msg) {
  return *msg->visual_state_;
}
AddPlane::AddPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.AddPlane)
}
AddPlane::AddPlane(const AddPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callsign()) {
    callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callsign(), 
      GetArena());
  }
  airline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_airline()) {
    airline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_airline(), 
      GetArena());
  }
  equipment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_equipment()) {
    equipment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_equipment(), 
      GetArena());
  }
  if (from._internal_has_visual_state()) {
    visual_state_ = new ::xpilot::AddPlane_AircraftVisualState(*from.visual_state_);
  } else {
    visual_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xpilot.AddPlane)
}

void AddPlane::SharedCtor() {
callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
airline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
equipment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
visual_state_ = nullptr;
}

AddPlane::~AddPlane() {
  // @@protoc_insertion_point(destructor:xpilot.AddPlane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddPlane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  airline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete visual_state_;
}

void AddPlane::ArenaDtor(void* object) {
  AddPlane* _this = reinterpret_cast< AddPlane* >(object);
  (void)_this;
}
void AddPlane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddPlane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.AddPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      callsign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      airline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      equipment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && visual_state_ != nullptr) {
        delete visual_state_;
      }
      visual_state_ = nullptr;
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPlane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string callsign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AddPlane.callsign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.AddPlane.AircraftVisualState visual_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_visual_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string airline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_airline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AddPlane.airline"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string equipment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_equipment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.AddPlane.equipment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddPlane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.AddPlane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string callsign = 1;
  if (_internal_has_callsign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callsign().data(), static_cast<int>(this->_internal_callsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AddPlane.callsign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_callsign(), target);
  }

  // .xpilot.AddPlane.AircraftVisualState visual_state = 2;
  if (_internal_has_visual_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::visual_state(this), target, stream);
  }

  // string airline = 3;
  if (_internal_has_airline()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_airline().data(), static_cast<int>(this->_internal_airline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AddPlane.airline");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_airline(), target);
  }

  // string equipment = 4;
  if (_internal_has_equipment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_equipment().data(), static_cast<int>(this->_internal_equipment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.AddPlane.equipment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_equipment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.AddPlane)
  return target;
}

size_t AddPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.AddPlane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string callsign = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callsign());
    }

    // string airline = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_airline());
    }

    // string equipment = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_equipment());
    }

    // .xpilot.AddPlane.AircraftVisualState visual_state = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visual_state_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddPlane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.AddPlane)
  GOOGLE_DCHECK_NE(&from, this);
  const AddPlane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddPlane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.AddPlane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.AddPlane)
    MergeFrom(*source);
  }
}

void AddPlane::MergeFrom(const AddPlane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.AddPlane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_callsign(from._internal_callsign());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_airline(from._internal_airline());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_equipment(from._internal_equipment());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_visual_state()->::xpilot::AddPlane_AircraftVisualState::MergeFrom(from._internal_visual_state());
    }
  }
}

void AddPlane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.AddPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlane::CopyFrom(const AddPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.AddPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlane::IsInitialized() const {
  return true;
}

void AddPlane::InternalSwap(AddPlane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  callsign_.Swap(&other->callsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  airline_.Swap(&other->airline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipment_.Swap(&other->equipment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(visual_state_, other->visual_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPlane::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::AddPlane_AircraftVisualState* Arena::CreateMaybeMessage< ::xpilot::AddPlane_AircraftVisualState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::AddPlane_AircraftVisualState >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::AddPlane* Arena::CreateMaybeMessage< ::xpilot::AddPlane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::AddPlane >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
