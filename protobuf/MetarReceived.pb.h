// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetarReceived.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MetarReceived_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MetarReceived_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MetarReceived_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MetarReceived_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MetarReceived_2eproto;
namespace xpilot {
class MetarReceived;
struct MetarReceivedDefaultTypeInternal;
extern MetarReceivedDefaultTypeInternal _MetarReceived_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::MetarReceived* Arena::CreateMaybeMessage<::xpilot::MetarReceived>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class MetarReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.MetarReceived) */ {
 public:
  inline MetarReceived() : MetarReceived(nullptr) {}
  ~MetarReceived() override;
  explicit constexpr MetarReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetarReceived(const MetarReceived& from);
  MetarReceived(MetarReceived&& from) noexcept
    : MetarReceived() {
    *this = ::std::move(from);
  }

  inline MetarReceived& operator=(const MetarReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetarReceived& operator=(MetarReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetarReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetarReceived* internal_default_instance() {
    return reinterpret_cast<const MetarReceived*>(
               &_MetarReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetarReceived& a, MetarReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(MetarReceived* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetarReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetarReceived* New() const final {
    return new MetarReceived();
  }

  MetarReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetarReceived>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetarReceived& from);
  void MergeFrom(const MetarReceived& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetarReceived* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.MetarReceived";
  }
  protected:
  explicit MetarReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationFieldNumber = 2,
    kMetarFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // optional string station = 2;
  bool has_station() const;
  private:
  bool _internal_has_station() const;
  public:
  void clear_station();
  const std::string& station() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_station(ArgT0&& arg0, ArgT... args);
  std::string* mutable_station();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_station();
  void set_allocated_station(std::string* station);
  private:
  const std::string& _internal_station() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_station(const std::string& value);
  std::string* _internal_mutable_station();
  public:

  // optional string metar = 3;
  bool has_metar() const;
  private:
  bool _internal_has_metar() const;
  public:
  void clear_metar();
  const std::string& metar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metar();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_metar();
  void set_allocated_metar(std::string* metar);
  private:
  const std::string& _internal_metar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metar(const std::string& value);
  std::string* _internal_mutable_metar();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:xpilot.MetarReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metar_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  friend struct ::TableStruct_MetarReceived_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetarReceived

// .google.protobuf.Timestamp timestamp = 1;
inline bool MetarReceived::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool MetarReceived::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MetarReceived::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MetarReceived::timestamp() const {
  // @@protoc_insertion_point(field_get:xpilot.MetarReceived.timestamp)
  return _internal_timestamp();
}
inline void MetarReceived::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.MetarReceived.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MetarReceived::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MetarReceived::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:xpilot.MetarReceived.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MetarReceived::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MetarReceived::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:xpilot.MetarReceived.timestamp)
  return _internal_mutable_timestamp();
}
inline void MetarReceived::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:xpilot.MetarReceived.timestamp)
}

// optional string station = 2;
inline bool MetarReceived::_internal_has_station() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetarReceived::has_station() const {
  return _internal_has_station();
}
inline void MetarReceived::clear_station() {
  station_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetarReceived::station() const {
  // @@protoc_insertion_point(field_get:xpilot.MetarReceived.station)
  return _internal_station();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetarReceived::set_station(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 station_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.MetarReceived.station)
}
inline std::string* MetarReceived::mutable_station() {
  // @@protoc_insertion_point(field_mutable:xpilot.MetarReceived.station)
  return _internal_mutable_station();
}
inline const std::string& MetarReceived::_internal_station() const {
  return station_.Get();
}
inline void MetarReceived::_internal_set_station(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  station_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetarReceived::_internal_mutable_station() {
  _has_bits_[0] |= 0x00000001u;
  return station_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetarReceived::release_station() {
  // @@protoc_insertion_point(field_release:xpilot.MetarReceived.station)
  if (!_internal_has_station()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return station_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetarReceived::set_allocated_station(std::string* station) {
  if (station != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  station_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), station,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.MetarReceived.station)
}

// optional string metar = 3;
inline bool MetarReceived::_internal_has_metar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MetarReceived::has_metar() const {
  return _internal_has_metar();
}
inline void MetarReceived::clear_metar() {
  metar_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MetarReceived::metar() const {
  // @@protoc_insertion_point(field_get:xpilot.MetarReceived.metar)
  return _internal_metar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetarReceived::set_metar(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 metar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.MetarReceived.metar)
}
inline std::string* MetarReceived::mutable_metar() {
  // @@protoc_insertion_point(field_mutable:xpilot.MetarReceived.metar)
  return _internal_mutable_metar();
}
inline const std::string& MetarReceived::_internal_metar() const {
  return metar_.Get();
}
inline void MetarReceived::_internal_set_metar(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  metar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MetarReceived::_internal_mutable_metar() {
  _has_bits_[0] |= 0x00000002u;
  return metar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MetarReceived::release_metar() {
  // @@protoc_insertion_point(field_release:xpilot.MetarReceived.metar)
  if (!_internal_has_metar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return metar_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MetarReceived::set_allocated_metar(std::string* metar) {
  if (metar != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metar,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.MetarReceived.metar)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MetarReceived_2eproto
