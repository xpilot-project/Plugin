// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XplaneData.proto

#include "XplaneData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr XplaneData_UserAircraftData::XplaneData_UserAircraftData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : longitude_(0)
  , latitude_(0)
  , altitude_msl_(0)
  , altitude_agl_(0)
  , ground_speed_(0)
  , pitch_(0)
  , roll_(0)
  , yaw_(0)
  , velocity_latitude_(0)
  , velocity_altitude_(0)
  , velocity_longitude_(0)
  , velocity_pitch_(0)
  , velocity_heading_(0)
  , velocity_bank_(0){}
struct XplaneData_UserAircraftDataDefaultTypeInternal {
  constexpr XplaneData_UserAircraftDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XplaneData_UserAircraftDataDefaultTypeInternal() {}
  union {
    XplaneData_UserAircraftData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XplaneData_UserAircraftDataDefaultTypeInternal _XplaneData_UserAircraftData_default_instance_;
constexpr XplaneData_UserAircraftConfigData::XplaneData_UserAircraftConfigData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beacon_lights_on_(false)
  , landing_lights_on_(false)
  , nav_lights_on_(false)
  , strobe_lights_on_(false)
  , taxi_lights_on_(false)
  , gear_down_(false)
  , engine1_running_(false)
  , engine2_running_(false)
  , flaps_(0)
  , speed_brakes_(0)
  , engine_count_(0)
  , engine3_running_(false)
  , engine4_running_(false)
  , on_ground_(false){}
struct XplaneData_UserAircraftConfigDataDefaultTypeInternal {
  constexpr XplaneData_UserAircraftConfigDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XplaneData_UserAircraftConfigDataDefaultTypeInternal() {}
  union {
    XplaneData_UserAircraftConfigData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XplaneData_UserAircraftConfigDataDefaultTypeInternal _XplaneData_UserAircraftConfigData_default_instance_;
constexpr XplaneData_RadioStack::XplaneData_RadioStack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_com_selection_(0)
  , com1_freq_(0)
  , com1_volume_(0)
  , com1_power_(false)
  , com1_audio_selection_(false)
  , com2_power_(false)
  , com2_audio_selection_(false)
  , com2_freq_(0)
  , com2_volume_(0)
  , transponder_code_(0)
  , transponder_mode_(0)
  , avionics_power_on_(false)
  , transponder_ident_(false)
  , ptt_pressed_(false){}
struct XplaneData_RadioStackDefaultTypeInternal {
  constexpr XplaneData_RadioStackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XplaneData_RadioStackDefaultTypeInternal() {}
  union {
    XplaneData_RadioStack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XplaneData_RadioStackDefaultTypeInternal _XplaneData_RadioStack_default_instance_;
constexpr XplaneData::XplaneData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_aircraft_data_(nullptr)
  , user_aircraft_config_(nullptr)
  , radio_stack_(nullptr)
  , replay_mode_(false){}
struct XplaneDataDefaultTypeInternal {
  constexpr XplaneDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XplaneDataDefaultTypeInternal() {}
  union {
    XplaneData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XplaneDataDefaultTypeInternal _XplaneData_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_XplaneData_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_XplaneData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_XplaneData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_XplaneData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, longitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, latitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, altitude_msl_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, altitude_agl_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, ground_speed_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, pitch_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, roll_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, yaw_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, velocity_latitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, velocity_altitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, velocity_longitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, velocity_pitch_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftData, velocity_bank_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, beacon_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, landing_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, nav_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, strobe_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, taxi_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, flaps_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, gear_down_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, speed_brakes_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, engine_count_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, engine1_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, engine2_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, engine3_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, engine4_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_UserAircraftConfigData, on_ground_),
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  9,
  10,
  6,
  7,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, audio_com_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, com1_power_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, com1_freq_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, com1_audio_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, com1_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, com2_power_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, com2_freq_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, com2_audio_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, com2_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, avionics_power_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, transponder_code_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, transponder_mode_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, transponder_ident_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData_RadioStack, ptt_pressed_),
  0,
  3,
  1,
  4,
  2,
  5,
  7,
  6,
  8,
  11,
  9,
  10,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData, user_aircraft_data_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData, user_aircraft_config_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData, radio_stack_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneData, replay_mode_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::xpilot::XplaneData_UserAircraftData)},
  { 33, 52, sizeof(::xpilot::XplaneData_UserAircraftConfigData)},
  { 66, 85, sizeof(::xpilot::XplaneData_RadioStack)},
  { 99, 108, sizeof(::xpilot::XplaneData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_XplaneData_UserAircraftData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_XplaneData_UserAircraftConfigData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_XplaneData_RadioStack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_XplaneData_default_instance_),
};

const char descriptor_table_protodef_XplaneData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020XplaneData.proto\022\006xpilot\"\200\022\n\nXplaneDat"
  "a\022D\n\022user_aircraft_data\030\001 \001(\0132#.xpilot.X"
  "planeData.UserAircraftDataH\000\210\001\001\022L\n\024user_"
  "aircraft_config\030\002 \001(\0132).xpilot.XplaneDat"
  "a.UserAircraftConfigDataH\001\210\001\001\0227\n\013radio_s"
  "tack\030\003 \001(\0132\035.xpilot.XplaneData.RadioStac"
  "kH\002\210\001\001\022\030\n\013replay_mode\030\004 \001(\010H\003\210\001\001\032\352\004\n\020Use"
  "rAircraftData\022\026\n\tlongitude\030\001 \001(\001H\000\210\001\001\022\025\n"
  "\010latitude\030\002 \001(\001H\001\210\001\001\022\031\n\014altitude_msl\030\003 \001"
  "(\001H\002\210\001\001\022\031\n\014altitude_agl\030\004 \001(\001H\003\210\001\001\022\031\n\014gr"
  "ound_speed\030\005 \001(\001H\004\210\001\001\022\022\n\005pitch\030\006 \001(\001H\005\210\001"
  "\001\022\021\n\004roll\030\007 \001(\001H\006\210\001\001\022\020\n\003yaw\030\010 \001(\001H\007\210\001\001\022\036"
  "\n\021velocity_latitude\030\t \001(\001H\010\210\001\001\022\036\n\021veloci"
  "ty_altitude\030\n \001(\001H\t\210\001\001\022\037\n\022velocity_longi"
  "tude\030\013 \001(\001H\n\210\001\001\022\033\n\016velocity_pitch\030\014 \001(\001H"
  "\013\210\001\001\022\035\n\020velocity_heading\030\r \001(\001H\014\210\001\001\022\032\n\rv"
  "elocity_bank\030\016 \001(\001H\r\210\001\001B\014\n\n_longitudeB\013\n"
  "\t_latitudeB\017\n\r_altitude_mslB\017\n\r_altitude"
  "_aglB\017\n\r_ground_speedB\010\n\006_pitchB\007\n\005_roll"
  "B\006\n\004_yawB\024\n\022_velocity_latitudeB\024\n\022_veloc"
  "ity_altitudeB\025\n\023_velocity_longitudeB\021\n\017_"
  "velocity_pitchB\023\n\021_velocity_headingB\020\n\016_"
  "velocity_bank\032\236\005\n\026UserAircraftConfigData"
  "\022\035\n\020beacon_lights_on\030\001 \001(\010H\000\210\001\001\022\036\n\021landi"
  "ng_lights_on\030\002 \001(\010H\001\210\001\001\022\032\n\rnav_lights_on"
  "\030\003 \001(\010H\002\210\001\001\022\035\n\020strobe_lights_on\030\004 \001(\010H\003\210"
  "\001\001\022\033\n\016taxi_lights_on\030\005 \001(\010H\004\210\001\001\022\022\n\005flaps"
  "\030\006 \001(\001H\005\210\001\001\022\026\n\tgear_down\030\007 \001(\010H\006\210\001\001\022\031\n\014s"
  "peed_brakes\030\010 \001(\001H\007\210\001\001\022\031\n\014engine_count\030\t"
  " \001(\005H\010\210\001\001\022\034\n\017engine1_running\030\n \001(\010H\t\210\001\001\022"
  "\034\n\017engine2_running\030\013 \001(\010H\n\210\001\001\022\034\n\017engine3"
  "_running\030\014 \001(\010H\013\210\001\001\022\034\n\017engine4_running\030\r"
  " \001(\010H\014\210\001\001\022\026\n\ton_ground\030\016 \001(\010H\r\210\001\001B\023\n\021_be"
  "acon_lights_onB\024\n\022_landing_lights_onB\020\n\016"
  "_nav_lights_onB\023\n\021_strobe_lights_onB\021\n\017_"
  "taxi_lights_onB\010\n\006_flapsB\014\n\n_gear_downB\017"
  "\n\r_speed_brakesB\017\n\r_engine_countB\022\n\020_eng"
  "ine1_runningB\022\n\020_engine2_runningB\022\n\020_eng"
  "ine3_runningB\022\n\020_engine4_runningB\014\n\n_on_"
  "ground\032\254\005\n\nRadioStack\022 \n\023audio_com_selec"
  "tion\030\001 \001(\005H\000\210\001\001\022\027\n\ncom1_power\030\002 \001(\010H\001\210\001\001"
  "\022\026\n\tcom1_freq\030\003 \001(\005H\002\210\001\001\022!\n\024com1_audio_s"
  "election\030\004 \001(\010H\003\210\001\001\022\030\n\013com1_volume\030\005 \001(\002"
  "H\004\210\001\001\022\027\n\ncom2_power\030\006 \001(\010H\005\210\001\001\022\026\n\tcom2_f"
  "req\030\007 \001(\005H\006\210\001\001\022!\n\024com2_audio_selection\030\010"
  " \001(\010H\007\210\001\001\022\030\n\013com2_volume\030\t \001(\002H\010\210\001\001\022\036\n\021a"
  "vionics_power_on\030\n \001(\010H\t\210\001\001\022\035\n\020transpond"
  "er_code\030\013 \001(\005H\n\210\001\001\022\035\n\020transponder_mode\030\014"
  " \001(\005H\013\210\001\001\022\036\n\021transponder_ident\030\r \001(\010H\014\210\001"
  "\001\022\030\n\013ptt_pressed\030\016 \001(\010H\r\210\001\001B\026\n\024_audio_co"
  "m_selectionB\r\n\013_com1_powerB\014\n\n_com1_freq"
  "B\027\n\025_com1_audio_selectionB\016\n\014_com1_volum"
  "eB\r\n\013_com2_powerB\014\n\n_com2_freqB\027\n\025_com2_"
  "audio_selectionB\016\n\014_com2_volumeB\024\n\022_avio"
  "nics_power_onB\023\n\021_transponder_codeB\023\n\021_t"
  "ransponder_modeB\024\n\022_transponder_identB\016\n"
  "\014_ptt_pressedB\025\n\023_user_aircraft_dataB\027\n\025"
  "_user_aircraft_configB\016\n\014_radio_stackB\016\n"
  "\014_replay_modeB\031\252\002\026Vatsim.Xpilot.Protobuf"
  "b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_XplaneData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XplaneData_2eproto = {
  false, false, 2368, descriptor_table_protodef_XplaneData_2eproto, "XplaneData.proto", 
  &descriptor_table_XplaneData_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_XplaneData_2eproto::offsets,
  file_level_metadata_XplaneData_2eproto, file_level_enum_descriptors_XplaneData_2eproto, file_level_service_descriptors_XplaneData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_XplaneData_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_XplaneData_2eproto);
  return descriptor_table_XplaneData_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_XplaneData_2eproto(&descriptor_table_XplaneData_2eproto);
namespace xpilot {

// ===================================================================

class XplaneData_UserAircraftData::_Internal {
 public:
  using HasBits = decltype(std::declval<XplaneData_UserAircraftData>()._has_bits_);
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_altitude_msl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_altitude_agl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ground_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_velocity_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_velocity_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_velocity_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_velocity_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_velocity_bank(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

XplaneData_UserAircraftData::XplaneData_UserAircraftData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.XplaneData.UserAircraftData)
}
XplaneData_UserAircraftData::XplaneData_UserAircraftData(const XplaneData_UserAircraftData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_bank_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(velocity_bank_));
  // @@protoc_insertion_point(copy_constructor:xpilot.XplaneData.UserAircraftData)
}

void XplaneData_UserAircraftData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&longitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&velocity_bank_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(velocity_bank_));
}

XplaneData_UserAircraftData::~XplaneData_UserAircraftData() {
  // @@protoc_insertion_point(destructor:xpilot.XplaneData.UserAircraftData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XplaneData_UserAircraftData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XplaneData_UserAircraftData::ArenaDtor(void* object) {
  XplaneData_UserAircraftData* _this = reinterpret_cast< XplaneData_UserAircraftData* >(object);
  (void)_this;
}
void XplaneData_UserAircraftData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XplaneData_UserAircraftData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XplaneData_UserAircraftData::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.XplaneData.UserAircraftData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(yaw_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&velocity_latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&velocity_bank_) -
        reinterpret_cast<char*>(&velocity_latitude_)) + sizeof(velocity_bank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XplaneData_UserAircraftData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude_msl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_altitude_msl(&has_bits);
          altitude_msl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude_agl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_altitude_agl(&has_bits);
          altitude_agl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ground_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ground_speed(&has_bits);
          ground_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double roll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yaw = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_latitude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_velocity_latitude(&has_bits);
          velocity_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_altitude = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_velocity_altitude(&has_bits);
          velocity_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_longitude = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_velocity_longitude(&has_bits);
          velocity_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_pitch = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_velocity_pitch(&has_bits);
          velocity_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_heading = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_velocity_heading(&has_bits);
          velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_bank = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_velocity_bank(&has_bits);
          velocity_bank_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XplaneData_UserAircraftData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.XplaneData.UserAircraftData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (_internal_has_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  if (_internal_has_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double altitude_msl = 3;
  if (_internal_has_altitude_msl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude_msl(), target);
  }

  // double altitude_agl = 4;
  if (_internal_has_altitude_agl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_altitude_agl(), target);
  }

  // double ground_speed = 5;
  if (_internal_has_ground_speed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ground_speed(), target);
  }

  // double pitch = 6;
  if (_internal_has_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pitch(), target);
  }

  // double roll = 7;
  if (_internal_has_roll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_roll(), target);
  }

  // double yaw = 8;
  if (_internal_has_yaw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_yaw(), target);
  }

  // double velocity_latitude = 9;
  if (_internal_has_velocity_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_velocity_latitude(), target);
  }

  // double velocity_altitude = 10;
  if (_internal_has_velocity_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_velocity_altitude(), target);
  }

  // double velocity_longitude = 11;
  if (_internal_has_velocity_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_velocity_longitude(), target);
  }

  // double velocity_pitch = 12;
  if (_internal_has_velocity_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_velocity_pitch(), target);
  }

  // double velocity_heading = 13;
  if (_internal_has_velocity_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_velocity_heading(), target);
  }

  // double velocity_bank = 14;
  if (_internal_has_velocity_bank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_velocity_bank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.XplaneData.UserAircraftData)
  return target;
}

size_t XplaneData_UserAircraftData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.XplaneData.UserAircraftData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // double longitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // double latitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // double altitude_msl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // double altitude_agl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // double ground_speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // double pitch = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // double roll = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // double yaw = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // double velocity_latitude = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // double velocity_altitude = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // double velocity_longitude = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // double velocity_pitch = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // double velocity_heading = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // double velocity_bank = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XplaneData_UserAircraftData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.XplaneData.UserAircraftData)
  GOOGLE_DCHECK_NE(&from, this);
  const XplaneData_UserAircraftData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XplaneData_UserAircraftData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.XplaneData.UserAircraftData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.XplaneData.UserAircraftData)
    MergeFrom(*source);
  }
}

void XplaneData_UserAircraftData::MergeFrom(const XplaneData_UserAircraftData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.XplaneData.UserAircraftData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      altitude_msl_ = from.altitude_msl_;
    }
    if (cached_has_bits & 0x00000008u) {
      altitude_agl_ = from.altitude_agl_;
    }
    if (cached_has_bits & 0x00000010u) {
      ground_speed_ = from.ground_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000040u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000080u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      velocity_latitude_ = from.velocity_latitude_;
    }
    if (cached_has_bits & 0x00000200u) {
      velocity_altitude_ = from.velocity_altitude_;
    }
    if (cached_has_bits & 0x00000400u) {
      velocity_longitude_ = from.velocity_longitude_;
    }
    if (cached_has_bits & 0x00000800u) {
      velocity_pitch_ = from.velocity_pitch_;
    }
    if (cached_has_bits & 0x00001000u) {
      velocity_heading_ = from.velocity_heading_;
    }
    if (cached_has_bits & 0x00002000u) {
      velocity_bank_ = from.velocity_bank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void XplaneData_UserAircraftData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.XplaneData.UserAircraftData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XplaneData_UserAircraftData::CopyFrom(const XplaneData_UserAircraftData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.XplaneData.UserAircraftData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XplaneData_UserAircraftData::IsInitialized() const {
  return true;
}

void XplaneData_UserAircraftData::InternalSwap(XplaneData_UserAircraftData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XplaneData_UserAircraftData, velocity_bank_)
      + sizeof(XplaneData_UserAircraftData::velocity_bank_)
      - PROTOBUF_FIELD_OFFSET(XplaneData_UserAircraftData, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XplaneData_UserAircraftData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class XplaneData_UserAircraftConfigData::_Internal {
 public:
  using HasBits = decltype(std::declval<XplaneData_UserAircraftConfigData>()._has_bits_);
  static void set_has_beacon_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_landing_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nav_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strobe_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_taxi_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flaps(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gear_down(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speed_brakes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_engine_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_engine1_running(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_engine2_running(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_engine3_running(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_engine4_running(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_on_ground(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

XplaneData_UserAircraftConfigData::XplaneData_UserAircraftConfigData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.XplaneData.UserAircraftConfigData)
}
XplaneData_UserAircraftConfigData::XplaneData_UserAircraftConfigData(const XplaneData_UserAircraftConfigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&beacon_lights_on_, &from.beacon_lights_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_ground_) -
    reinterpret_cast<char*>(&beacon_lights_on_)) + sizeof(on_ground_));
  // @@protoc_insertion_point(copy_constructor:xpilot.XplaneData.UserAircraftConfigData)
}

void XplaneData_UserAircraftConfigData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&beacon_lights_on_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&on_ground_) -
    reinterpret_cast<char*>(&beacon_lights_on_)) + sizeof(on_ground_));
}

XplaneData_UserAircraftConfigData::~XplaneData_UserAircraftConfigData() {
  // @@protoc_insertion_point(destructor:xpilot.XplaneData.UserAircraftConfigData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XplaneData_UserAircraftConfigData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XplaneData_UserAircraftConfigData::ArenaDtor(void* object) {
  XplaneData_UserAircraftConfigData* _this = reinterpret_cast< XplaneData_UserAircraftConfigData* >(object);
  (void)_this;
}
void XplaneData_UserAircraftConfigData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XplaneData_UserAircraftConfigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XplaneData_UserAircraftConfigData::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.XplaneData.UserAircraftConfigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&beacon_lights_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine2_running_) -
        reinterpret_cast<char*>(&beacon_lights_on_)) + sizeof(engine2_running_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&flaps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&on_ground_) -
        reinterpret_cast<char*>(&flaps_)) + sizeof(on_ground_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XplaneData_UserAircraftConfigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool beacon_lights_on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_beacon_lights_on(&has_bits);
          beacon_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool landing_lights_on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_landing_lights_on(&has_bits);
          landing_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nav_lights_on = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nav_lights_on(&has_bits);
          nav_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strobe_lights_on = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_strobe_lights_on(&has_bits);
          strobe_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool taxi_lights_on = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_taxi_lights_on(&has_bits);
          taxi_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double flaps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_flaps(&has_bits);
          flaps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool gear_down = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gear_down(&has_bits);
          gear_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed_brakes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_speed_brakes(&has_bits);
          speed_brakes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 engine_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_engine_count(&has_bits);
          engine_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine1_running = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_engine1_running(&has_bits);
          engine1_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine2_running = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_engine2_running(&has_bits);
          engine2_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine3_running = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_engine3_running(&has_bits);
          engine3_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine4_running = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_engine4_running(&has_bits);
          engine4_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool on_ground = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_on_ground(&has_bits);
          on_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XplaneData_UserAircraftConfigData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.XplaneData.UserAircraftConfigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool beacon_lights_on = 1;
  if (_internal_has_beacon_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_beacon_lights_on(), target);
  }

  // bool landing_lights_on = 2;
  if (_internal_has_landing_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_landing_lights_on(), target);
  }

  // bool nav_lights_on = 3;
  if (_internal_has_nav_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_nav_lights_on(), target);
  }

  // bool strobe_lights_on = 4;
  if (_internal_has_strobe_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_strobe_lights_on(), target);
  }

  // bool taxi_lights_on = 5;
  if (_internal_has_taxi_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_taxi_lights_on(), target);
  }

  // double flaps = 6;
  if (_internal_has_flaps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_flaps(), target);
  }

  // bool gear_down = 7;
  if (_internal_has_gear_down()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_gear_down(), target);
  }

  // double speed_brakes = 8;
  if (_internal_has_speed_brakes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_speed_brakes(), target);
  }

  // int32 engine_count = 9;
  if (_internal_has_engine_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_engine_count(), target);
  }

  // bool engine1_running = 10;
  if (_internal_has_engine1_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_engine1_running(), target);
  }

  // bool engine2_running = 11;
  if (_internal_has_engine2_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_engine2_running(), target);
  }

  // bool engine3_running = 12;
  if (_internal_has_engine3_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_engine3_running(), target);
  }

  // bool engine4_running = 13;
  if (_internal_has_engine4_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_engine4_running(), target);
  }

  // bool on_ground = 14;
  if (_internal_has_on_ground()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_on_ground(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.XplaneData.UserAircraftConfigData)
  return target;
}

size_t XplaneData_UserAircraftConfigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.XplaneData.UserAircraftConfigData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // bool beacon_lights_on = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // bool landing_lights_on = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // bool nav_lights_on = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // bool strobe_lights_on = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // bool taxi_lights_on = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // bool gear_down = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // bool engine1_running = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // bool engine2_running = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // double flaps = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // double speed_brakes = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // int32 engine_count = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_engine_count());
    }

    // bool engine3_running = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // bool engine4_running = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // bool on_ground = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XplaneData_UserAircraftConfigData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.XplaneData.UserAircraftConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  const XplaneData_UserAircraftConfigData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XplaneData_UserAircraftConfigData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.XplaneData.UserAircraftConfigData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.XplaneData.UserAircraftConfigData)
    MergeFrom(*source);
  }
}

void XplaneData_UserAircraftConfigData::MergeFrom(const XplaneData_UserAircraftConfigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.XplaneData.UserAircraftConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      beacon_lights_on_ = from.beacon_lights_on_;
    }
    if (cached_has_bits & 0x00000002u) {
      landing_lights_on_ = from.landing_lights_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      nav_lights_on_ = from.nav_lights_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      strobe_lights_on_ = from.strobe_lights_on_;
    }
    if (cached_has_bits & 0x00000010u) {
      taxi_lights_on_ = from.taxi_lights_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      gear_down_ = from.gear_down_;
    }
    if (cached_has_bits & 0x00000040u) {
      engine1_running_ = from.engine1_running_;
    }
    if (cached_has_bits & 0x00000080u) {
      engine2_running_ = from.engine2_running_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      flaps_ = from.flaps_;
    }
    if (cached_has_bits & 0x00000200u) {
      speed_brakes_ = from.speed_brakes_;
    }
    if (cached_has_bits & 0x00000400u) {
      engine_count_ = from.engine_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      engine3_running_ = from.engine3_running_;
    }
    if (cached_has_bits & 0x00001000u) {
      engine4_running_ = from.engine4_running_;
    }
    if (cached_has_bits & 0x00002000u) {
      on_ground_ = from.on_ground_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void XplaneData_UserAircraftConfigData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.XplaneData.UserAircraftConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XplaneData_UserAircraftConfigData::CopyFrom(const XplaneData_UserAircraftConfigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.XplaneData.UserAircraftConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XplaneData_UserAircraftConfigData::IsInitialized() const {
  return true;
}

void XplaneData_UserAircraftConfigData::InternalSwap(XplaneData_UserAircraftConfigData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XplaneData_UserAircraftConfigData, on_ground_)
      + sizeof(XplaneData_UserAircraftConfigData::on_ground_)
      - PROTOBUF_FIELD_OFFSET(XplaneData_UserAircraftConfigData, beacon_lights_on_)>(
          reinterpret_cast<char*>(&beacon_lights_on_),
          reinterpret_cast<char*>(&other->beacon_lights_on_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XplaneData_UserAircraftConfigData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class XplaneData_RadioStack::_Internal {
 public:
  using HasBits = decltype(std::declval<XplaneData_RadioStack>()._has_bits_);
  static void set_has_audio_com_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_com1_power(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_com1_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_com1_audio_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_com1_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_com2_power(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_com2_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_com2_audio_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_com2_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_avionics_power_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_transponder_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transponder_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_transponder_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ptt_pressed(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

XplaneData_RadioStack::XplaneData_RadioStack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.XplaneData.RadioStack)
}
XplaneData_RadioStack::XplaneData_RadioStack(const XplaneData_RadioStack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&audio_com_selection_, &from.audio_com_selection_,
    static_cast<size_t>(reinterpret_cast<char*>(&ptt_pressed_) -
    reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(ptt_pressed_));
  // @@protoc_insertion_point(copy_constructor:xpilot.XplaneData.RadioStack)
}

void XplaneData_RadioStack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_com_selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ptt_pressed_) -
    reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(ptt_pressed_));
}

XplaneData_RadioStack::~XplaneData_RadioStack() {
  // @@protoc_insertion_point(destructor:xpilot.XplaneData.RadioStack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XplaneData_RadioStack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XplaneData_RadioStack::ArenaDtor(void* object) {
  XplaneData_RadioStack* _this = reinterpret_cast< XplaneData_RadioStack* >(object);
  (void)_this;
}
void XplaneData_RadioStack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XplaneData_RadioStack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XplaneData_RadioStack::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.XplaneData.RadioStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&audio_com_selection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&com2_freq_) -
        reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(com2_freq_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&com2_volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ptt_pressed_) -
        reinterpret_cast<char*>(&com2_volume_)) + sizeof(ptt_pressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XplaneData_RadioStack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 audio_com_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_audio_com_selection(&has_bits);
          audio_com_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com1_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_com1_power(&has_bits);
          com1_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 com1_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_com1_freq(&has_bits);
          com1_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com1_audio_selection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_com1_audio_selection(&has_bits);
          com1_audio_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float com1_volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_com1_volume(&has_bits);
          com1_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool com2_power = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_com2_power(&has_bits);
          com2_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 com2_freq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_com2_freq(&has_bits);
          com2_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com2_audio_selection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_com2_audio_selection(&has_bits);
          com2_audio_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float com2_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_com2_volume(&has_bits);
          com2_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool avionics_power_on = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_avionics_power_on(&has_bits);
          avionics_power_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transponder_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_transponder_code(&has_bits);
          transponder_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transponder_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_transponder_mode(&has_bits);
          transponder_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transponder_ident = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_transponder_ident(&has_bits);
          transponder_ident_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ptt_pressed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ptt_pressed(&has_bits);
          ptt_pressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XplaneData_RadioStack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.XplaneData.RadioStack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 audio_com_selection = 1;
  if (_internal_has_audio_com_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_audio_com_selection(), target);
  }

  // bool com1_power = 2;
  if (_internal_has_com1_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_com1_power(), target);
  }

  // int32 com1_freq = 3;
  if (_internal_has_com1_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_com1_freq(), target);
  }

  // bool com1_audio_selection = 4;
  if (_internal_has_com1_audio_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_com1_audio_selection(), target);
  }

  // float com1_volume = 5;
  if (_internal_has_com1_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_com1_volume(), target);
  }

  // bool com2_power = 6;
  if (_internal_has_com2_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_com2_power(), target);
  }

  // int32 com2_freq = 7;
  if (_internal_has_com2_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_com2_freq(), target);
  }

  // bool com2_audio_selection = 8;
  if (_internal_has_com2_audio_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_com2_audio_selection(), target);
  }

  // float com2_volume = 9;
  if (_internal_has_com2_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_com2_volume(), target);
  }

  // bool avionics_power_on = 10;
  if (_internal_has_avionics_power_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_avionics_power_on(), target);
  }

  // int32 transponder_code = 11;
  if (_internal_has_transponder_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_transponder_code(), target);
  }

  // int32 transponder_mode = 12;
  if (_internal_has_transponder_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_transponder_mode(), target);
  }

  // bool transponder_ident = 13;
  if (_internal_has_transponder_ident()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_transponder_ident(), target);
  }

  // bool ptt_pressed = 14;
  if (_internal_has_ptt_pressed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_ptt_pressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.XplaneData.RadioStack)
  return target;
}

size_t XplaneData_RadioStack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.XplaneData.RadioStack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // int32 audio_com_selection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_audio_com_selection());
    }

    // int32 com1_freq = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com1_freq());
    }

    // float com1_volume = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // bool com1_power = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // bool com1_audio_selection = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // bool com2_power = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // bool com2_audio_selection = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // int32 com2_freq = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com2_freq());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // float com2_volume = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // int32 transponder_code = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transponder_code());
    }

    // int32 transponder_mode = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transponder_mode());
    }

    // bool avionics_power_on = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // bool transponder_ident = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // bool ptt_pressed = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XplaneData_RadioStack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.XplaneData.RadioStack)
  GOOGLE_DCHECK_NE(&from, this);
  const XplaneData_RadioStack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XplaneData_RadioStack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.XplaneData.RadioStack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.XplaneData.RadioStack)
    MergeFrom(*source);
  }
}

void XplaneData_RadioStack::MergeFrom(const XplaneData_RadioStack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.XplaneData.RadioStack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      audio_com_selection_ = from.audio_com_selection_;
    }
    if (cached_has_bits & 0x00000002u) {
      com1_freq_ = from.com1_freq_;
    }
    if (cached_has_bits & 0x00000004u) {
      com1_volume_ = from.com1_volume_;
    }
    if (cached_has_bits & 0x00000008u) {
      com1_power_ = from.com1_power_;
    }
    if (cached_has_bits & 0x00000010u) {
      com1_audio_selection_ = from.com1_audio_selection_;
    }
    if (cached_has_bits & 0x00000020u) {
      com2_power_ = from.com2_power_;
    }
    if (cached_has_bits & 0x00000040u) {
      com2_audio_selection_ = from.com2_audio_selection_;
    }
    if (cached_has_bits & 0x00000080u) {
      com2_freq_ = from.com2_freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      com2_volume_ = from.com2_volume_;
    }
    if (cached_has_bits & 0x00000200u) {
      transponder_code_ = from.transponder_code_;
    }
    if (cached_has_bits & 0x00000400u) {
      transponder_mode_ = from.transponder_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      avionics_power_on_ = from.avionics_power_on_;
    }
    if (cached_has_bits & 0x00001000u) {
      transponder_ident_ = from.transponder_ident_;
    }
    if (cached_has_bits & 0x00002000u) {
      ptt_pressed_ = from.ptt_pressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void XplaneData_RadioStack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.XplaneData.RadioStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XplaneData_RadioStack::CopyFrom(const XplaneData_RadioStack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.XplaneData.RadioStack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XplaneData_RadioStack::IsInitialized() const {
  return true;
}

void XplaneData_RadioStack::InternalSwap(XplaneData_RadioStack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XplaneData_RadioStack, ptt_pressed_)
      + sizeof(XplaneData_RadioStack::ptt_pressed_)
      - PROTOBUF_FIELD_OFFSET(XplaneData_RadioStack, audio_com_selection_)>(
          reinterpret_cast<char*>(&audio_com_selection_),
          reinterpret_cast<char*>(&other->audio_com_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XplaneData_RadioStack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class XplaneData::_Internal {
 public:
  using HasBits = decltype(std::declval<XplaneData>()._has_bits_);
  static const ::xpilot::XplaneData_UserAircraftData& user_aircraft_data(const XplaneData* msg);
  static void set_has_user_aircraft_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::xpilot::XplaneData_UserAircraftConfigData& user_aircraft_config(const XplaneData* msg);
  static void set_has_user_aircraft_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::xpilot::XplaneData_RadioStack& radio_stack(const XplaneData* msg);
  static void set_has_radio_stack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_replay_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::xpilot::XplaneData_UserAircraftData&
XplaneData::_Internal::user_aircraft_data(const XplaneData* msg) {
  return *msg->user_aircraft_data_;
}
const ::xpilot::XplaneData_UserAircraftConfigData&
XplaneData::_Internal::user_aircraft_config(const XplaneData* msg) {
  return *msg->user_aircraft_config_;
}
const ::xpilot::XplaneData_RadioStack&
XplaneData::_Internal::radio_stack(const XplaneData* msg) {
  return *msg->radio_stack_;
}
XplaneData::XplaneData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.XplaneData)
}
XplaneData::XplaneData(const XplaneData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_aircraft_data()) {
    user_aircraft_data_ = new ::xpilot::XplaneData_UserAircraftData(*from.user_aircraft_data_);
  } else {
    user_aircraft_data_ = nullptr;
  }
  if (from._internal_has_user_aircraft_config()) {
    user_aircraft_config_ = new ::xpilot::XplaneData_UserAircraftConfigData(*from.user_aircraft_config_);
  } else {
    user_aircraft_config_ = nullptr;
  }
  if (from._internal_has_radio_stack()) {
    radio_stack_ = new ::xpilot::XplaneData_RadioStack(*from.radio_stack_);
  } else {
    radio_stack_ = nullptr;
  }
  replay_mode_ = from.replay_mode_;
  // @@protoc_insertion_point(copy_constructor:xpilot.XplaneData)
}

void XplaneData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_aircraft_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_mode_) -
    reinterpret_cast<char*>(&user_aircraft_data_)) + sizeof(replay_mode_));
}

XplaneData::~XplaneData() {
  // @@protoc_insertion_point(destructor:xpilot.XplaneData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XplaneData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_aircraft_data_;
  if (this != internal_default_instance()) delete user_aircraft_config_;
  if (this != internal_default_instance()) delete radio_stack_;
}

void XplaneData::ArenaDtor(void* object) {
  XplaneData* _this = reinterpret_cast< XplaneData* >(object);
  (void)_this;
}
void XplaneData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XplaneData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XplaneData::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.XplaneData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && user_aircraft_data_ != nullptr) {
        delete user_aircraft_data_;
      }
      user_aircraft_data_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && user_aircraft_config_ != nullptr) {
        delete user_aircraft_config_;
      }
      user_aircraft_config_ = nullptr;
    }
    if (cached_has_bits & 0x00000004u) {
      if (GetArena() == nullptr && radio_stack_ != nullptr) {
        delete radio_stack_;
      }
      radio_stack_ = nullptr;
    }
  }
  replay_mode_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XplaneData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .xpilot.XplaneData.UserAircraftData user_aircraft_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_aircraft_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.XplaneData.UserAircraftConfigData user_aircraft_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_aircraft_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xpilot.XplaneData.RadioStack radio_stack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_radio_stack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool replay_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_replay_mode(&has_bits);
          replay_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XplaneData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.XplaneData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .xpilot.XplaneData.UserAircraftData user_aircraft_data = 1;
  if (_internal_has_user_aircraft_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_aircraft_data(this), target, stream);
  }

  // .xpilot.XplaneData.UserAircraftConfigData user_aircraft_config = 2;
  if (_internal_has_user_aircraft_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_aircraft_config(this), target, stream);
  }

  // .xpilot.XplaneData.RadioStack radio_stack = 3;
  if (_internal_has_radio_stack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::radio_stack(this), target, stream);
  }

  // bool replay_mode = 4;
  if (_internal_has_replay_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_replay_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.XplaneData)
  return target;
}

size_t XplaneData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.XplaneData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .xpilot.XplaneData.UserAircraftData user_aircraft_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_aircraft_data_);
    }

    // .xpilot.XplaneData.UserAircraftConfigData user_aircraft_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_aircraft_config_);
    }

    // .xpilot.XplaneData.RadioStack radio_stack = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radio_stack_);
    }

    // bool replay_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XplaneData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.XplaneData)
  GOOGLE_DCHECK_NE(&from, this);
  const XplaneData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XplaneData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.XplaneData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.XplaneData)
    MergeFrom(*source);
  }
}

void XplaneData::MergeFrom(const XplaneData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.XplaneData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_user_aircraft_data()->::xpilot::XplaneData_UserAircraftData::MergeFrom(from._internal_user_aircraft_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_user_aircraft_config()->::xpilot::XplaneData_UserAircraftConfigData::MergeFrom(from._internal_user_aircraft_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_radio_stack()->::xpilot::XplaneData_RadioStack::MergeFrom(from._internal_radio_stack());
    }
    if (cached_has_bits & 0x00000008u) {
      replay_mode_ = from.replay_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void XplaneData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.XplaneData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XplaneData::CopyFrom(const XplaneData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.XplaneData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XplaneData::IsInitialized() const {
  return true;
}

void XplaneData::InternalSwap(XplaneData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XplaneData, replay_mode_)
      + sizeof(XplaneData::replay_mode_)
      - PROTOBUF_FIELD_OFFSET(XplaneData, user_aircraft_data_)>(
          reinterpret_cast<char*>(&user_aircraft_data_),
          reinterpret_cast<char*>(&other->user_aircraft_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XplaneData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::XplaneData_UserAircraftData* Arena::CreateMaybeMessage< ::xpilot::XplaneData_UserAircraftData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::XplaneData_UserAircraftData >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::XplaneData_UserAircraftConfigData* Arena::CreateMaybeMessage< ::xpilot::XplaneData_UserAircraftConfigData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::XplaneData_UserAircraftConfigData >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::XplaneData_RadioStack* Arena::CreateMaybeMessage< ::xpilot::XplaneData_RadioStack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::XplaneData_RadioStack >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::XplaneData* Arena::CreateMaybeMessage< ::xpilot::XplaneData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::XplaneData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
