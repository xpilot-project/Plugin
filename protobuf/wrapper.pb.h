// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Wrapper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Wrapper_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Wrapper_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "XplaneData.pb.h"
#include "PluginInformation.pb.h"
#include "CslValidation.pb.h"
#include "AddPlane.pb.h"
#include "ChangePlaneModel.pb.h"
#include "PositionUpdate.pb.h"
#include "DeletePlane.pb.h"
#include "NetworkConnected.pb.h"
#include "NetworkDisconnected.pb.h"
#include "AirplaneConfig.pb.h"
#include "NearbyControllers.pb.h"
#include "PrivateMessageReceived.pb.h"
#include "PrivateMessageSent.pb.h"
#include "SetTransponder.pb.h"
#include "FastPositionUpdate.pb.h"
#include "PlaneAddedToSim.pb.h"
#include "SetRadioStack.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Wrapper_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Wrapper_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Wrapper_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Wrapper_2eproto_metadata_getter(int index);
namespace xpilot {
class Wrapper;
struct WrapperDefaultTypeInternal;
extern WrapperDefaultTypeInternal _Wrapper_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::Wrapper* Arena::CreateMaybeMessage<::xpilot::Wrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class Wrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.Wrapper) */ {
 public:
  inline Wrapper() : Wrapper(nullptr) {}
  virtual ~Wrapper();
  explicit constexpr Wrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Wrapper(const Wrapper& from);
  Wrapper(Wrapper&& from) noexcept
    : Wrapper() {
    *this = ::std::move(from);
  }

  inline Wrapper& operator=(const Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wrapper& operator=(Wrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Wrapper& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kXplaneData = 2,
    kPositionUpdate = 3,
    kFastPositionUpdate = 4,
    kAirplaneConfig = 5,
    kAddPlane = 6,
    kPlaneAddedToSim = 7,
    kChangePlaneModel = 8,
    kDeletePlane = 9,
    kPrivateMessageReceived = 10,
    kPrivateMessageSent = 11,
    kNetworkConnected = 12,
    kNetworkDisconnected = 13,
    kNearbyControllers = 14,
    kSetTransponder = 15,
    kSetRadiostack = 16,
    kPluginInformation = 17,
    kCslValidation = 18,
    MSG_NOT_SET = 0,
  };

  static inline const Wrapper* internal_default_instance() {
    return reinterpret_cast<const Wrapper*>(
               &_Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Wrapper& a, Wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(Wrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Wrapper* New() const final {
    return CreateMaybeMessage<Wrapper>(nullptr);
  }

  Wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Wrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Wrapper& from);
  void MergeFrom(const Wrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.Wrapper";
  }
  protected:
  explicit Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Wrapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kXplaneDataFieldNumber = 2,
    kPositionUpdateFieldNumber = 3,
    kFastPositionUpdateFieldNumber = 4,
    kAirplaneConfigFieldNumber = 5,
    kAddPlaneFieldNumber = 6,
    kPlaneAddedToSimFieldNumber = 7,
    kChangePlaneModelFieldNumber = 8,
    kDeletePlaneFieldNumber = 9,
    kPrivateMessageReceivedFieldNumber = 10,
    kPrivateMessageSentFieldNumber = 11,
    kNetworkConnectedFieldNumber = 12,
    kNetworkDisconnectedFieldNumber = 13,
    kNearbyControllersFieldNumber = 14,
    kSetTransponderFieldNumber = 15,
    kSetRadiostackFieldNumber = 16,
    kPluginInformationFieldNumber = 17,
    kCslValidationFieldNumber = 18,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .xpilot.XplaneData xplane_data = 2;
  bool has_xplane_data() const;
  private:
  bool _internal_has_xplane_data() const;
  public:
  void clear_xplane_data();
  const ::xpilot::XplaneData& xplane_data() const;
  ::xpilot::XplaneData* release_xplane_data();
  ::xpilot::XplaneData* mutable_xplane_data();
  void set_allocated_xplane_data(::xpilot::XplaneData* xplane_data);
  private:
  const ::xpilot::XplaneData& _internal_xplane_data() const;
  ::xpilot::XplaneData* _internal_mutable_xplane_data();
  public:
  void unsafe_arena_set_allocated_xplane_data(
      ::xpilot::XplaneData* xplane_data);
  ::xpilot::XplaneData* unsafe_arena_release_xplane_data();

  // .xpilot.PositionUpdate position_update = 3;
  bool has_position_update() const;
  private:
  bool _internal_has_position_update() const;
  public:
  void clear_position_update();
  const ::xpilot::PositionUpdate& position_update() const;
  ::xpilot::PositionUpdate* release_position_update();
  ::xpilot::PositionUpdate* mutable_position_update();
  void set_allocated_position_update(::xpilot::PositionUpdate* position_update);
  private:
  const ::xpilot::PositionUpdate& _internal_position_update() const;
  ::xpilot::PositionUpdate* _internal_mutable_position_update();
  public:
  void unsafe_arena_set_allocated_position_update(
      ::xpilot::PositionUpdate* position_update);
  ::xpilot::PositionUpdate* unsafe_arena_release_position_update();

  // .xpilot.FastPositionUpdate fast_position_update = 4;
  bool has_fast_position_update() const;
  private:
  bool _internal_has_fast_position_update() const;
  public:
  void clear_fast_position_update();
  const ::xpilot::FastPositionUpdate& fast_position_update() const;
  ::xpilot::FastPositionUpdate* release_fast_position_update();
  ::xpilot::FastPositionUpdate* mutable_fast_position_update();
  void set_allocated_fast_position_update(::xpilot::FastPositionUpdate* fast_position_update);
  private:
  const ::xpilot::FastPositionUpdate& _internal_fast_position_update() const;
  ::xpilot::FastPositionUpdate* _internal_mutable_fast_position_update();
  public:
  void unsafe_arena_set_allocated_fast_position_update(
      ::xpilot::FastPositionUpdate* fast_position_update);
  ::xpilot::FastPositionUpdate* unsafe_arena_release_fast_position_update();

  // .xpilot.AirplaneConfig airplane_config = 5;
  bool has_airplane_config() const;
  private:
  bool _internal_has_airplane_config() const;
  public:
  void clear_airplane_config();
  const ::xpilot::AirplaneConfig& airplane_config() const;
  ::xpilot::AirplaneConfig* release_airplane_config();
  ::xpilot::AirplaneConfig* mutable_airplane_config();
  void set_allocated_airplane_config(::xpilot::AirplaneConfig* airplane_config);
  private:
  const ::xpilot::AirplaneConfig& _internal_airplane_config() const;
  ::xpilot::AirplaneConfig* _internal_mutable_airplane_config();
  public:
  void unsafe_arena_set_allocated_airplane_config(
      ::xpilot::AirplaneConfig* airplane_config);
  ::xpilot::AirplaneConfig* unsafe_arena_release_airplane_config();

  // .xpilot.AddPlane add_plane = 6;
  bool has_add_plane() const;
  private:
  bool _internal_has_add_plane() const;
  public:
  void clear_add_plane();
  const ::xpilot::AddPlane& add_plane() const;
  ::xpilot::AddPlane* release_add_plane();
  ::xpilot::AddPlane* mutable_add_plane();
  void set_allocated_add_plane(::xpilot::AddPlane* add_plane);
  private:
  const ::xpilot::AddPlane& _internal_add_plane() const;
  ::xpilot::AddPlane* _internal_mutable_add_plane();
  public:
  void unsafe_arena_set_allocated_add_plane(
      ::xpilot::AddPlane* add_plane);
  ::xpilot::AddPlane* unsafe_arena_release_add_plane();

  // .xpilot.PlaneAddedToSim plane_added_to_sim = 7;
  bool has_plane_added_to_sim() const;
  private:
  bool _internal_has_plane_added_to_sim() const;
  public:
  void clear_plane_added_to_sim();
  const ::xpilot::PlaneAddedToSim& plane_added_to_sim() const;
  ::xpilot::PlaneAddedToSim* release_plane_added_to_sim();
  ::xpilot::PlaneAddedToSim* mutable_plane_added_to_sim();
  void set_allocated_plane_added_to_sim(::xpilot::PlaneAddedToSim* plane_added_to_sim);
  private:
  const ::xpilot::PlaneAddedToSim& _internal_plane_added_to_sim() const;
  ::xpilot::PlaneAddedToSim* _internal_mutable_plane_added_to_sim();
  public:
  void unsafe_arena_set_allocated_plane_added_to_sim(
      ::xpilot::PlaneAddedToSim* plane_added_to_sim);
  ::xpilot::PlaneAddedToSim* unsafe_arena_release_plane_added_to_sim();

  // .xpilot.ChangePlaneModel change_plane_model = 8;
  bool has_change_plane_model() const;
  private:
  bool _internal_has_change_plane_model() const;
  public:
  void clear_change_plane_model();
  const ::xpilot::ChangePlaneModel& change_plane_model() const;
  ::xpilot::ChangePlaneModel* release_change_plane_model();
  ::xpilot::ChangePlaneModel* mutable_change_plane_model();
  void set_allocated_change_plane_model(::xpilot::ChangePlaneModel* change_plane_model);
  private:
  const ::xpilot::ChangePlaneModel& _internal_change_plane_model() const;
  ::xpilot::ChangePlaneModel* _internal_mutable_change_plane_model();
  public:
  void unsafe_arena_set_allocated_change_plane_model(
      ::xpilot::ChangePlaneModel* change_plane_model);
  ::xpilot::ChangePlaneModel* unsafe_arena_release_change_plane_model();

  // .xpilot.DeletePlane delete_plane = 9;
  bool has_delete_plane() const;
  private:
  bool _internal_has_delete_plane() const;
  public:
  void clear_delete_plane();
  const ::xpilot::DeletePlane& delete_plane() const;
  ::xpilot::DeletePlane* release_delete_plane();
  ::xpilot::DeletePlane* mutable_delete_plane();
  void set_allocated_delete_plane(::xpilot::DeletePlane* delete_plane);
  private:
  const ::xpilot::DeletePlane& _internal_delete_plane() const;
  ::xpilot::DeletePlane* _internal_mutable_delete_plane();
  public:
  void unsafe_arena_set_allocated_delete_plane(
      ::xpilot::DeletePlane* delete_plane);
  ::xpilot::DeletePlane* unsafe_arena_release_delete_plane();

  // .xpilot.PrivateMessageReceived private_message_received = 10;
  bool has_private_message_received() const;
  private:
  bool _internal_has_private_message_received() const;
  public:
  void clear_private_message_received();
  const ::xpilot::PrivateMessageReceived& private_message_received() const;
  ::xpilot::PrivateMessageReceived* release_private_message_received();
  ::xpilot::PrivateMessageReceived* mutable_private_message_received();
  void set_allocated_private_message_received(::xpilot::PrivateMessageReceived* private_message_received);
  private:
  const ::xpilot::PrivateMessageReceived& _internal_private_message_received() const;
  ::xpilot::PrivateMessageReceived* _internal_mutable_private_message_received();
  public:
  void unsafe_arena_set_allocated_private_message_received(
      ::xpilot::PrivateMessageReceived* private_message_received);
  ::xpilot::PrivateMessageReceived* unsafe_arena_release_private_message_received();

  // .xpilot.PrivateMessageSent private_message_sent = 11;
  bool has_private_message_sent() const;
  private:
  bool _internal_has_private_message_sent() const;
  public:
  void clear_private_message_sent();
  const ::xpilot::PrivateMessageSent& private_message_sent() const;
  ::xpilot::PrivateMessageSent* release_private_message_sent();
  ::xpilot::PrivateMessageSent* mutable_private_message_sent();
  void set_allocated_private_message_sent(::xpilot::PrivateMessageSent* private_message_sent);
  private:
  const ::xpilot::PrivateMessageSent& _internal_private_message_sent() const;
  ::xpilot::PrivateMessageSent* _internal_mutable_private_message_sent();
  public:
  void unsafe_arena_set_allocated_private_message_sent(
      ::xpilot::PrivateMessageSent* private_message_sent);
  ::xpilot::PrivateMessageSent* unsafe_arena_release_private_message_sent();

  // .xpilot.NetworkConnected network_connected = 12;
  bool has_network_connected() const;
  private:
  bool _internal_has_network_connected() const;
  public:
  void clear_network_connected();
  const ::xpilot::NetworkConnected& network_connected() const;
  ::xpilot::NetworkConnected* release_network_connected();
  ::xpilot::NetworkConnected* mutable_network_connected();
  void set_allocated_network_connected(::xpilot::NetworkConnected* network_connected);
  private:
  const ::xpilot::NetworkConnected& _internal_network_connected() const;
  ::xpilot::NetworkConnected* _internal_mutable_network_connected();
  public:
  void unsafe_arena_set_allocated_network_connected(
      ::xpilot::NetworkConnected* network_connected);
  ::xpilot::NetworkConnected* unsafe_arena_release_network_connected();

  // .xpilot.NetworkDisconnected network_disconnected = 13;
  bool has_network_disconnected() const;
  private:
  bool _internal_has_network_disconnected() const;
  public:
  void clear_network_disconnected();
  const ::xpilot::NetworkDisconnected& network_disconnected() const;
  ::xpilot::NetworkDisconnected* release_network_disconnected();
  ::xpilot::NetworkDisconnected* mutable_network_disconnected();
  void set_allocated_network_disconnected(::xpilot::NetworkDisconnected* network_disconnected);
  private:
  const ::xpilot::NetworkDisconnected& _internal_network_disconnected() const;
  ::xpilot::NetworkDisconnected* _internal_mutable_network_disconnected();
  public:
  void unsafe_arena_set_allocated_network_disconnected(
      ::xpilot::NetworkDisconnected* network_disconnected);
  ::xpilot::NetworkDisconnected* unsafe_arena_release_network_disconnected();

  // .xpilot.NearbyControllers nearby_controllers = 14;
  bool has_nearby_controllers() const;
  private:
  bool _internal_has_nearby_controllers() const;
  public:
  void clear_nearby_controllers();
  const ::xpilot::NearbyControllers& nearby_controllers() const;
  ::xpilot::NearbyControllers* release_nearby_controllers();
  ::xpilot::NearbyControllers* mutable_nearby_controllers();
  void set_allocated_nearby_controllers(::xpilot::NearbyControllers* nearby_controllers);
  private:
  const ::xpilot::NearbyControllers& _internal_nearby_controllers() const;
  ::xpilot::NearbyControllers* _internal_mutable_nearby_controllers();
  public:
  void unsafe_arena_set_allocated_nearby_controllers(
      ::xpilot::NearbyControllers* nearby_controllers);
  ::xpilot::NearbyControllers* unsafe_arena_release_nearby_controllers();

  // .xpilot.SetTransponder set_transponder = 15;
  bool has_set_transponder() const;
  private:
  bool _internal_has_set_transponder() const;
  public:
  void clear_set_transponder();
  const ::xpilot::SetTransponder& set_transponder() const;
  ::xpilot::SetTransponder* release_set_transponder();
  ::xpilot::SetTransponder* mutable_set_transponder();
  void set_allocated_set_transponder(::xpilot::SetTransponder* set_transponder);
  private:
  const ::xpilot::SetTransponder& _internal_set_transponder() const;
  ::xpilot::SetTransponder* _internal_mutable_set_transponder();
  public:
  void unsafe_arena_set_allocated_set_transponder(
      ::xpilot::SetTransponder* set_transponder);
  ::xpilot::SetTransponder* unsafe_arena_release_set_transponder();

  // .xpilot.SetRadioStack set_radiostack = 16;
  bool has_set_radiostack() const;
  private:
  bool _internal_has_set_radiostack() const;
  public:
  void clear_set_radiostack();
  const ::xpilot::SetRadioStack& set_radiostack() const;
  ::xpilot::SetRadioStack* release_set_radiostack();
  ::xpilot::SetRadioStack* mutable_set_radiostack();
  void set_allocated_set_radiostack(::xpilot::SetRadioStack* set_radiostack);
  private:
  const ::xpilot::SetRadioStack& _internal_set_radiostack() const;
  ::xpilot::SetRadioStack* _internal_mutable_set_radiostack();
  public:
  void unsafe_arena_set_allocated_set_radiostack(
      ::xpilot::SetRadioStack* set_radiostack);
  ::xpilot::SetRadioStack* unsafe_arena_release_set_radiostack();

  // .xpilot.PluginInformation plugin_information = 17;
  bool has_plugin_information() const;
  private:
  bool _internal_has_plugin_information() const;
  public:
  void clear_plugin_information();
  const ::xpilot::PluginInformation& plugin_information() const;
  ::xpilot::PluginInformation* release_plugin_information();
  ::xpilot::PluginInformation* mutable_plugin_information();
  void set_allocated_plugin_information(::xpilot::PluginInformation* plugin_information);
  private:
  const ::xpilot::PluginInformation& _internal_plugin_information() const;
  ::xpilot::PluginInformation* _internal_mutable_plugin_information();
  public:
  void unsafe_arena_set_allocated_plugin_information(
      ::xpilot::PluginInformation* plugin_information);
  ::xpilot::PluginInformation* unsafe_arena_release_plugin_information();

  // .xpilot.CslValidation csl_validation = 18;
  bool has_csl_validation() const;
  private:
  bool _internal_has_csl_validation() const;
  public:
  void clear_csl_validation();
  const ::xpilot::CslValidation& csl_validation() const;
  ::xpilot::CslValidation* release_csl_validation();
  ::xpilot::CslValidation* mutable_csl_validation();
  void set_allocated_csl_validation(::xpilot::CslValidation* csl_validation);
  private:
  const ::xpilot::CslValidation& _internal_csl_validation() const;
  ::xpilot::CslValidation* _internal_mutable_csl_validation();
  public:
  void unsafe_arena_set_allocated_csl_validation(
      ::xpilot::CslValidation* csl_validation);
  ::xpilot::CslValidation* unsafe_arena_release_csl_validation();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:xpilot.Wrapper)
 private:
  class _Internal;
  void set_has_xplane_data();
  void set_has_position_update();
  void set_has_fast_position_update();
  void set_has_airplane_config();
  void set_has_add_plane();
  void set_has_plane_added_to_sim();
  void set_has_change_plane_model();
  void set_has_delete_plane();
  void set_has_private_message_received();
  void set_has_private_message_sent();
  void set_has_network_connected();
  void set_has_network_disconnected();
  void set_has_nearby_controllers();
  void set_has_set_transponder();
  void set_has_set_radiostack();
  void set_has_plugin_information();
  void set_has_csl_validation();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  union MsgUnion {
    constexpr MsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::xpilot::XplaneData* xplane_data_;
    ::xpilot::PositionUpdate* position_update_;
    ::xpilot::FastPositionUpdate* fast_position_update_;
    ::xpilot::AirplaneConfig* airplane_config_;
    ::xpilot::AddPlane* add_plane_;
    ::xpilot::PlaneAddedToSim* plane_added_to_sim_;
    ::xpilot::ChangePlaneModel* change_plane_model_;
    ::xpilot::DeletePlane* delete_plane_;
    ::xpilot::PrivateMessageReceived* private_message_received_;
    ::xpilot::PrivateMessageSent* private_message_sent_;
    ::xpilot::NetworkConnected* network_connected_;
    ::xpilot::NetworkDisconnected* network_disconnected_;
    ::xpilot::NearbyControllers* nearby_controllers_;
    ::xpilot::SetTransponder* set_transponder_;
    ::xpilot::SetRadioStack* set_radiostack_;
    ::xpilot::PluginInformation* plugin_information_;
    ::xpilot::CslValidation* csl_validation_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Wrapper_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Wrapper

// .google.protobuf.Timestamp timestamp = 1;
inline bool Wrapper::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Wrapper::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Wrapper::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Wrapper::timestamp() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.timestamp)
  return _internal_timestamp();
}
inline void Wrapper::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Wrapper::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Wrapper::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Wrapper::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Wrapper::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.timestamp)
  return _internal_mutable_timestamp();
}
inline void Wrapper::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:xpilot.Wrapper.timestamp)
}

// .xpilot.XplaneData xplane_data = 2;
inline bool Wrapper::_internal_has_xplane_data() const {
  return msg_case() == kXplaneData;
}
inline bool Wrapper::has_xplane_data() const {
  return _internal_has_xplane_data();
}
inline void Wrapper::set_has_xplane_data() {
  _oneof_case_[0] = kXplaneData;
}
inline ::xpilot::XplaneData* Wrapper::release_xplane_data() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.xplane_data)
  if (_internal_has_xplane_data()) {
    clear_has_msg();
      ::xpilot::XplaneData* temp = msg_.xplane_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.xplane_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::XplaneData& Wrapper::_internal_xplane_data() const {
  return _internal_has_xplane_data()
      ? *msg_.xplane_data_
      : reinterpret_cast< ::xpilot::XplaneData&>(::xpilot::_XplaneData_default_instance_);
}
inline const ::xpilot::XplaneData& Wrapper::xplane_data() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.xplane_data)
  return _internal_xplane_data();
}
inline ::xpilot::XplaneData* Wrapper::unsafe_arena_release_xplane_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.xplane_data)
  if (_internal_has_xplane_data()) {
    clear_has_msg();
    ::xpilot::XplaneData* temp = msg_.xplane_data_;
    msg_.xplane_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_xplane_data(::xpilot::XplaneData* xplane_data) {
  clear_msg();
  if (xplane_data) {
    set_has_xplane_data();
    msg_.xplane_data_ = xplane_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.xplane_data)
}
inline ::xpilot::XplaneData* Wrapper::_internal_mutable_xplane_data() {
  if (!_internal_has_xplane_data()) {
    clear_msg();
    set_has_xplane_data();
    msg_.xplane_data_ = CreateMaybeMessage< ::xpilot::XplaneData >(GetArena());
  }
  return msg_.xplane_data_;
}
inline ::xpilot::XplaneData* Wrapper::mutable_xplane_data() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.xplane_data)
  return _internal_mutable_xplane_data();
}

// .xpilot.PositionUpdate position_update = 3;
inline bool Wrapper::_internal_has_position_update() const {
  return msg_case() == kPositionUpdate;
}
inline bool Wrapper::has_position_update() const {
  return _internal_has_position_update();
}
inline void Wrapper::set_has_position_update() {
  _oneof_case_[0] = kPositionUpdate;
}
inline ::xpilot::PositionUpdate* Wrapper::release_position_update() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.position_update)
  if (_internal_has_position_update()) {
    clear_has_msg();
      ::xpilot::PositionUpdate* temp = msg_.position_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.position_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::PositionUpdate& Wrapper::_internal_position_update() const {
  return _internal_has_position_update()
      ? *msg_.position_update_
      : reinterpret_cast< ::xpilot::PositionUpdate&>(::xpilot::_PositionUpdate_default_instance_);
}
inline const ::xpilot::PositionUpdate& Wrapper::position_update() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.position_update)
  return _internal_position_update();
}
inline ::xpilot::PositionUpdate* Wrapper::unsafe_arena_release_position_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.position_update)
  if (_internal_has_position_update()) {
    clear_has_msg();
    ::xpilot::PositionUpdate* temp = msg_.position_update_;
    msg_.position_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_position_update(::xpilot::PositionUpdate* position_update) {
  clear_msg();
  if (position_update) {
    set_has_position_update();
    msg_.position_update_ = position_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.position_update)
}
inline ::xpilot::PositionUpdate* Wrapper::_internal_mutable_position_update() {
  if (!_internal_has_position_update()) {
    clear_msg();
    set_has_position_update();
    msg_.position_update_ = CreateMaybeMessage< ::xpilot::PositionUpdate >(GetArena());
  }
  return msg_.position_update_;
}
inline ::xpilot::PositionUpdate* Wrapper::mutable_position_update() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.position_update)
  return _internal_mutable_position_update();
}

// .xpilot.FastPositionUpdate fast_position_update = 4;
inline bool Wrapper::_internal_has_fast_position_update() const {
  return msg_case() == kFastPositionUpdate;
}
inline bool Wrapper::has_fast_position_update() const {
  return _internal_has_fast_position_update();
}
inline void Wrapper::set_has_fast_position_update() {
  _oneof_case_[0] = kFastPositionUpdate;
}
inline ::xpilot::FastPositionUpdate* Wrapper::release_fast_position_update() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.fast_position_update)
  if (_internal_has_fast_position_update()) {
    clear_has_msg();
      ::xpilot::FastPositionUpdate* temp = msg_.fast_position_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.fast_position_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::FastPositionUpdate& Wrapper::_internal_fast_position_update() const {
  return _internal_has_fast_position_update()
      ? *msg_.fast_position_update_
      : reinterpret_cast< ::xpilot::FastPositionUpdate&>(::xpilot::_FastPositionUpdate_default_instance_);
}
inline const ::xpilot::FastPositionUpdate& Wrapper::fast_position_update() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.fast_position_update)
  return _internal_fast_position_update();
}
inline ::xpilot::FastPositionUpdate* Wrapper::unsafe_arena_release_fast_position_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.fast_position_update)
  if (_internal_has_fast_position_update()) {
    clear_has_msg();
    ::xpilot::FastPositionUpdate* temp = msg_.fast_position_update_;
    msg_.fast_position_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_fast_position_update(::xpilot::FastPositionUpdate* fast_position_update) {
  clear_msg();
  if (fast_position_update) {
    set_has_fast_position_update();
    msg_.fast_position_update_ = fast_position_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.fast_position_update)
}
inline ::xpilot::FastPositionUpdate* Wrapper::_internal_mutable_fast_position_update() {
  if (!_internal_has_fast_position_update()) {
    clear_msg();
    set_has_fast_position_update();
    msg_.fast_position_update_ = CreateMaybeMessage< ::xpilot::FastPositionUpdate >(GetArena());
  }
  return msg_.fast_position_update_;
}
inline ::xpilot::FastPositionUpdate* Wrapper::mutable_fast_position_update() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.fast_position_update)
  return _internal_mutable_fast_position_update();
}

// .xpilot.AirplaneConfig airplane_config = 5;
inline bool Wrapper::_internal_has_airplane_config() const {
  return msg_case() == kAirplaneConfig;
}
inline bool Wrapper::has_airplane_config() const {
  return _internal_has_airplane_config();
}
inline void Wrapper::set_has_airplane_config() {
  _oneof_case_[0] = kAirplaneConfig;
}
inline ::xpilot::AirplaneConfig* Wrapper::release_airplane_config() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.airplane_config)
  if (_internal_has_airplane_config()) {
    clear_has_msg();
      ::xpilot::AirplaneConfig* temp = msg_.airplane_config_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.airplane_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::AirplaneConfig& Wrapper::_internal_airplane_config() const {
  return _internal_has_airplane_config()
      ? *msg_.airplane_config_
      : reinterpret_cast< ::xpilot::AirplaneConfig&>(::xpilot::_AirplaneConfig_default_instance_);
}
inline const ::xpilot::AirplaneConfig& Wrapper::airplane_config() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.airplane_config)
  return _internal_airplane_config();
}
inline ::xpilot::AirplaneConfig* Wrapper::unsafe_arena_release_airplane_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.airplane_config)
  if (_internal_has_airplane_config()) {
    clear_has_msg();
    ::xpilot::AirplaneConfig* temp = msg_.airplane_config_;
    msg_.airplane_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_airplane_config(::xpilot::AirplaneConfig* airplane_config) {
  clear_msg();
  if (airplane_config) {
    set_has_airplane_config();
    msg_.airplane_config_ = airplane_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.airplane_config)
}
inline ::xpilot::AirplaneConfig* Wrapper::_internal_mutable_airplane_config() {
  if (!_internal_has_airplane_config()) {
    clear_msg();
    set_has_airplane_config();
    msg_.airplane_config_ = CreateMaybeMessage< ::xpilot::AirplaneConfig >(GetArena());
  }
  return msg_.airplane_config_;
}
inline ::xpilot::AirplaneConfig* Wrapper::mutable_airplane_config() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.airplane_config)
  return _internal_mutable_airplane_config();
}

// .xpilot.AddPlane add_plane = 6;
inline bool Wrapper::_internal_has_add_plane() const {
  return msg_case() == kAddPlane;
}
inline bool Wrapper::has_add_plane() const {
  return _internal_has_add_plane();
}
inline void Wrapper::set_has_add_plane() {
  _oneof_case_[0] = kAddPlane;
}
inline ::xpilot::AddPlane* Wrapper::release_add_plane() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.add_plane)
  if (_internal_has_add_plane()) {
    clear_has_msg();
      ::xpilot::AddPlane* temp = msg_.add_plane_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.add_plane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::AddPlane& Wrapper::_internal_add_plane() const {
  return _internal_has_add_plane()
      ? *msg_.add_plane_
      : reinterpret_cast< ::xpilot::AddPlane&>(::xpilot::_AddPlane_default_instance_);
}
inline const ::xpilot::AddPlane& Wrapper::add_plane() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.add_plane)
  return _internal_add_plane();
}
inline ::xpilot::AddPlane* Wrapper::unsafe_arena_release_add_plane() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.add_plane)
  if (_internal_has_add_plane()) {
    clear_has_msg();
    ::xpilot::AddPlane* temp = msg_.add_plane_;
    msg_.add_plane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_add_plane(::xpilot::AddPlane* add_plane) {
  clear_msg();
  if (add_plane) {
    set_has_add_plane();
    msg_.add_plane_ = add_plane;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.add_plane)
}
inline ::xpilot::AddPlane* Wrapper::_internal_mutable_add_plane() {
  if (!_internal_has_add_plane()) {
    clear_msg();
    set_has_add_plane();
    msg_.add_plane_ = CreateMaybeMessage< ::xpilot::AddPlane >(GetArena());
  }
  return msg_.add_plane_;
}
inline ::xpilot::AddPlane* Wrapper::mutable_add_plane() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.add_plane)
  return _internal_mutable_add_plane();
}

// .xpilot.PlaneAddedToSim plane_added_to_sim = 7;
inline bool Wrapper::_internal_has_plane_added_to_sim() const {
  return msg_case() == kPlaneAddedToSim;
}
inline bool Wrapper::has_plane_added_to_sim() const {
  return _internal_has_plane_added_to_sim();
}
inline void Wrapper::set_has_plane_added_to_sim() {
  _oneof_case_[0] = kPlaneAddedToSim;
}
inline ::xpilot::PlaneAddedToSim* Wrapper::release_plane_added_to_sim() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.plane_added_to_sim)
  if (_internal_has_plane_added_to_sim()) {
    clear_has_msg();
      ::xpilot::PlaneAddedToSim* temp = msg_.plane_added_to_sim_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.plane_added_to_sim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::PlaneAddedToSim& Wrapper::_internal_plane_added_to_sim() const {
  return _internal_has_plane_added_to_sim()
      ? *msg_.plane_added_to_sim_
      : reinterpret_cast< ::xpilot::PlaneAddedToSim&>(::xpilot::_PlaneAddedToSim_default_instance_);
}
inline const ::xpilot::PlaneAddedToSim& Wrapper::plane_added_to_sim() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.plane_added_to_sim)
  return _internal_plane_added_to_sim();
}
inline ::xpilot::PlaneAddedToSim* Wrapper::unsafe_arena_release_plane_added_to_sim() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.plane_added_to_sim)
  if (_internal_has_plane_added_to_sim()) {
    clear_has_msg();
    ::xpilot::PlaneAddedToSim* temp = msg_.plane_added_to_sim_;
    msg_.plane_added_to_sim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_plane_added_to_sim(::xpilot::PlaneAddedToSim* plane_added_to_sim) {
  clear_msg();
  if (plane_added_to_sim) {
    set_has_plane_added_to_sim();
    msg_.plane_added_to_sim_ = plane_added_to_sim;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.plane_added_to_sim)
}
inline ::xpilot::PlaneAddedToSim* Wrapper::_internal_mutable_plane_added_to_sim() {
  if (!_internal_has_plane_added_to_sim()) {
    clear_msg();
    set_has_plane_added_to_sim();
    msg_.plane_added_to_sim_ = CreateMaybeMessage< ::xpilot::PlaneAddedToSim >(GetArena());
  }
  return msg_.plane_added_to_sim_;
}
inline ::xpilot::PlaneAddedToSim* Wrapper::mutable_plane_added_to_sim() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.plane_added_to_sim)
  return _internal_mutable_plane_added_to_sim();
}

// .xpilot.ChangePlaneModel change_plane_model = 8;
inline bool Wrapper::_internal_has_change_plane_model() const {
  return msg_case() == kChangePlaneModel;
}
inline bool Wrapper::has_change_plane_model() const {
  return _internal_has_change_plane_model();
}
inline void Wrapper::set_has_change_plane_model() {
  _oneof_case_[0] = kChangePlaneModel;
}
inline ::xpilot::ChangePlaneModel* Wrapper::release_change_plane_model() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.change_plane_model)
  if (_internal_has_change_plane_model()) {
    clear_has_msg();
      ::xpilot::ChangePlaneModel* temp = msg_.change_plane_model_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.change_plane_model_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::ChangePlaneModel& Wrapper::_internal_change_plane_model() const {
  return _internal_has_change_plane_model()
      ? *msg_.change_plane_model_
      : reinterpret_cast< ::xpilot::ChangePlaneModel&>(::xpilot::_ChangePlaneModel_default_instance_);
}
inline const ::xpilot::ChangePlaneModel& Wrapper::change_plane_model() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.change_plane_model)
  return _internal_change_plane_model();
}
inline ::xpilot::ChangePlaneModel* Wrapper::unsafe_arena_release_change_plane_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.change_plane_model)
  if (_internal_has_change_plane_model()) {
    clear_has_msg();
    ::xpilot::ChangePlaneModel* temp = msg_.change_plane_model_;
    msg_.change_plane_model_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_change_plane_model(::xpilot::ChangePlaneModel* change_plane_model) {
  clear_msg();
  if (change_plane_model) {
    set_has_change_plane_model();
    msg_.change_plane_model_ = change_plane_model;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.change_plane_model)
}
inline ::xpilot::ChangePlaneModel* Wrapper::_internal_mutable_change_plane_model() {
  if (!_internal_has_change_plane_model()) {
    clear_msg();
    set_has_change_plane_model();
    msg_.change_plane_model_ = CreateMaybeMessage< ::xpilot::ChangePlaneModel >(GetArena());
  }
  return msg_.change_plane_model_;
}
inline ::xpilot::ChangePlaneModel* Wrapper::mutable_change_plane_model() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.change_plane_model)
  return _internal_mutable_change_plane_model();
}

// .xpilot.DeletePlane delete_plane = 9;
inline bool Wrapper::_internal_has_delete_plane() const {
  return msg_case() == kDeletePlane;
}
inline bool Wrapper::has_delete_plane() const {
  return _internal_has_delete_plane();
}
inline void Wrapper::set_has_delete_plane() {
  _oneof_case_[0] = kDeletePlane;
}
inline ::xpilot::DeletePlane* Wrapper::release_delete_plane() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.delete_plane)
  if (_internal_has_delete_plane()) {
    clear_has_msg();
      ::xpilot::DeletePlane* temp = msg_.delete_plane_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.delete_plane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::DeletePlane& Wrapper::_internal_delete_plane() const {
  return _internal_has_delete_plane()
      ? *msg_.delete_plane_
      : reinterpret_cast< ::xpilot::DeletePlane&>(::xpilot::_DeletePlane_default_instance_);
}
inline const ::xpilot::DeletePlane& Wrapper::delete_plane() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.delete_plane)
  return _internal_delete_plane();
}
inline ::xpilot::DeletePlane* Wrapper::unsafe_arena_release_delete_plane() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.delete_plane)
  if (_internal_has_delete_plane()) {
    clear_has_msg();
    ::xpilot::DeletePlane* temp = msg_.delete_plane_;
    msg_.delete_plane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_delete_plane(::xpilot::DeletePlane* delete_plane) {
  clear_msg();
  if (delete_plane) {
    set_has_delete_plane();
    msg_.delete_plane_ = delete_plane;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.delete_plane)
}
inline ::xpilot::DeletePlane* Wrapper::_internal_mutable_delete_plane() {
  if (!_internal_has_delete_plane()) {
    clear_msg();
    set_has_delete_plane();
    msg_.delete_plane_ = CreateMaybeMessage< ::xpilot::DeletePlane >(GetArena());
  }
  return msg_.delete_plane_;
}
inline ::xpilot::DeletePlane* Wrapper::mutable_delete_plane() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.delete_plane)
  return _internal_mutable_delete_plane();
}

// .xpilot.PrivateMessageReceived private_message_received = 10;
inline bool Wrapper::_internal_has_private_message_received() const {
  return msg_case() == kPrivateMessageReceived;
}
inline bool Wrapper::has_private_message_received() const {
  return _internal_has_private_message_received();
}
inline void Wrapper::set_has_private_message_received() {
  _oneof_case_[0] = kPrivateMessageReceived;
}
inline ::xpilot::PrivateMessageReceived* Wrapper::release_private_message_received() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.private_message_received)
  if (_internal_has_private_message_received()) {
    clear_has_msg();
      ::xpilot::PrivateMessageReceived* temp = msg_.private_message_received_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.private_message_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::PrivateMessageReceived& Wrapper::_internal_private_message_received() const {
  return _internal_has_private_message_received()
      ? *msg_.private_message_received_
      : reinterpret_cast< ::xpilot::PrivateMessageReceived&>(::xpilot::_PrivateMessageReceived_default_instance_);
}
inline const ::xpilot::PrivateMessageReceived& Wrapper::private_message_received() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.private_message_received)
  return _internal_private_message_received();
}
inline ::xpilot::PrivateMessageReceived* Wrapper::unsafe_arena_release_private_message_received() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.private_message_received)
  if (_internal_has_private_message_received()) {
    clear_has_msg();
    ::xpilot::PrivateMessageReceived* temp = msg_.private_message_received_;
    msg_.private_message_received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_private_message_received(::xpilot::PrivateMessageReceived* private_message_received) {
  clear_msg();
  if (private_message_received) {
    set_has_private_message_received();
    msg_.private_message_received_ = private_message_received;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.private_message_received)
}
inline ::xpilot::PrivateMessageReceived* Wrapper::_internal_mutable_private_message_received() {
  if (!_internal_has_private_message_received()) {
    clear_msg();
    set_has_private_message_received();
    msg_.private_message_received_ = CreateMaybeMessage< ::xpilot::PrivateMessageReceived >(GetArena());
  }
  return msg_.private_message_received_;
}
inline ::xpilot::PrivateMessageReceived* Wrapper::mutable_private_message_received() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.private_message_received)
  return _internal_mutable_private_message_received();
}

// .xpilot.PrivateMessageSent private_message_sent = 11;
inline bool Wrapper::_internal_has_private_message_sent() const {
  return msg_case() == kPrivateMessageSent;
}
inline bool Wrapper::has_private_message_sent() const {
  return _internal_has_private_message_sent();
}
inline void Wrapper::set_has_private_message_sent() {
  _oneof_case_[0] = kPrivateMessageSent;
}
inline ::xpilot::PrivateMessageSent* Wrapper::release_private_message_sent() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.private_message_sent)
  if (_internal_has_private_message_sent()) {
    clear_has_msg();
      ::xpilot::PrivateMessageSent* temp = msg_.private_message_sent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.private_message_sent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::PrivateMessageSent& Wrapper::_internal_private_message_sent() const {
  return _internal_has_private_message_sent()
      ? *msg_.private_message_sent_
      : reinterpret_cast< ::xpilot::PrivateMessageSent&>(::xpilot::_PrivateMessageSent_default_instance_);
}
inline const ::xpilot::PrivateMessageSent& Wrapper::private_message_sent() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.private_message_sent)
  return _internal_private_message_sent();
}
inline ::xpilot::PrivateMessageSent* Wrapper::unsafe_arena_release_private_message_sent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.private_message_sent)
  if (_internal_has_private_message_sent()) {
    clear_has_msg();
    ::xpilot::PrivateMessageSent* temp = msg_.private_message_sent_;
    msg_.private_message_sent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_private_message_sent(::xpilot::PrivateMessageSent* private_message_sent) {
  clear_msg();
  if (private_message_sent) {
    set_has_private_message_sent();
    msg_.private_message_sent_ = private_message_sent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.private_message_sent)
}
inline ::xpilot::PrivateMessageSent* Wrapper::_internal_mutable_private_message_sent() {
  if (!_internal_has_private_message_sent()) {
    clear_msg();
    set_has_private_message_sent();
    msg_.private_message_sent_ = CreateMaybeMessage< ::xpilot::PrivateMessageSent >(GetArena());
  }
  return msg_.private_message_sent_;
}
inline ::xpilot::PrivateMessageSent* Wrapper::mutable_private_message_sent() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.private_message_sent)
  return _internal_mutable_private_message_sent();
}

// .xpilot.NetworkConnected network_connected = 12;
inline bool Wrapper::_internal_has_network_connected() const {
  return msg_case() == kNetworkConnected;
}
inline bool Wrapper::has_network_connected() const {
  return _internal_has_network_connected();
}
inline void Wrapper::set_has_network_connected() {
  _oneof_case_[0] = kNetworkConnected;
}
inline ::xpilot::NetworkConnected* Wrapper::release_network_connected() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.network_connected)
  if (_internal_has_network_connected()) {
    clear_has_msg();
      ::xpilot::NetworkConnected* temp = msg_.network_connected_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.network_connected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::NetworkConnected& Wrapper::_internal_network_connected() const {
  return _internal_has_network_connected()
      ? *msg_.network_connected_
      : reinterpret_cast< ::xpilot::NetworkConnected&>(::xpilot::_NetworkConnected_default_instance_);
}
inline const ::xpilot::NetworkConnected& Wrapper::network_connected() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.network_connected)
  return _internal_network_connected();
}
inline ::xpilot::NetworkConnected* Wrapper::unsafe_arena_release_network_connected() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.network_connected)
  if (_internal_has_network_connected()) {
    clear_has_msg();
    ::xpilot::NetworkConnected* temp = msg_.network_connected_;
    msg_.network_connected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_network_connected(::xpilot::NetworkConnected* network_connected) {
  clear_msg();
  if (network_connected) {
    set_has_network_connected();
    msg_.network_connected_ = network_connected;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.network_connected)
}
inline ::xpilot::NetworkConnected* Wrapper::_internal_mutable_network_connected() {
  if (!_internal_has_network_connected()) {
    clear_msg();
    set_has_network_connected();
    msg_.network_connected_ = CreateMaybeMessage< ::xpilot::NetworkConnected >(GetArena());
  }
  return msg_.network_connected_;
}
inline ::xpilot::NetworkConnected* Wrapper::mutable_network_connected() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.network_connected)
  return _internal_mutable_network_connected();
}

// .xpilot.NetworkDisconnected network_disconnected = 13;
inline bool Wrapper::_internal_has_network_disconnected() const {
  return msg_case() == kNetworkDisconnected;
}
inline bool Wrapper::has_network_disconnected() const {
  return _internal_has_network_disconnected();
}
inline void Wrapper::set_has_network_disconnected() {
  _oneof_case_[0] = kNetworkDisconnected;
}
inline ::xpilot::NetworkDisconnected* Wrapper::release_network_disconnected() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.network_disconnected)
  if (_internal_has_network_disconnected()) {
    clear_has_msg();
      ::xpilot::NetworkDisconnected* temp = msg_.network_disconnected_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.network_disconnected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::NetworkDisconnected& Wrapper::_internal_network_disconnected() const {
  return _internal_has_network_disconnected()
      ? *msg_.network_disconnected_
      : reinterpret_cast< ::xpilot::NetworkDisconnected&>(::xpilot::_NetworkDisconnected_default_instance_);
}
inline const ::xpilot::NetworkDisconnected& Wrapper::network_disconnected() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.network_disconnected)
  return _internal_network_disconnected();
}
inline ::xpilot::NetworkDisconnected* Wrapper::unsafe_arena_release_network_disconnected() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.network_disconnected)
  if (_internal_has_network_disconnected()) {
    clear_has_msg();
    ::xpilot::NetworkDisconnected* temp = msg_.network_disconnected_;
    msg_.network_disconnected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_network_disconnected(::xpilot::NetworkDisconnected* network_disconnected) {
  clear_msg();
  if (network_disconnected) {
    set_has_network_disconnected();
    msg_.network_disconnected_ = network_disconnected;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.network_disconnected)
}
inline ::xpilot::NetworkDisconnected* Wrapper::_internal_mutable_network_disconnected() {
  if (!_internal_has_network_disconnected()) {
    clear_msg();
    set_has_network_disconnected();
    msg_.network_disconnected_ = CreateMaybeMessage< ::xpilot::NetworkDisconnected >(GetArena());
  }
  return msg_.network_disconnected_;
}
inline ::xpilot::NetworkDisconnected* Wrapper::mutable_network_disconnected() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.network_disconnected)
  return _internal_mutable_network_disconnected();
}

// .xpilot.NearbyControllers nearby_controllers = 14;
inline bool Wrapper::_internal_has_nearby_controllers() const {
  return msg_case() == kNearbyControllers;
}
inline bool Wrapper::has_nearby_controllers() const {
  return _internal_has_nearby_controllers();
}
inline void Wrapper::set_has_nearby_controllers() {
  _oneof_case_[0] = kNearbyControllers;
}
inline ::xpilot::NearbyControllers* Wrapper::release_nearby_controllers() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.nearby_controllers)
  if (_internal_has_nearby_controllers()) {
    clear_has_msg();
      ::xpilot::NearbyControllers* temp = msg_.nearby_controllers_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.nearby_controllers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::NearbyControllers& Wrapper::_internal_nearby_controllers() const {
  return _internal_has_nearby_controllers()
      ? *msg_.nearby_controllers_
      : reinterpret_cast< ::xpilot::NearbyControllers&>(::xpilot::_NearbyControllers_default_instance_);
}
inline const ::xpilot::NearbyControllers& Wrapper::nearby_controllers() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.nearby_controllers)
  return _internal_nearby_controllers();
}
inline ::xpilot::NearbyControllers* Wrapper::unsafe_arena_release_nearby_controllers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.nearby_controllers)
  if (_internal_has_nearby_controllers()) {
    clear_has_msg();
    ::xpilot::NearbyControllers* temp = msg_.nearby_controllers_;
    msg_.nearby_controllers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_nearby_controllers(::xpilot::NearbyControllers* nearby_controllers) {
  clear_msg();
  if (nearby_controllers) {
    set_has_nearby_controllers();
    msg_.nearby_controllers_ = nearby_controllers;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.nearby_controllers)
}
inline ::xpilot::NearbyControllers* Wrapper::_internal_mutable_nearby_controllers() {
  if (!_internal_has_nearby_controllers()) {
    clear_msg();
    set_has_nearby_controllers();
    msg_.nearby_controllers_ = CreateMaybeMessage< ::xpilot::NearbyControllers >(GetArena());
  }
  return msg_.nearby_controllers_;
}
inline ::xpilot::NearbyControllers* Wrapper::mutable_nearby_controllers() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.nearby_controllers)
  return _internal_mutable_nearby_controllers();
}

// .xpilot.SetTransponder set_transponder = 15;
inline bool Wrapper::_internal_has_set_transponder() const {
  return msg_case() == kSetTransponder;
}
inline bool Wrapper::has_set_transponder() const {
  return _internal_has_set_transponder();
}
inline void Wrapper::set_has_set_transponder() {
  _oneof_case_[0] = kSetTransponder;
}
inline ::xpilot::SetTransponder* Wrapper::release_set_transponder() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.set_transponder)
  if (_internal_has_set_transponder()) {
    clear_has_msg();
      ::xpilot::SetTransponder* temp = msg_.set_transponder_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.set_transponder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::SetTransponder& Wrapper::_internal_set_transponder() const {
  return _internal_has_set_transponder()
      ? *msg_.set_transponder_
      : reinterpret_cast< ::xpilot::SetTransponder&>(::xpilot::_SetTransponder_default_instance_);
}
inline const ::xpilot::SetTransponder& Wrapper::set_transponder() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.set_transponder)
  return _internal_set_transponder();
}
inline ::xpilot::SetTransponder* Wrapper::unsafe_arena_release_set_transponder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.set_transponder)
  if (_internal_has_set_transponder()) {
    clear_has_msg();
    ::xpilot::SetTransponder* temp = msg_.set_transponder_;
    msg_.set_transponder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_set_transponder(::xpilot::SetTransponder* set_transponder) {
  clear_msg();
  if (set_transponder) {
    set_has_set_transponder();
    msg_.set_transponder_ = set_transponder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.set_transponder)
}
inline ::xpilot::SetTransponder* Wrapper::_internal_mutable_set_transponder() {
  if (!_internal_has_set_transponder()) {
    clear_msg();
    set_has_set_transponder();
    msg_.set_transponder_ = CreateMaybeMessage< ::xpilot::SetTransponder >(GetArena());
  }
  return msg_.set_transponder_;
}
inline ::xpilot::SetTransponder* Wrapper::mutable_set_transponder() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.set_transponder)
  return _internal_mutable_set_transponder();
}

// .xpilot.SetRadioStack set_radiostack = 16;
inline bool Wrapper::_internal_has_set_radiostack() const {
  return msg_case() == kSetRadiostack;
}
inline bool Wrapper::has_set_radiostack() const {
  return _internal_has_set_radiostack();
}
inline void Wrapper::set_has_set_radiostack() {
  _oneof_case_[0] = kSetRadiostack;
}
inline ::xpilot::SetRadioStack* Wrapper::release_set_radiostack() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.set_radiostack)
  if (_internal_has_set_radiostack()) {
    clear_has_msg();
      ::xpilot::SetRadioStack* temp = msg_.set_radiostack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.set_radiostack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::SetRadioStack& Wrapper::_internal_set_radiostack() const {
  return _internal_has_set_radiostack()
      ? *msg_.set_radiostack_
      : reinterpret_cast< ::xpilot::SetRadioStack&>(::xpilot::_SetRadioStack_default_instance_);
}
inline const ::xpilot::SetRadioStack& Wrapper::set_radiostack() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.set_radiostack)
  return _internal_set_radiostack();
}
inline ::xpilot::SetRadioStack* Wrapper::unsafe_arena_release_set_radiostack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.set_radiostack)
  if (_internal_has_set_radiostack()) {
    clear_has_msg();
    ::xpilot::SetRadioStack* temp = msg_.set_radiostack_;
    msg_.set_radiostack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_set_radiostack(::xpilot::SetRadioStack* set_radiostack) {
  clear_msg();
  if (set_radiostack) {
    set_has_set_radiostack();
    msg_.set_radiostack_ = set_radiostack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.set_radiostack)
}
inline ::xpilot::SetRadioStack* Wrapper::_internal_mutable_set_radiostack() {
  if (!_internal_has_set_radiostack()) {
    clear_msg();
    set_has_set_radiostack();
    msg_.set_radiostack_ = CreateMaybeMessage< ::xpilot::SetRadioStack >(GetArena());
  }
  return msg_.set_radiostack_;
}
inline ::xpilot::SetRadioStack* Wrapper::mutable_set_radiostack() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.set_radiostack)
  return _internal_mutable_set_radiostack();
}

// .xpilot.PluginInformation plugin_information = 17;
inline bool Wrapper::_internal_has_plugin_information() const {
  return msg_case() == kPluginInformation;
}
inline bool Wrapper::has_plugin_information() const {
  return _internal_has_plugin_information();
}
inline void Wrapper::set_has_plugin_information() {
  _oneof_case_[0] = kPluginInformation;
}
inline ::xpilot::PluginInformation* Wrapper::release_plugin_information() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.plugin_information)
  if (_internal_has_plugin_information()) {
    clear_has_msg();
      ::xpilot::PluginInformation* temp = msg_.plugin_information_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.plugin_information_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::PluginInformation& Wrapper::_internal_plugin_information() const {
  return _internal_has_plugin_information()
      ? *msg_.plugin_information_
      : reinterpret_cast< ::xpilot::PluginInformation&>(::xpilot::_PluginInformation_default_instance_);
}
inline const ::xpilot::PluginInformation& Wrapper::plugin_information() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.plugin_information)
  return _internal_plugin_information();
}
inline ::xpilot::PluginInformation* Wrapper::unsafe_arena_release_plugin_information() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.plugin_information)
  if (_internal_has_plugin_information()) {
    clear_has_msg();
    ::xpilot::PluginInformation* temp = msg_.plugin_information_;
    msg_.plugin_information_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_plugin_information(::xpilot::PluginInformation* plugin_information) {
  clear_msg();
  if (plugin_information) {
    set_has_plugin_information();
    msg_.plugin_information_ = plugin_information;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.plugin_information)
}
inline ::xpilot::PluginInformation* Wrapper::_internal_mutable_plugin_information() {
  if (!_internal_has_plugin_information()) {
    clear_msg();
    set_has_plugin_information();
    msg_.plugin_information_ = CreateMaybeMessage< ::xpilot::PluginInformation >(GetArena());
  }
  return msg_.plugin_information_;
}
inline ::xpilot::PluginInformation* Wrapper::mutable_plugin_information() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.plugin_information)
  return _internal_mutable_plugin_information();
}

// .xpilot.CslValidation csl_validation = 18;
inline bool Wrapper::_internal_has_csl_validation() const {
  return msg_case() == kCslValidation;
}
inline bool Wrapper::has_csl_validation() const {
  return _internal_has_csl_validation();
}
inline void Wrapper::set_has_csl_validation() {
  _oneof_case_[0] = kCslValidation;
}
inline ::xpilot::CslValidation* Wrapper::release_csl_validation() {
  // @@protoc_insertion_point(field_release:xpilot.Wrapper.csl_validation)
  if (_internal_has_csl_validation()) {
    clear_has_msg();
      ::xpilot::CslValidation* temp = msg_.csl_validation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.csl_validation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::xpilot::CslValidation& Wrapper::_internal_csl_validation() const {
  return _internal_has_csl_validation()
      ? *msg_.csl_validation_
      : reinterpret_cast< ::xpilot::CslValidation&>(::xpilot::_CslValidation_default_instance_);
}
inline const ::xpilot::CslValidation& Wrapper::csl_validation() const {
  // @@protoc_insertion_point(field_get:xpilot.Wrapper.csl_validation)
  return _internal_csl_validation();
}
inline ::xpilot::CslValidation* Wrapper::unsafe_arena_release_csl_validation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xpilot.Wrapper.csl_validation)
  if (_internal_has_csl_validation()) {
    clear_has_msg();
    ::xpilot::CslValidation* temp = msg_.csl_validation_;
    msg_.csl_validation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_csl_validation(::xpilot::CslValidation* csl_validation) {
  clear_msg();
  if (csl_validation) {
    set_has_csl_validation();
    msg_.csl_validation_ = csl_validation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.Wrapper.csl_validation)
}
inline ::xpilot::CslValidation* Wrapper::_internal_mutable_csl_validation() {
  if (!_internal_has_csl_validation()) {
    clear_msg();
    set_has_csl_validation();
    msg_.csl_validation_ = CreateMaybeMessage< ::xpilot::CslValidation >(GetArena());
  }
  return msg_.csl_validation_;
}
inline ::xpilot::CslValidation* Wrapper::mutable_csl_validation() {
  // @@protoc_insertion_point(field_mutable:xpilot.Wrapper.csl_validation)
  return _internal_mutable_csl_validation();
}

inline bool Wrapper::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Wrapper::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Wrapper::MsgCase Wrapper::msg_case() const {
  return Wrapper::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Wrapper_2eproto
