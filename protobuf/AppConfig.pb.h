// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AppConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AppConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AppConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AppConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AppConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AppConfig_2eproto;
namespace xpilot {
class AppConfig;
struct AppConfigDefaultTypeInternal;
extern AppConfigDefaultTypeInternal _AppConfig_default_instance_;
class AppConfig_AudioDriversEntry_DoNotUse;
struct AppConfig_AudioDriversEntry_DoNotUseDefaultTypeInternal;
extern AppConfig_AudioDriversEntry_DoNotUseDefaultTypeInternal _AppConfig_AudioDriversEntry_DoNotUse_default_instance_;
class AppConfig_InputDevicesEntry_DoNotUse;
struct AppConfig_InputDevicesEntry_DoNotUseDefaultTypeInternal;
extern AppConfig_InputDevicesEntry_DoNotUseDefaultTypeInternal _AppConfig_InputDevicesEntry_DoNotUse_default_instance_;
class AppConfig_NetworkServerInfo;
struct AppConfig_NetworkServerInfoDefaultTypeInternal;
extern AppConfig_NetworkServerInfoDefaultTypeInternal _AppConfig_NetworkServerInfo_default_instance_;
class AppConfig_OutputDevicesEntry_DoNotUse;
struct AppConfig_OutputDevicesEntry_DoNotUseDefaultTypeInternal;
extern AppConfig_OutputDevicesEntry_DoNotUseDefaultTypeInternal _AppConfig_OutputDevicesEntry_DoNotUse_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::AppConfig* Arena::CreateMaybeMessage<::xpilot::AppConfig>(Arena*);
template<> ::xpilot::AppConfig_AudioDriversEntry_DoNotUse* Arena::CreateMaybeMessage<::xpilot::AppConfig_AudioDriversEntry_DoNotUse>(Arena*);
template<> ::xpilot::AppConfig_InputDevicesEntry_DoNotUse* Arena::CreateMaybeMessage<::xpilot::AppConfig_InputDevicesEntry_DoNotUse>(Arena*);
template<> ::xpilot::AppConfig_NetworkServerInfo* Arena::CreateMaybeMessage<::xpilot::AppConfig_NetworkServerInfo>(Arena*);
template<> ::xpilot::AppConfig_OutputDevicesEntry_DoNotUse* Arena::CreateMaybeMessage<::xpilot::AppConfig_OutputDevicesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class AppConfig_NetworkServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.AppConfig.NetworkServerInfo) */ {
 public:
  inline AppConfig_NetworkServerInfo() : AppConfig_NetworkServerInfo(nullptr) {}
  ~AppConfig_NetworkServerInfo() override;
  explicit constexpr AppConfig_NetworkServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppConfig_NetworkServerInfo(const AppConfig_NetworkServerInfo& from);
  AppConfig_NetworkServerInfo(AppConfig_NetworkServerInfo&& from) noexcept
    : AppConfig_NetworkServerInfo() {
    *this = ::std::move(from);
  }

  inline AppConfig_NetworkServerInfo& operator=(const AppConfig_NetworkServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppConfig_NetworkServerInfo& operator=(AppConfig_NetworkServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppConfig_NetworkServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppConfig_NetworkServerInfo* internal_default_instance() {
    return reinterpret_cast<const AppConfig_NetworkServerInfo*>(
               &_AppConfig_NetworkServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppConfig_NetworkServerInfo& a, AppConfig_NetworkServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppConfig_NetworkServerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppConfig_NetworkServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppConfig_NetworkServerInfo* New() const final {
    return new AppConfig_NetworkServerInfo();
  }

  AppConfig_NetworkServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppConfig_NetworkServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppConfig_NetworkServerInfo& from);
  void MergeFrom(const AppConfig_NetworkServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppConfig_NetworkServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.AppConfig.NetworkServerInfo";
  }
  protected:
  explicit AppConfig_NetworkServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:xpilot.AppConfig.NetworkServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  friend struct ::TableStruct_AppConfig_2eproto;
};
// -------------------------------------------------------------------

class AppConfig_InputDevicesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppConfig_InputDevicesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppConfig_InputDevicesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppConfig_InputDevicesEntry_DoNotUse();
  explicit constexpr AppConfig_InputDevicesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppConfig_InputDevicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppConfig_InputDevicesEntry_DoNotUse& other);
  static const AppConfig_InputDevicesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppConfig_InputDevicesEntry_DoNotUse*>(&_AppConfig_InputDevicesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xpilot.AppConfig.InputDevicesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AppConfig_OutputDevicesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppConfig_OutputDevicesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppConfig_OutputDevicesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppConfig_OutputDevicesEntry_DoNotUse();
  explicit constexpr AppConfig_OutputDevicesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppConfig_OutputDevicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppConfig_OutputDevicesEntry_DoNotUse& other);
  static const AppConfig_OutputDevicesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppConfig_OutputDevicesEntry_DoNotUse*>(&_AppConfig_OutputDevicesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xpilot.AppConfig.OutputDevicesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AppConfig_AudioDriversEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppConfig_AudioDriversEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppConfig_AudioDriversEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppConfig_AudioDriversEntry_DoNotUse();
  explicit constexpr AppConfig_AudioDriversEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppConfig_AudioDriversEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppConfig_AudioDriversEntry_DoNotUse& other);
  static const AppConfig_AudioDriversEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppConfig_AudioDriversEntry_DoNotUse*>(&_AppConfig_AudioDriversEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "xpilot.AppConfig.AudioDriversEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AppConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.AppConfig) */ {
 public:
  inline AppConfig() : AppConfig(nullptr) {}
  ~AppConfig() override;
  explicit constexpr AppConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppConfig(const AppConfig& from);
  AppConfig(AppConfig&& from) noexcept
    : AppConfig() {
    *this = ::std::move(from);
  }

  inline AppConfig& operator=(const AppConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppConfig& operator=(AppConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppConfig* internal_default_instance() {
    return reinterpret_cast<const AppConfig*>(
               &_AppConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppConfig& a, AppConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AppConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppConfig* New() const final {
    return new AppConfig();
  }

  AppConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppConfig& from);
  void MergeFrom(const AppConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.AppConfig";
  }
  protected:
  explicit AppConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AppConfig_NetworkServerInfo NetworkServerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kInputDevicesFieldNumber = 8,
    kOutputDevicesFieldNumber = 9,
    kAudioDriversFieldNumber = 10,
    kServerListFieldNumber = 14,
    kVatsimIdFieldNumber = 1,
    kVatsimPasswordFieldNumber = 2,
    kNameFieldNumber = 3,
    kHomeAirportFieldNumber = 4,
    kInputDeviceNameFieldNumber = 11,
    kOutputDeviceNameFieldNumber = 12,
    kAudioDriverFieldNumber = 13,
    kCom1VolumeFieldNumber = 6,
    kCom2VolumeFieldNumber = 7,
    kHfSquelchFieldNumber = 5,
    kAutoSquawkModecFieldNumber = 15,
    kEnableNotificationSoundsFieldNumber = 16,
  };
  // map<int32, string> input_devices = 8;
  int input_devices_size() const;
  private:
  int _internal_input_devices_size() const;
  public:
  void clear_input_devices();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_input_devices() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_input_devices();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      input_devices() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_input_devices();

  // map<int32, string> output_devices = 9;
  int output_devices_size() const;
  private:
  int _internal_output_devices_size() const;
  public:
  void clear_output_devices();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_output_devices() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_output_devices();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      output_devices() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_output_devices();

  // map<int32, string> audio_drivers = 10;
  int audio_drivers_size() const;
  private:
  int _internal_audio_drivers_size() const;
  public:
  void clear_audio_drivers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_audio_drivers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_audio_drivers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      audio_drivers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_audio_drivers();

  // repeated .xpilot.AppConfig.NetworkServerInfo server_list = 14;
  int server_list_size() const;
  private:
  int _internal_server_list_size() const;
  public:
  void clear_server_list();
  ::xpilot::AppConfig_NetworkServerInfo* mutable_server_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::AppConfig_NetworkServerInfo >*
      mutable_server_list();
  private:
  const ::xpilot::AppConfig_NetworkServerInfo& _internal_server_list(int index) const;
  ::xpilot::AppConfig_NetworkServerInfo* _internal_add_server_list();
  public:
  const ::xpilot::AppConfig_NetworkServerInfo& server_list(int index) const;
  ::xpilot::AppConfig_NetworkServerInfo* add_server_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::AppConfig_NetworkServerInfo >&
      server_list() const;

  // optional string vatsim_id = 1;
  bool has_vatsim_id() const;
  private:
  bool _internal_has_vatsim_id() const;
  public:
  void clear_vatsim_id();
  const std::string& vatsim_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vatsim_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vatsim_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_vatsim_id();
  void set_allocated_vatsim_id(std::string* vatsim_id);
  private:
  const std::string& _internal_vatsim_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vatsim_id(const std::string& value);
  std::string* _internal_mutable_vatsim_id();
  public:

  // optional string vatsim_password = 2;
  bool has_vatsim_password() const;
  private:
  bool _internal_has_vatsim_password() const;
  public:
  void clear_vatsim_password();
  const std::string& vatsim_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vatsim_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vatsim_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_vatsim_password();
  void set_allocated_vatsim_password(std::string* vatsim_password);
  private:
  const std::string& _internal_vatsim_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vatsim_password(const std::string& value);
  std::string* _internal_mutable_vatsim_password();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string home_airport = 4;
  bool has_home_airport() const;
  private:
  bool _internal_has_home_airport() const;
  public:
  void clear_home_airport();
  const std::string& home_airport() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_home_airport(ArgT0&& arg0, ArgT... args);
  std::string* mutable_home_airport();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_home_airport();
  void set_allocated_home_airport(std::string* home_airport);
  private:
  const std::string& _internal_home_airport() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home_airport(const std::string& value);
  std::string* _internal_mutable_home_airport();
  public:

  // optional string input_device_name = 11;
  bool has_input_device_name() const;
  private:
  bool _internal_has_input_device_name() const;
  public:
  void clear_input_device_name();
  const std::string& input_device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_device_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_input_device_name();
  void set_allocated_input_device_name(std::string* input_device_name);
  private:
  const std::string& _internal_input_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_device_name(const std::string& value);
  std::string* _internal_mutable_input_device_name();
  public:

  // optional string output_device_name = 12;
  bool has_output_device_name() const;
  private:
  bool _internal_has_output_device_name() const;
  public:
  void clear_output_device_name();
  const std::string& output_device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output_device_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_output_device_name();
  void set_allocated_output_device_name(std::string* output_device_name);
  private:
  const std::string& _internal_output_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_device_name(const std::string& value);
  std::string* _internal_mutable_output_device_name();
  public:

  // optional string audio_driver = 13;
  bool has_audio_driver() const;
  private:
  bool _internal_has_audio_driver() const;
  public:
  void clear_audio_driver();
  const std::string& audio_driver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_driver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_driver();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_audio_driver();
  void set_allocated_audio_driver(std::string* audio_driver);
  private:
  const std::string& _internal_audio_driver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_driver(const std::string& value);
  std::string* _internal_mutable_audio_driver();
  public:

  // optional float com1_volume = 6;
  bool has_com1_volume() const;
  private:
  bool _internal_has_com1_volume() const;
  public:
  void clear_com1_volume();
  float com1_volume() const;
  void set_com1_volume(float value);
  private:
  float _internal_com1_volume() const;
  void _internal_set_com1_volume(float value);
  public:

  // optional float com2_volume = 7;
  bool has_com2_volume() const;
  private:
  bool _internal_has_com2_volume() const;
  public:
  void clear_com2_volume();
  float com2_volume() const;
  void set_com2_volume(float value);
  private:
  float _internal_com2_volume() const;
  void _internal_set_com2_volume(float value);
  public:

  // optional bool hf_squelch = 5;
  bool has_hf_squelch() const;
  private:
  bool _internal_has_hf_squelch() const;
  public:
  void clear_hf_squelch();
  bool hf_squelch() const;
  void set_hf_squelch(bool value);
  private:
  bool _internal_hf_squelch() const;
  void _internal_set_hf_squelch(bool value);
  public:

  // optional bool auto_squawk_modec = 15;
  bool has_auto_squawk_modec() const;
  private:
  bool _internal_has_auto_squawk_modec() const;
  public:
  void clear_auto_squawk_modec();
  bool auto_squawk_modec() const;
  void set_auto_squawk_modec(bool value);
  private:
  bool _internal_auto_squawk_modec() const;
  void _internal_set_auto_squawk_modec(bool value);
  public:

  // optional bool enable_notification_sounds = 16;
  bool has_enable_notification_sounds() const;
  private:
  bool _internal_has_enable_notification_sounds() const;
  public:
  void clear_enable_notification_sounds();
  bool enable_notification_sounds() const;
  void set_enable_notification_sounds(bool value);
  private:
  bool _internal_enable_notification_sounds() const;
  void _internal_set_enable_notification_sounds(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.AppConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppConfig_InputDevicesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> input_devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppConfig_OutputDevicesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> output_devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppConfig_AudioDriversEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> audio_drivers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::AppConfig_NetworkServerInfo > server_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vatsim_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vatsim_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_airport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_driver_;
  float com1_volume_;
  float com2_volume_;
  bool hf_squelch_;
  bool auto_squawk_modec_;
  bool enable_notification_sounds_;
  friend struct ::TableStruct_AppConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppConfig_NetworkServerInfo

// optional string name = 1;
inline bool AppConfig_NetworkServerInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppConfig_NetworkServerInfo::has_name() const {
  return _internal_has_name();
}
inline void AppConfig_NetworkServerInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppConfig_NetworkServerInfo::name() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.NetworkServerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig_NetworkServerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.NetworkServerInfo.name)
}
inline std::string* AppConfig_NetworkServerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.NetworkServerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& AppConfig_NetworkServerInfo::_internal_name() const {
  return name_.Get();
}
inline void AppConfig_NetworkServerInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig_NetworkServerInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig_NetworkServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.NetworkServerInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig_NetworkServerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.NetworkServerInfo.name)
}

// optional string address = 2;
inline bool AppConfig_NetworkServerInfo::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppConfig_NetworkServerInfo::has_address() const {
  return _internal_has_address();
}
inline void AppConfig_NetworkServerInfo::clear_address() {
  address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppConfig_NetworkServerInfo::address() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.NetworkServerInfo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig_NetworkServerInfo::set_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.NetworkServerInfo.address)
}
inline std::string* AppConfig_NetworkServerInfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.NetworkServerInfo.address)
  return _internal_mutable_address();
}
inline const std::string& AppConfig_NetworkServerInfo::_internal_address() const {
  return address_.Get();
}
inline void AppConfig_NetworkServerInfo::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig_NetworkServerInfo::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000002u;
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig_NetworkServerInfo::release_address() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.NetworkServerInfo.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig_NetworkServerInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.NetworkServerInfo.address)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppConfig

// optional string vatsim_id = 1;
inline bool AppConfig::_internal_has_vatsim_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppConfig::has_vatsim_id() const {
  return _internal_has_vatsim_id();
}
inline void AppConfig::clear_vatsim_id() {
  vatsim_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppConfig::vatsim_id() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.vatsim_id)
  return _internal_vatsim_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig::set_vatsim_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 vatsim_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.vatsim_id)
}
inline std::string* AppConfig::mutable_vatsim_id() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.vatsim_id)
  return _internal_mutable_vatsim_id();
}
inline const std::string& AppConfig::_internal_vatsim_id() const {
  return vatsim_id_.Get();
}
inline void AppConfig::_internal_set_vatsim_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vatsim_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig::_internal_mutable_vatsim_id() {
  _has_bits_[0] |= 0x00000001u;
  return vatsim_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig::release_vatsim_id() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.vatsim_id)
  if (!_internal_has_vatsim_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vatsim_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig::set_allocated_vatsim_id(std::string* vatsim_id) {
  if (vatsim_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vatsim_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vatsim_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.vatsim_id)
}

// optional string vatsim_password = 2;
inline bool AppConfig::_internal_has_vatsim_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppConfig::has_vatsim_password() const {
  return _internal_has_vatsim_password();
}
inline void AppConfig::clear_vatsim_password() {
  vatsim_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AppConfig::vatsim_password() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.vatsim_password)
  return _internal_vatsim_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig::set_vatsim_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 vatsim_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.vatsim_password)
}
inline std::string* AppConfig::mutable_vatsim_password() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.vatsim_password)
  return _internal_mutable_vatsim_password();
}
inline const std::string& AppConfig::_internal_vatsim_password() const {
  return vatsim_password_.Get();
}
inline void AppConfig::_internal_set_vatsim_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vatsim_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig::_internal_mutable_vatsim_password() {
  _has_bits_[0] |= 0x00000002u;
  return vatsim_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig::release_vatsim_password() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.vatsim_password)
  if (!_internal_has_vatsim_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vatsim_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig::set_allocated_vatsim_password(std::string* vatsim_password) {
  if (vatsim_password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vatsim_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vatsim_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.vatsim_password)
}

// optional string name = 3;
inline bool AppConfig::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppConfig::has_name() const {
  return _internal_has_name();
}
inline void AppConfig::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AppConfig::name() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.name)
}
inline std::string* AppConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.name)
  return _internal_mutable_name();
}
inline const std::string& AppConfig::_internal_name() const {
  return name_.Get();
}
inline void AppConfig::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig::release_name() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.name)
}

// optional string home_airport = 4;
inline bool AppConfig::_internal_has_home_airport() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppConfig::has_home_airport() const {
  return _internal_has_home_airport();
}
inline void AppConfig::clear_home_airport() {
  home_airport_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AppConfig::home_airport() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.home_airport)
  return _internal_home_airport();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig::set_home_airport(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 home_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.home_airport)
}
inline std::string* AppConfig::mutable_home_airport() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.home_airport)
  return _internal_mutable_home_airport();
}
inline const std::string& AppConfig::_internal_home_airport() const {
  return home_airport_.Get();
}
inline void AppConfig::_internal_set_home_airport(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  home_airport_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig::_internal_mutable_home_airport() {
  _has_bits_[0] |= 0x00000008u;
  return home_airport_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig::release_home_airport() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.home_airport)
  if (!_internal_has_home_airport()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return home_airport_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig::set_allocated_home_airport(std::string* home_airport) {
  if (home_airport != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  home_airport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), home_airport,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.home_airport)
}

// optional bool hf_squelch = 5;
inline bool AppConfig::_internal_has_hf_squelch() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AppConfig::has_hf_squelch() const {
  return _internal_has_hf_squelch();
}
inline void AppConfig::clear_hf_squelch() {
  hf_squelch_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool AppConfig::_internal_hf_squelch() const {
  return hf_squelch_;
}
inline bool AppConfig::hf_squelch() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.hf_squelch)
  return _internal_hf_squelch();
}
inline void AppConfig::_internal_set_hf_squelch(bool value) {
  _has_bits_[0] |= 0x00000200u;
  hf_squelch_ = value;
}
inline void AppConfig::set_hf_squelch(bool value) {
  _internal_set_hf_squelch(value);
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.hf_squelch)
}

// optional float com1_volume = 6;
inline bool AppConfig::_internal_has_com1_volume() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AppConfig::has_com1_volume() const {
  return _internal_has_com1_volume();
}
inline void AppConfig::clear_com1_volume() {
  com1_volume_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float AppConfig::_internal_com1_volume() const {
  return com1_volume_;
}
inline float AppConfig::com1_volume() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.com1_volume)
  return _internal_com1_volume();
}
inline void AppConfig::_internal_set_com1_volume(float value) {
  _has_bits_[0] |= 0x00000080u;
  com1_volume_ = value;
}
inline void AppConfig::set_com1_volume(float value) {
  _internal_set_com1_volume(value);
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.com1_volume)
}

// optional float com2_volume = 7;
inline bool AppConfig::_internal_has_com2_volume() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AppConfig::has_com2_volume() const {
  return _internal_has_com2_volume();
}
inline void AppConfig::clear_com2_volume() {
  com2_volume_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float AppConfig::_internal_com2_volume() const {
  return com2_volume_;
}
inline float AppConfig::com2_volume() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.com2_volume)
  return _internal_com2_volume();
}
inline void AppConfig::_internal_set_com2_volume(float value) {
  _has_bits_[0] |= 0x00000100u;
  com2_volume_ = value;
}
inline void AppConfig::set_com2_volume(float value) {
  _internal_set_com2_volume(value);
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.com2_volume)
}

// map<int32, string> input_devices = 8;
inline int AppConfig::_internal_input_devices_size() const {
  return input_devices_.size();
}
inline int AppConfig::input_devices_size() const {
  return _internal_input_devices_size();
}
inline void AppConfig::clear_input_devices() {
  input_devices_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
AppConfig::_internal_input_devices() const {
  return input_devices_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
AppConfig::input_devices() const {
  // @@protoc_insertion_point(field_map:xpilot.AppConfig.input_devices)
  return _internal_input_devices();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
AppConfig::_internal_mutable_input_devices() {
  return input_devices_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
AppConfig::mutable_input_devices() {
  // @@protoc_insertion_point(field_mutable_map:xpilot.AppConfig.input_devices)
  return _internal_mutable_input_devices();
}

// map<int32, string> output_devices = 9;
inline int AppConfig::_internal_output_devices_size() const {
  return output_devices_.size();
}
inline int AppConfig::output_devices_size() const {
  return _internal_output_devices_size();
}
inline void AppConfig::clear_output_devices() {
  output_devices_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
AppConfig::_internal_output_devices() const {
  return output_devices_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
AppConfig::output_devices() const {
  // @@protoc_insertion_point(field_map:xpilot.AppConfig.output_devices)
  return _internal_output_devices();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
AppConfig::_internal_mutable_output_devices() {
  return output_devices_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
AppConfig::mutable_output_devices() {
  // @@protoc_insertion_point(field_mutable_map:xpilot.AppConfig.output_devices)
  return _internal_mutable_output_devices();
}

// map<int32, string> audio_drivers = 10;
inline int AppConfig::_internal_audio_drivers_size() const {
  return audio_drivers_.size();
}
inline int AppConfig::audio_drivers_size() const {
  return _internal_audio_drivers_size();
}
inline void AppConfig::clear_audio_drivers() {
  audio_drivers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
AppConfig::_internal_audio_drivers() const {
  return audio_drivers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
AppConfig::audio_drivers() const {
  // @@protoc_insertion_point(field_map:xpilot.AppConfig.audio_drivers)
  return _internal_audio_drivers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
AppConfig::_internal_mutable_audio_drivers() {
  return audio_drivers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
AppConfig::mutable_audio_drivers() {
  // @@protoc_insertion_point(field_mutable_map:xpilot.AppConfig.audio_drivers)
  return _internal_mutable_audio_drivers();
}

// optional string input_device_name = 11;
inline bool AppConfig::_internal_has_input_device_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppConfig::has_input_device_name() const {
  return _internal_has_input_device_name();
}
inline void AppConfig::clear_input_device_name() {
  input_device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AppConfig::input_device_name() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.input_device_name)
  return _internal_input_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig::set_input_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 input_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.input_device_name)
}
inline std::string* AppConfig::mutable_input_device_name() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.input_device_name)
  return _internal_mutable_input_device_name();
}
inline const std::string& AppConfig::_internal_input_device_name() const {
  return input_device_name_.Get();
}
inline void AppConfig::_internal_set_input_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  input_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig::_internal_mutable_input_device_name() {
  _has_bits_[0] |= 0x00000010u;
  return input_device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig::release_input_device_name() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.input_device_name)
  if (!_internal_has_input_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return input_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig::set_allocated_input_device_name(std::string* input_device_name) {
  if (input_device_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  input_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_device_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.input_device_name)
}

// optional string output_device_name = 12;
inline bool AppConfig::_internal_has_output_device_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AppConfig::has_output_device_name() const {
  return _internal_has_output_device_name();
}
inline void AppConfig::clear_output_device_name() {
  output_device_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AppConfig::output_device_name() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.output_device_name)
  return _internal_output_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig::set_output_device_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 output_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.output_device_name)
}
inline std::string* AppConfig::mutable_output_device_name() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.output_device_name)
  return _internal_mutable_output_device_name();
}
inline const std::string& AppConfig::_internal_output_device_name() const {
  return output_device_name_.Get();
}
inline void AppConfig::_internal_set_output_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  output_device_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig::_internal_mutable_output_device_name() {
  _has_bits_[0] |= 0x00000020u;
  return output_device_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig::release_output_device_name() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.output_device_name)
  if (!_internal_has_output_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return output_device_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig::set_allocated_output_device_name(std::string* output_device_name) {
  if (output_device_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  output_device_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_device_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.output_device_name)
}

// optional string audio_driver = 13;
inline bool AppConfig::_internal_has_audio_driver() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AppConfig::has_audio_driver() const {
  return _internal_has_audio_driver();
}
inline void AppConfig::clear_audio_driver() {
  audio_driver_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AppConfig::audio_driver() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.audio_driver)
  return _internal_audio_driver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppConfig::set_audio_driver(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 audio_driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.audio_driver)
}
inline std::string* AppConfig::mutable_audio_driver() {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.audio_driver)
  return _internal_mutable_audio_driver();
}
inline const std::string& AppConfig::_internal_audio_driver() const {
  return audio_driver_.Get();
}
inline void AppConfig::_internal_set_audio_driver(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  audio_driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppConfig::_internal_mutable_audio_driver() {
  _has_bits_[0] |= 0x00000040u;
  return audio_driver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppConfig::release_audio_driver() {
  // @@protoc_insertion_point(field_release:xpilot.AppConfig.audio_driver)
  if (!_internal_has_audio_driver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return audio_driver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppConfig::set_allocated_audio_driver(std::string* audio_driver) {
  if (audio_driver != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  audio_driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_driver,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AppConfig.audio_driver)
}

// repeated .xpilot.AppConfig.NetworkServerInfo server_list = 14;
inline int AppConfig::_internal_server_list_size() const {
  return server_list_.size();
}
inline int AppConfig::server_list_size() const {
  return _internal_server_list_size();
}
inline void AppConfig::clear_server_list() {
  server_list_.Clear();
}
inline ::xpilot::AppConfig_NetworkServerInfo* AppConfig::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:xpilot.AppConfig.server_list)
  return server_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::AppConfig_NetworkServerInfo >*
AppConfig::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:xpilot.AppConfig.server_list)
  return &server_list_;
}
inline const ::xpilot::AppConfig_NetworkServerInfo& AppConfig::_internal_server_list(int index) const {
  return server_list_.Get(index);
}
inline const ::xpilot::AppConfig_NetworkServerInfo& AppConfig::server_list(int index) const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.server_list)
  return _internal_server_list(index);
}
inline ::xpilot::AppConfig_NetworkServerInfo* AppConfig::_internal_add_server_list() {
  return server_list_.Add();
}
inline ::xpilot::AppConfig_NetworkServerInfo* AppConfig::add_server_list() {
  // @@protoc_insertion_point(field_add:xpilot.AppConfig.server_list)
  return _internal_add_server_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xpilot::AppConfig_NetworkServerInfo >&
AppConfig::server_list() const {
  // @@protoc_insertion_point(field_list:xpilot.AppConfig.server_list)
  return server_list_;
}

// optional bool auto_squawk_modec = 15;
inline bool AppConfig::_internal_has_auto_squawk_modec() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AppConfig::has_auto_squawk_modec() const {
  return _internal_has_auto_squawk_modec();
}
inline void AppConfig::clear_auto_squawk_modec() {
  auto_squawk_modec_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool AppConfig::_internal_auto_squawk_modec() const {
  return auto_squawk_modec_;
}
inline bool AppConfig::auto_squawk_modec() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.auto_squawk_modec)
  return _internal_auto_squawk_modec();
}
inline void AppConfig::_internal_set_auto_squawk_modec(bool value) {
  _has_bits_[0] |= 0x00000400u;
  auto_squawk_modec_ = value;
}
inline void AppConfig::set_auto_squawk_modec(bool value) {
  _internal_set_auto_squawk_modec(value);
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.auto_squawk_modec)
}

// optional bool enable_notification_sounds = 16;
inline bool AppConfig::_internal_has_enable_notification_sounds() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AppConfig::has_enable_notification_sounds() const {
  return _internal_has_enable_notification_sounds();
}
inline void AppConfig::clear_enable_notification_sounds() {
  enable_notification_sounds_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool AppConfig::_internal_enable_notification_sounds() const {
  return enable_notification_sounds_;
}
inline bool AppConfig::enable_notification_sounds() const {
  // @@protoc_insertion_point(field_get:xpilot.AppConfig.enable_notification_sounds)
  return _internal_enable_notification_sounds();
}
inline void AppConfig::_internal_set_enable_notification_sounds(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_notification_sounds_ = value;
}
inline void AppConfig::set_enable_notification_sounds(bool value) {
  _internal_set_enable_notification_sounds(value);
  // @@protoc_insertion_point(field_set:xpilot.AppConfig.enable_notification_sounds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AppConfig_2eproto
