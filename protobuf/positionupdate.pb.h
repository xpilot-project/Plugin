// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: positionupdate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_positionupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_positionupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_positionupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_positionupdate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_positionupdate_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_positionupdate_2eproto_metadata_getter(int index);
namespace xpilot {
class PositionUpdate;
struct PositionUpdateDefaultTypeInternal;
extern PositionUpdateDefaultTypeInternal _PositionUpdate_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::PositionUpdate* Arena::CreateMaybeMessage<::xpilot::PositionUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class PositionUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.PositionUpdate) */ {
 public:
  inline PositionUpdate() : PositionUpdate(nullptr) {}
  virtual ~PositionUpdate();
  explicit constexpr PositionUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionUpdate(const PositionUpdate& from);
  PositionUpdate(PositionUpdate&& from) noexcept
    : PositionUpdate() {
    *this = ::std::move(from);
  }

  inline PositionUpdate& operator=(const PositionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionUpdate& operator=(PositionUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionUpdate* internal_default_instance() {
    return reinterpret_cast<const PositionUpdate*>(
               &_PositionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionUpdate& a, PositionUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionUpdate* New() const final {
    return CreateMaybeMessage<PositionUpdate>(nullptr);
  }

  PositionUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionUpdate& from);
  void MergeFrom(const PositionUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.PositionUpdate";
  }
  protected:
  explicit PositionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_positionupdate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallsignFieldNumber = 1,
    kOriginFieldNumber = 11,
    kDestinationFieldNumber = 12,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kAltitudeFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kPitchFieldNumber = 6,
    kBankFieldNumber = 7,
    kGroundSpeedFieldNumber = 8,
    kTransponderCodeFieldNumber = 9,
    kTransponderModeCFieldNumber = 10,
  };
  // string callsign = 1;
  bool has_callsign() const;
  private:
  bool _internal_has_callsign() const;
  public:
  void clear_callsign();
  const std::string& callsign() const;
  void set_callsign(const std::string& value);
  void set_callsign(std::string&& value);
  void set_callsign(const char* value);
  void set_callsign(const char* value, size_t size);
  std::string* mutable_callsign();
  std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // string origin = 11;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // string destination = 12;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // double latitude = 2;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 3;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 4;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // double heading = 5;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // double pitch = 6;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double bank = 7;
  bool has_bank() const;
  private:
  bool _internal_has_bank() const;
  public:
  void clear_bank();
  double bank() const;
  void set_bank(double value);
  private:
  double _internal_bank() const;
  void _internal_set_bank(double value);
  public:

  // double ground_speed = 8;
  bool has_ground_speed() const;
  private:
  bool _internal_has_ground_speed() const;
  public:
  void clear_ground_speed();
  double ground_speed() const;
  void set_ground_speed(double value);
  private:
  double _internal_ground_speed() const;
  void _internal_set_ground_speed(double value);
  public:

  // int32 transponder_code = 9;
  bool has_transponder_code() const;
  private:
  bool _internal_has_transponder_code() const;
  public:
  void clear_transponder_code();
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_code() const;
  void set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transponder_code() const;
  void _internal_set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool transponder_mode_c = 10;
  bool has_transponder_mode_c() const;
  private:
  bool _internal_has_transponder_mode_c() const;
  public:
  void clear_transponder_mode_c();
  bool transponder_mode_c() const;
  void set_transponder_mode_c(bool value);
  private:
  bool _internal_transponder_mode_c() const;
  void _internal_set_transponder_mode_c(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.PositionUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  double latitude_;
  double longitude_;
  double altitude_;
  double heading_;
  double pitch_;
  double bank_;
  double ground_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_code_;
  bool transponder_mode_c_;
  friend struct ::TableStruct_positionupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionUpdate

// string callsign = 1;
inline bool PositionUpdate::_internal_has_callsign() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionUpdate::has_callsign() const {
  return _internal_has_callsign();
}
inline void PositionUpdate::clear_callsign() {
  callsign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PositionUpdate::callsign() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.callsign)
  return _internal_callsign();
}
inline void PositionUpdate::set_callsign(const std::string& value) {
  _internal_set_callsign(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.callsign)
}
inline std::string* PositionUpdate::mutable_callsign() {
  // @@protoc_insertion_point(field_mutable:xpilot.PositionUpdate.callsign)
  return _internal_mutable_callsign();
}
inline const std::string& PositionUpdate::_internal_callsign() const {
  return callsign_.Get();
}
inline void PositionUpdate::_internal_set_callsign(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionUpdate::set_callsign(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xpilot.PositionUpdate.callsign)
}
inline void PositionUpdate::set_callsign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xpilot.PositionUpdate.callsign)
}
inline void PositionUpdate::set_callsign(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xpilot.PositionUpdate.callsign)
}
inline std::string* PositionUpdate::_internal_mutable_callsign() {
  _has_bits_[0] |= 0x00000001u;
  return callsign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionUpdate::release_callsign() {
  // @@protoc_insertion_point(field_release:xpilot.PositionUpdate.callsign)
  if (!_internal_has_callsign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return callsign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionUpdate::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xpilot.PositionUpdate.callsign)
}

// double latitude = 2;
inline bool PositionUpdate::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PositionUpdate::has_latitude() const {
  return _internal_has_latitude();
}
inline void PositionUpdate::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PositionUpdate::_internal_latitude() const {
  return latitude_;
}
inline double PositionUpdate::latitude() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.latitude)
  return _internal_latitude();
}
inline void PositionUpdate::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000008u;
  latitude_ = value;
}
inline void PositionUpdate::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.latitude)
}

// double longitude = 3;
inline bool PositionUpdate::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PositionUpdate::has_longitude() const {
  return _internal_has_longitude();
}
inline void PositionUpdate::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PositionUpdate::_internal_longitude() const {
  return longitude_;
}
inline double PositionUpdate::longitude() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.longitude)
  return _internal_longitude();
}
inline void PositionUpdate::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000010u;
  longitude_ = value;
}
inline void PositionUpdate::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.longitude)
}

// double altitude = 4;
inline bool PositionUpdate::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PositionUpdate::has_altitude() const {
  return _internal_has_altitude();
}
inline void PositionUpdate::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PositionUpdate::_internal_altitude() const {
  return altitude_;
}
inline double PositionUpdate::altitude() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.altitude)
  return _internal_altitude();
}
inline void PositionUpdate::_internal_set_altitude(double value) {
  _has_bits_[0] |= 0x00000020u;
  altitude_ = value;
}
inline void PositionUpdate::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.altitude)
}

// double heading = 5;
inline bool PositionUpdate::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PositionUpdate::has_heading() const {
  return _internal_has_heading();
}
inline void PositionUpdate::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double PositionUpdate::_internal_heading() const {
  return heading_;
}
inline double PositionUpdate::heading() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.heading)
  return _internal_heading();
}
inline void PositionUpdate::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000040u;
  heading_ = value;
}
inline void PositionUpdate::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.heading)
}

// double pitch = 6;
inline bool PositionUpdate::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PositionUpdate::has_pitch() const {
  return _internal_has_pitch();
}
inline void PositionUpdate::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PositionUpdate::_internal_pitch() const {
  return pitch_;
}
inline double PositionUpdate::pitch() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.pitch)
  return _internal_pitch();
}
inline void PositionUpdate::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000080u;
  pitch_ = value;
}
inline void PositionUpdate::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.pitch)
}

// double bank = 7;
inline bool PositionUpdate::_internal_has_bank() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PositionUpdate::has_bank() const {
  return _internal_has_bank();
}
inline void PositionUpdate::clear_bank() {
  bank_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double PositionUpdate::_internal_bank() const {
  return bank_;
}
inline double PositionUpdate::bank() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.bank)
  return _internal_bank();
}
inline void PositionUpdate::_internal_set_bank(double value) {
  _has_bits_[0] |= 0x00000100u;
  bank_ = value;
}
inline void PositionUpdate::set_bank(double value) {
  _internal_set_bank(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.bank)
}

// double ground_speed = 8;
inline bool PositionUpdate::_internal_has_ground_speed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PositionUpdate::has_ground_speed() const {
  return _internal_has_ground_speed();
}
inline void PositionUpdate::clear_ground_speed() {
  ground_speed_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double PositionUpdate::_internal_ground_speed() const {
  return ground_speed_;
}
inline double PositionUpdate::ground_speed() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.ground_speed)
  return _internal_ground_speed();
}
inline void PositionUpdate::_internal_set_ground_speed(double value) {
  _has_bits_[0] |= 0x00000200u;
  ground_speed_ = value;
}
inline void PositionUpdate::set_ground_speed(double value) {
  _internal_set_ground_speed(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.ground_speed)
}

// int32 transponder_code = 9;
inline bool PositionUpdate::_internal_has_transponder_code() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PositionUpdate::has_transponder_code() const {
  return _internal_has_transponder_code();
}
inline void PositionUpdate::clear_transponder_code() {
  transponder_code_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionUpdate::_internal_transponder_code() const {
  return transponder_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionUpdate::transponder_code() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.transponder_code)
  return _internal_transponder_code();
}
inline void PositionUpdate::_internal_set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  transponder_code_ = value;
}
inline void PositionUpdate::set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transponder_code(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.transponder_code)
}

// bool transponder_mode_c = 10;
inline bool PositionUpdate::_internal_has_transponder_mode_c() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PositionUpdate::has_transponder_mode_c() const {
  return _internal_has_transponder_mode_c();
}
inline void PositionUpdate::clear_transponder_mode_c() {
  transponder_mode_c_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PositionUpdate::_internal_transponder_mode_c() const {
  return transponder_mode_c_;
}
inline bool PositionUpdate::transponder_mode_c() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.transponder_mode_c)
  return _internal_transponder_mode_c();
}
inline void PositionUpdate::_internal_set_transponder_mode_c(bool value) {
  _has_bits_[0] |= 0x00000800u;
  transponder_mode_c_ = value;
}
inline void PositionUpdate::set_transponder_mode_c(bool value) {
  _internal_set_transponder_mode_c(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.transponder_mode_c)
}

// string origin = 11;
inline bool PositionUpdate::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionUpdate::has_origin() const {
  return _internal_has_origin();
}
inline void PositionUpdate::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PositionUpdate::origin() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.origin)
  return _internal_origin();
}
inline void PositionUpdate::set_origin(const std::string& value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.origin)
}
inline std::string* PositionUpdate::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:xpilot.PositionUpdate.origin)
  return _internal_mutable_origin();
}
inline const std::string& PositionUpdate::_internal_origin() const {
  return origin_.Get();
}
inline void PositionUpdate::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionUpdate::set_origin(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xpilot.PositionUpdate.origin)
}
inline void PositionUpdate::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xpilot.PositionUpdate.origin)
}
inline void PositionUpdate::set_origin(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xpilot.PositionUpdate.origin)
}
inline std::string* PositionUpdate::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000002u;
  return origin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionUpdate::release_origin() {
  // @@protoc_insertion_point(field_release:xpilot.PositionUpdate.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return origin_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionUpdate::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xpilot.PositionUpdate.origin)
}

// string destination = 12;
inline bool PositionUpdate::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PositionUpdate::has_destination() const {
  return _internal_has_destination();
}
inline void PositionUpdate::clear_destination() {
  destination_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PositionUpdate::destination() const {
  // @@protoc_insertion_point(field_get:xpilot.PositionUpdate.destination)
  return _internal_destination();
}
inline void PositionUpdate::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:xpilot.PositionUpdate.destination)
}
inline std::string* PositionUpdate::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:xpilot.PositionUpdate.destination)
  return _internal_mutable_destination();
}
inline const std::string& PositionUpdate::_internal_destination() const {
  return destination_.Get();
}
inline void PositionUpdate::_internal_set_destination(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PositionUpdate::set_destination(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  destination_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xpilot.PositionUpdate.destination)
}
inline void PositionUpdate::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:xpilot.PositionUpdate.destination)
}
inline void PositionUpdate::set_destination(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xpilot.PositionUpdate.destination)
}
inline std::string* PositionUpdate::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000004u;
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PositionUpdate::release_destination() {
  // @@protoc_insertion_point(field_release:xpilot.PositionUpdate.destination)
  if (!_internal_has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return destination_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionUpdate::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xpilot.PositionUpdate.destination)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_positionupdate_2eproto
