// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserAircraftData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserAircraftData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserAircraftData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserAircraftData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserAircraftData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserAircraftData_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_UserAircraftData_2eproto_metadata_getter(int index);
namespace xpilot {
class UserAircraftData;
struct UserAircraftDataDefaultTypeInternal;
extern UserAircraftDataDefaultTypeInternal _UserAircraftData_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::UserAircraftData* Arena::CreateMaybeMessage<::xpilot::UserAircraftData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class UserAircraftData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.UserAircraftData) */ {
 public:
  inline UserAircraftData() : UserAircraftData(nullptr) {}
  virtual ~UserAircraftData();
  explicit constexpr UserAircraftData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserAircraftData(const UserAircraftData& from);
  UserAircraftData(UserAircraftData&& from) noexcept
    : UserAircraftData() {
    *this = ::std::move(from);
  }

  inline UserAircraftData& operator=(const UserAircraftData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAircraftData& operator=(UserAircraftData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAircraftData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAircraftData* internal_default_instance() {
    return reinterpret_cast<const UserAircraftData*>(
               &_UserAircraftData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserAircraftData& a, UserAircraftData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAircraftData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAircraftData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAircraftData* New() const final {
    return CreateMaybeMessage<UserAircraftData>(nullptr);
  }

  UserAircraftData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAircraftData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAircraftData& from);
  void MergeFrom(const UserAircraftData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAircraftData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.UserAircraftData";
  }
  protected:
  explicit UserAircraftData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UserAircraftData_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeMslFieldNumber = 3,
    kAltitudeAglFieldNumber = 4,
    kGroundSpeedFieldNumber = 5,
    kPitchFieldNumber = 6,
    kRollFieldNumber = 7,
    kYawFieldNumber = 8,
    kVelocityLatitudeFieldNumber = 9,
    kVelocityAltitudeFieldNumber = 10,
    kVelocityLongitudeFieldNumber = 11,
    kVelocityPitchFieldNumber = 12,
    kVelocityHeadingFieldNumber = 13,
    kVelocityBankFieldNumber = 14,
  };
  // double longitude = 1;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude_msl = 3;
  bool has_altitude_msl() const;
  private:
  bool _internal_has_altitude_msl() const;
  public:
  void clear_altitude_msl();
  double altitude_msl() const;
  void set_altitude_msl(double value);
  private:
  double _internal_altitude_msl() const;
  void _internal_set_altitude_msl(double value);
  public:

  // double altitude_agl = 4;
  bool has_altitude_agl() const;
  private:
  bool _internal_has_altitude_agl() const;
  public:
  void clear_altitude_agl();
  double altitude_agl() const;
  void set_altitude_agl(double value);
  private:
  double _internal_altitude_agl() const;
  void _internal_set_altitude_agl(double value);
  public:

  // double ground_speed = 5;
  bool has_ground_speed() const;
  private:
  bool _internal_has_ground_speed() const;
  public:
  void clear_ground_speed();
  double ground_speed() const;
  void set_ground_speed(double value);
  private:
  double _internal_ground_speed() const;
  void _internal_set_ground_speed(double value);
  public:

  // double pitch = 6;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double roll = 7;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double yaw = 8;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // double velocity_latitude = 9;
  bool has_velocity_latitude() const;
  private:
  bool _internal_has_velocity_latitude() const;
  public:
  void clear_velocity_latitude();
  double velocity_latitude() const;
  void set_velocity_latitude(double value);
  private:
  double _internal_velocity_latitude() const;
  void _internal_set_velocity_latitude(double value);
  public:

  // double velocity_altitude = 10;
  bool has_velocity_altitude() const;
  private:
  bool _internal_has_velocity_altitude() const;
  public:
  void clear_velocity_altitude();
  double velocity_altitude() const;
  void set_velocity_altitude(double value);
  private:
  double _internal_velocity_altitude() const;
  void _internal_set_velocity_altitude(double value);
  public:

  // double velocity_longitude = 11;
  bool has_velocity_longitude() const;
  private:
  bool _internal_has_velocity_longitude() const;
  public:
  void clear_velocity_longitude();
  double velocity_longitude() const;
  void set_velocity_longitude(double value);
  private:
  double _internal_velocity_longitude() const;
  void _internal_set_velocity_longitude(double value);
  public:

  // double velocity_pitch = 12;
  bool has_velocity_pitch() const;
  private:
  bool _internal_has_velocity_pitch() const;
  public:
  void clear_velocity_pitch();
  double velocity_pitch() const;
  void set_velocity_pitch(double value);
  private:
  double _internal_velocity_pitch() const;
  void _internal_set_velocity_pitch(double value);
  public:

  // double velocity_heading = 13;
  bool has_velocity_heading() const;
  private:
  bool _internal_has_velocity_heading() const;
  public:
  void clear_velocity_heading();
  double velocity_heading() const;
  void set_velocity_heading(double value);
  private:
  double _internal_velocity_heading() const;
  void _internal_set_velocity_heading(double value);
  public:

  // double velocity_bank = 14;
  bool has_velocity_bank() const;
  private:
  bool _internal_has_velocity_bank() const;
  public:
  void clear_velocity_bank();
  double velocity_bank() const;
  void set_velocity_bank(double value);
  private:
  double _internal_velocity_bank() const;
  void _internal_set_velocity_bank(double value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.UserAircraftData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double longitude_;
  double latitude_;
  double altitude_msl_;
  double altitude_agl_;
  double ground_speed_;
  double pitch_;
  double roll_;
  double yaw_;
  double velocity_latitude_;
  double velocity_altitude_;
  double velocity_longitude_;
  double velocity_pitch_;
  double velocity_heading_;
  double velocity_bank_;
  friend struct ::TableStruct_UserAircraftData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserAircraftData

// double longitude = 1;
inline bool UserAircraftData::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserAircraftData::has_longitude() const {
  return _internal_has_longitude();
}
inline void UserAircraftData::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double UserAircraftData::_internal_longitude() const {
  return longitude_;
}
inline double UserAircraftData::longitude() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.longitude)
  return _internal_longitude();
}
inline void UserAircraftData::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  longitude_ = value;
}
inline void UserAircraftData::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.longitude)
}

// double latitude = 2;
inline bool UserAircraftData::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserAircraftData::has_latitude() const {
  return _internal_has_latitude();
}
inline void UserAircraftData::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double UserAircraftData::_internal_latitude() const {
  return latitude_;
}
inline double UserAircraftData::latitude() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.latitude)
  return _internal_latitude();
}
inline void UserAircraftData::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  latitude_ = value;
}
inline void UserAircraftData::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.latitude)
}

// double altitude_msl = 3;
inline bool UserAircraftData::_internal_has_altitude_msl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserAircraftData::has_altitude_msl() const {
  return _internal_has_altitude_msl();
}
inline void UserAircraftData::clear_altitude_msl() {
  altitude_msl_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double UserAircraftData::_internal_altitude_msl() const {
  return altitude_msl_;
}
inline double UserAircraftData::altitude_msl() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.altitude_msl)
  return _internal_altitude_msl();
}
inline void UserAircraftData::_internal_set_altitude_msl(double value) {
  _has_bits_[0] |= 0x00000004u;
  altitude_msl_ = value;
}
inline void UserAircraftData::set_altitude_msl(double value) {
  _internal_set_altitude_msl(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.altitude_msl)
}

// double altitude_agl = 4;
inline bool UserAircraftData::_internal_has_altitude_agl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserAircraftData::has_altitude_agl() const {
  return _internal_has_altitude_agl();
}
inline void UserAircraftData::clear_altitude_agl() {
  altitude_agl_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double UserAircraftData::_internal_altitude_agl() const {
  return altitude_agl_;
}
inline double UserAircraftData::altitude_agl() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.altitude_agl)
  return _internal_altitude_agl();
}
inline void UserAircraftData::_internal_set_altitude_agl(double value) {
  _has_bits_[0] |= 0x00000008u;
  altitude_agl_ = value;
}
inline void UserAircraftData::set_altitude_agl(double value) {
  _internal_set_altitude_agl(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.altitude_agl)
}

// double ground_speed = 5;
inline bool UserAircraftData::_internal_has_ground_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserAircraftData::has_ground_speed() const {
  return _internal_has_ground_speed();
}
inline void UserAircraftData::clear_ground_speed() {
  ground_speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double UserAircraftData::_internal_ground_speed() const {
  return ground_speed_;
}
inline double UserAircraftData::ground_speed() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.ground_speed)
  return _internal_ground_speed();
}
inline void UserAircraftData::_internal_set_ground_speed(double value) {
  _has_bits_[0] |= 0x00000010u;
  ground_speed_ = value;
}
inline void UserAircraftData::set_ground_speed(double value) {
  _internal_set_ground_speed(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.ground_speed)
}

// double pitch = 6;
inline bool UserAircraftData::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserAircraftData::has_pitch() const {
  return _internal_has_pitch();
}
inline void UserAircraftData::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double UserAircraftData::_internal_pitch() const {
  return pitch_;
}
inline double UserAircraftData::pitch() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.pitch)
  return _internal_pitch();
}
inline void UserAircraftData::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000020u;
  pitch_ = value;
}
inline void UserAircraftData::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.pitch)
}

// double roll = 7;
inline bool UserAircraftData::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UserAircraftData::has_roll() const {
  return _internal_has_roll();
}
inline void UserAircraftData::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double UserAircraftData::_internal_roll() const {
  return roll_;
}
inline double UserAircraftData::roll() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.roll)
  return _internal_roll();
}
inline void UserAircraftData::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00000040u;
  roll_ = value;
}
inline void UserAircraftData::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.roll)
}

// double yaw = 8;
inline bool UserAircraftData::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UserAircraftData::has_yaw() const {
  return _internal_has_yaw();
}
inline void UserAircraftData::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double UserAircraftData::_internal_yaw() const {
  return yaw_;
}
inline double UserAircraftData::yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.yaw)
  return _internal_yaw();
}
inline void UserAircraftData::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00000080u;
  yaw_ = value;
}
inline void UserAircraftData::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.yaw)
}

// double velocity_latitude = 9;
inline bool UserAircraftData::_internal_has_velocity_latitude() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UserAircraftData::has_velocity_latitude() const {
  return _internal_has_velocity_latitude();
}
inline void UserAircraftData::clear_velocity_latitude() {
  velocity_latitude_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double UserAircraftData::_internal_velocity_latitude() const {
  return velocity_latitude_;
}
inline double UserAircraftData::velocity_latitude() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.velocity_latitude)
  return _internal_velocity_latitude();
}
inline void UserAircraftData::_internal_set_velocity_latitude(double value) {
  _has_bits_[0] |= 0x00000100u;
  velocity_latitude_ = value;
}
inline void UserAircraftData::set_velocity_latitude(double value) {
  _internal_set_velocity_latitude(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.velocity_latitude)
}

// double velocity_altitude = 10;
inline bool UserAircraftData::_internal_has_velocity_altitude() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UserAircraftData::has_velocity_altitude() const {
  return _internal_has_velocity_altitude();
}
inline void UserAircraftData::clear_velocity_altitude() {
  velocity_altitude_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double UserAircraftData::_internal_velocity_altitude() const {
  return velocity_altitude_;
}
inline double UserAircraftData::velocity_altitude() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.velocity_altitude)
  return _internal_velocity_altitude();
}
inline void UserAircraftData::_internal_set_velocity_altitude(double value) {
  _has_bits_[0] |= 0x00000200u;
  velocity_altitude_ = value;
}
inline void UserAircraftData::set_velocity_altitude(double value) {
  _internal_set_velocity_altitude(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.velocity_altitude)
}

// double velocity_longitude = 11;
inline bool UserAircraftData::_internal_has_velocity_longitude() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UserAircraftData::has_velocity_longitude() const {
  return _internal_has_velocity_longitude();
}
inline void UserAircraftData::clear_velocity_longitude() {
  velocity_longitude_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double UserAircraftData::_internal_velocity_longitude() const {
  return velocity_longitude_;
}
inline double UserAircraftData::velocity_longitude() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.velocity_longitude)
  return _internal_velocity_longitude();
}
inline void UserAircraftData::_internal_set_velocity_longitude(double value) {
  _has_bits_[0] |= 0x00000400u;
  velocity_longitude_ = value;
}
inline void UserAircraftData::set_velocity_longitude(double value) {
  _internal_set_velocity_longitude(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.velocity_longitude)
}

// double velocity_pitch = 12;
inline bool UserAircraftData::_internal_has_velocity_pitch() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UserAircraftData::has_velocity_pitch() const {
  return _internal_has_velocity_pitch();
}
inline void UserAircraftData::clear_velocity_pitch() {
  velocity_pitch_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double UserAircraftData::_internal_velocity_pitch() const {
  return velocity_pitch_;
}
inline double UserAircraftData::velocity_pitch() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.velocity_pitch)
  return _internal_velocity_pitch();
}
inline void UserAircraftData::_internal_set_velocity_pitch(double value) {
  _has_bits_[0] |= 0x00000800u;
  velocity_pitch_ = value;
}
inline void UserAircraftData::set_velocity_pitch(double value) {
  _internal_set_velocity_pitch(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.velocity_pitch)
}

// double velocity_heading = 13;
inline bool UserAircraftData::_internal_has_velocity_heading() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UserAircraftData::has_velocity_heading() const {
  return _internal_has_velocity_heading();
}
inline void UserAircraftData::clear_velocity_heading() {
  velocity_heading_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double UserAircraftData::_internal_velocity_heading() const {
  return velocity_heading_;
}
inline double UserAircraftData::velocity_heading() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.velocity_heading)
  return _internal_velocity_heading();
}
inline void UserAircraftData::_internal_set_velocity_heading(double value) {
  _has_bits_[0] |= 0x00001000u;
  velocity_heading_ = value;
}
inline void UserAircraftData::set_velocity_heading(double value) {
  _internal_set_velocity_heading(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.velocity_heading)
}

// double velocity_bank = 14;
inline bool UserAircraftData::_internal_has_velocity_bank() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UserAircraftData::has_velocity_bank() const {
  return _internal_has_velocity_bank();
}
inline void UserAircraftData::clear_velocity_bank() {
  velocity_bank_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double UserAircraftData::_internal_velocity_bank() const {
  return velocity_bank_;
}
inline double UserAircraftData::velocity_bank() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftData.velocity_bank)
  return _internal_velocity_bank();
}
inline void UserAircraftData::_internal_set_velocity_bank(double value) {
  _has_bits_[0] |= 0x00002000u;
  velocity_bank_ = value;
}
inline void UserAircraftData::set_velocity_bank(double value) {
  _internal_set_velocity_bank(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftData.velocity_bank)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserAircraftData_2eproto
