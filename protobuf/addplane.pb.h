// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AddPlane.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AddPlane_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AddPlane_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AddPlane_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AddPlane_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AddPlane_2eproto;
namespace xpilot {
class AddPlane;
struct AddPlaneDefaultTypeInternal;
extern AddPlaneDefaultTypeInternal _AddPlane_default_instance_;
class AddPlane_AircraftVisualState;
struct AddPlane_AircraftVisualStateDefaultTypeInternal;
extern AddPlane_AircraftVisualStateDefaultTypeInternal _AddPlane_AircraftVisualState_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::AddPlane* Arena::CreateMaybeMessage<::xpilot::AddPlane>(Arena*);
template<> ::xpilot::AddPlane_AircraftVisualState* Arena::CreateMaybeMessage<::xpilot::AddPlane_AircraftVisualState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class AddPlane_AircraftVisualState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.AddPlane.AircraftVisualState) */ {
 public:
  inline AddPlane_AircraftVisualState() : AddPlane_AircraftVisualState(nullptr) {}
  ~AddPlane_AircraftVisualState() override;
  explicit constexpr AddPlane_AircraftVisualState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPlane_AircraftVisualState(const AddPlane_AircraftVisualState& from);
  AddPlane_AircraftVisualState(AddPlane_AircraftVisualState&& from) noexcept
    : AddPlane_AircraftVisualState() {
    *this = ::std::move(from);
  }

  inline AddPlane_AircraftVisualState& operator=(const AddPlane_AircraftVisualState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPlane_AircraftVisualState& operator=(AddPlane_AircraftVisualState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPlane_AircraftVisualState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPlane_AircraftVisualState* internal_default_instance() {
    return reinterpret_cast<const AddPlane_AircraftVisualState*>(
               &_AddPlane_AircraftVisualState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddPlane_AircraftVisualState& a, AddPlane_AircraftVisualState& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPlane_AircraftVisualState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPlane_AircraftVisualState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPlane_AircraftVisualState* New() const final {
    return new AddPlane_AircraftVisualState();
  }

  AddPlane_AircraftVisualState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPlane_AircraftVisualState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPlane_AircraftVisualState& from);
  void MergeFrom(const AddPlane_AircraftVisualState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlane_AircraftVisualState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.AddPlane.AircraftVisualState";
  }
  protected:
  explicit AddPlane_AircraftVisualState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
    kPitchFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kBankFieldNumber = 6,
  };
  // optional double latitude = 1;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // optional double longitude = 2;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // optional double altitude = 3;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // optional double pitch = 4;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // optional double heading = 5;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double bank = 6;
  bool has_bank() const;
  private:
  bool _internal_has_bank() const;
  public:
  void clear_bank();
  double bank() const;
  void set_bank(double value);
  private:
  double _internal_bank() const;
  void _internal_set_bank(double value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.AddPlane.AircraftVisualState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double latitude_;
  double longitude_;
  double altitude_;
  double pitch_;
  double heading_;
  double bank_;
  friend struct ::TableStruct_AddPlane_2eproto;
};
// -------------------------------------------------------------------

class AddPlane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.AddPlane) */ {
 public:
  inline AddPlane() : AddPlane(nullptr) {}
  ~AddPlane() override;
  explicit constexpr AddPlane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPlane(const AddPlane& from);
  AddPlane(AddPlane&& from) noexcept
    : AddPlane() {
    *this = ::std::move(from);
  }

  inline AddPlane& operator=(const AddPlane& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPlane& operator=(AddPlane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPlane& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPlane* internal_default_instance() {
    return reinterpret_cast<const AddPlane*>(
               &_AddPlane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddPlane& a, AddPlane& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPlane* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPlane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPlane* New() const final {
    return new AddPlane();
  }

  AddPlane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPlane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPlane& from);
  void MergeFrom(const AddPlane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.AddPlane";
  }
  protected:
  explicit AddPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddPlane_AircraftVisualState AircraftVisualState;

  // accessors -------------------------------------------------------

  enum : int {
    kCallsignFieldNumber = 1,
    kAirlineFieldNumber = 3,
    kEquipmentFieldNumber = 4,
    kVisualStateFieldNumber = 2,
  };
  // optional string callsign = 1;
  bool has_callsign() const;
  private:
  bool _internal_has_callsign() const;
  public:
  void clear_callsign();
  const std::string& callsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callsign();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // optional string airline = 3;
  bool has_airline() const;
  private:
  bool _internal_has_airline() const;
  public:
  void clear_airline();
  const std::string& airline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_airline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_airline();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_airline();
  void set_allocated_airline(std::string* airline);
  private:
  const std::string& _internal_airline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_airline(const std::string& value);
  std::string* _internal_mutable_airline();
  public:

  // optional string equipment = 4;
  bool has_equipment() const;
  private:
  bool _internal_has_equipment() const;
  public:
  void clear_equipment();
  const std::string& equipment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_equipment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_equipment();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_equipment();
  void set_allocated_equipment(std::string* equipment);
  private:
  const std::string& _internal_equipment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_equipment(const std::string& value);
  std::string* _internal_mutable_equipment();
  public:

  // optional .xpilot.AddPlane.AircraftVisualState visual_state = 2;
  bool has_visual_state() const;
  private:
  bool _internal_has_visual_state() const;
  public:
  void clear_visual_state();
  const ::xpilot::AddPlane_AircraftVisualState& visual_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::xpilot::AddPlane_AircraftVisualState* release_visual_state();
  ::xpilot::AddPlane_AircraftVisualState* mutable_visual_state();
  void set_allocated_visual_state(::xpilot::AddPlane_AircraftVisualState* visual_state);
  private:
  const ::xpilot::AddPlane_AircraftVisualState& _internal_visual_state() const;
  ::xpilot::AddPlane_AircraftVisualState* _internal_mutable_visual_state();
  public:
  void unsafe_arena_set_allocated_visual_state(
      ::xpilot::AddPlane_AircraftVisualState* visual_state);
  ::xpilot::AddPlane_AircraftVisualState* unsafe_arena_release_visual_state();

  // @@protoc_insertion_point(class_scope:xpilot.AddPlane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr airline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equipment_;
  ::xpilot::AddPlane_AircraftVisualState* visual_state_;
  friend struct ::TableStruct_AddPlane_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddPlane_AircraftVisualState

// optional double latitude = 1;
inline bool AddPlane_AircraftVisualState::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddPlane_AircraftVisualState::has_latitude() const {
  return _internal_has_latitude();
}
inline void AddPlane_AircraftVisualState::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double AddPlane_AircraftVisualState::_internal_latitude() const {
  return latitude_;
}
inline double AddPlane_AircraftVisualState::latitude() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.AircraftVisualState.latitude)
  return _internal_latitude();
}
inline void AddPlane_AircraftVisualState::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_ = value;
}
inline void AddPlane_AircraftVisualState::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.AircraftVisualState.latitude)
}

// optional double longitude = 2;
inline bool AddPlane_AircraftVisualState::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddPlane_AircraftVisualState::has_longitude() const {
  return _internal_has_longitude();
}
inline void AddPlane_AircraftVisualState::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double AddPlane_AircraftVisualState::_internal_longitude() const {
  return longitude_;
}
inline double AddPlane_AircraftVisualState::longitude() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.AircraftVisualState.longitude)
  return _internal_longitude();
}
inline void AddPlane_AircraftVisualState::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_ = value;
}
inline void AddPlane_AircraftVisualState::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.AircraftVisualState.longitude)
}

// optional double altitude = 3;
inline bool AddPlane_AircraftVisualState::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddPlane_AircraftVisualState::has_altitude() const {
  return _internal_has_altitude();
}
inline void AddPlane_AircraftVisualState::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double AddPlane_AircraftVisualState::_internal_altitude() const {
  return altitude_;
}
inline double AddPlane_AircraftVisualState::altitude() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.AircraftVisualState.altitude)
  return _internal_altitude();
}
inline void AddPlane_AircraftVisualState::_internal_set_altitude(double value) {
  _has_bits_[0] |= 0x00000004u;
  altitude_ = value;
}
inline void AddPlane_AircraftVisualState::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.AircraftVisualState.altitude)
}

// optional double pitch = 4;
inline bool AddPlane_AircraftVisualState::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AddPlane_AircraftVisualState::has_pitch() const {
  return _internal_has_pitch();
}
inline void AddPlane_AircraftVisualState::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double AddPlane_AircraftVisualState::_internal_pitch() const {
  return pitch_;
}
inline double AddPlane_AircraftVisualState::pitch() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.AircraftVisualState.pitch)
  return _internal_pitch();
}
inline void AddPlane_AircraftVisualState::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000008u;
  pitch_ = value;
}
inline void AddPlane_AircraftVisualState::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.AircraftVisualState.pitch)
}

// optional double heading = 5;
inline bool AddPlane_AircraftVisualState::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AddPlane_AircraftVisualState::has_heading() const {
  return _internal_has_heading();
}
inline void AddPlane_AircraftVisualState::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double AddPlane_AircraftVisualState::_internal_heading() const {
  return heading_;
}
inline double AddPlane_AircraftVisualState::heading() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.AircraftVisualState.heading)
  return _internal_heading();
}
inline void AddPlane_AircraftVisualState::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000010u;
  heading_ = value;
}
inline void AddPlane_AircraftVisualState::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.AircraftVisualState.heading)
}

// optional double bank = 6;
inline bool AddPlane_AircraftVisualState::_internal_has_bank() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AddPlane_AircraftVisualState::has_bank() const {
  return _internal_has_bank();
}
inline void AddPlane_AircraftVisualState::clear_bank() {
  bank_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double AddPlane_AircraftVisualState::_internal_bank() const {
  return bank_;
}
inline double AddPlane_AircraftVisualState::bank() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.AircraftVisualState.bank)
  return _internal_bank();
}
inline void AddPlane_AircraftVisualState::_internal_set_bank(double value) {
  _has_bits_[0] |= 0x00000020u;
  bank_ = value;
}
inline void AddPlane_AircraftVisualState::set_bank(double value) {
  _internal_set_bank(value);
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.AircraftVisualState.bank)
}

// -------------------------------------------------------------------

// AddPlane

// optional string callsign = 1;
inline bool AddPlane::_internal_has_callsign() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddPlane::has_callsign() const {
  return _internal_has_callsign();
}
inline void AddPlane::clear_callsign() {
  callsign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddPlane::callsign() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.callsign)
  return _internal_callsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPlane::set_callsign(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.callsign)
}
inline std::string* AddPlane::mutable_callsign() {
  // @@protoc_insertion_point(field_mutable:xpilot.AddPlane.callsign)
  return _internal_mutable_callsign();
}
inline const std::string& AddPlane::_internal_callsign() const {
  return callsign_.Get();
}
inline void AddPlane::_internal_set_callsign(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPlane::_internal_mutable_callsign() {
  _has_bits_[0] |= 0x00000001u;
  return callsign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPlane::release_callsign() {
  // @@protoc_insertion_point(field_release:xpilot.AddPlane.callsign)
  if (!_internal_has_callsign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return callsign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPlane::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AddPlane.callsign)
}

// optional .xpilot.AddPlane.AircraftVisualState visual_state = 2;
inline bool AddPlane::_internal_has_visual_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || visual_state_ != nullptr);
  return value;
}
inline bool AddPlane::has_visual_state() const {
  return _internal_has_visual_state();
}
inline void AddPlane::clear_visual_state() {
  if (visual_state_ != nullptr) visual_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::xpilot::AddPlane_AircraftVisualState& AddPlane::_internal_visual_state() const {
  const ::xpilot::AddPlane_AircraftVisualState* p = visual_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::xpilot::AddPlane_AircraftVisualState&>(
      ::xpilot::_AddPlane_AircraftVisualState_default_instance_);
}
inline const ::xpilot::AddPlane_AircraftVisualState& AddPlane::visual_state() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.visual_state)
  return _internal_visual_state();
}
inline void AddPlane::unsafe_arena_set_allocated_visual_state(
    ::xpilot::AddPlane_AircraftVisualState* visual_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visual_state_);
  }
  visual_state_ = visual_state;
  if (visual_state) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xpilot.AddPlane.visual_state)
}
inline ::xpilot::AddPlane_AircraftVisualState* AddPlane::release_visual_state() {
  _has_bits_[0] &= ~0x00000008u;
  ::xpilot::AddPlane_AircraftVisualState* temp = visual_state_;
  visual_state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::xpilot::AddPlane_AircraftVisualState* AddPlane::unsafe_arena_release_visual_state() {
  // @@protoc_insertion_point(field_release:xpilot.AddPlane.visual_state)
  _has_bits_[0] &= ~0x00000008u;
  ::xpilot::AddPlane_AircraftVisualState* temp = visual_state_;
  visual_state_ = nullptr;
  return temp;
}
inline ::xpilot::AddPlane_AircraftVisualState* AddPlane::_internal_mutable_visual_state() {
  _has_bits_[0] |= 0x00000008u;
  if (visual_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::xpilot::AddPlane_AircraftVisualState>(GetArenaForAllocation());
    visual_state_ = p;
  }
  return visual_state_;
}
inline ::xpilot::AddPlane_AircraftVisualState* AddPlane::mutable_visual_state() {
  // @@protoc_insertion_point(field_mutable:xpilot.AddPlane.visual_state)
  return _internal_mutable_visual_state();
}
inline void AddPlane::set_allocated_visual_state(::xpilot::AddPlane_AircraftVisualState* visual_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete visual_state_;
  }
  if (visual_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::xpilot::AddPlane_AircraftVisualState>::GetOwningArena(visual_state);
    if (message_arena != submessage_arena) {
      visual_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visual_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  visual_state_ = visual_state;
  // @@protoc_insertion_point(field_set_allocated:xpilot.AddPlane.visual_state)
}

// optional string airline = 3;
inline bool AddPlane::_internal_has_airline() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddPlane::has_airline() const {
  return _internal_has_airline();
}
inline void AddPlane::clear_airline() {
  airline_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddPlane::airline() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.airline)
  return _internal_airline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPlane::set_airline(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 airline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.airline)
}
inline std::string* AddPlane::mutable_airline() {
  // @@protoc_insertion_point(field_mutable:xpilot.AddPlane.airline)
  return _internal_mutable_airline();
}
inline const std::string& AddPlane::_internal_airline() const {
  return airline_.Get();
}
inline void AddPlane::_internal_set_airline(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  airline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPlane::_internal_mutable_airline() {
  _has_bits_[0] |= 0x00000002u;
  return airline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPlane::release_airline() {
  // @@protoc_insertion_point(field_release:xpilot.AddPlane.airline)
  if (!_internal_has_airline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return airline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPlane::set_allocated_airline(std::string* airline) {
  if (airline != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  airline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), airline,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AddPlane.airline)
}

// optional string equipment = 4;
inline bool AddPlane::_internal_has_equipment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddPlane::has_equipment() const {
  return _internal_has_equipment();
}
inline void AddPlane::clear_equipment() {
  equipment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AddPlane::equipment() const {
  // @@protoc_insertion_point(field_get:xpilot.AddPlane.equipment)
  return _internal_equipment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPlane::set_equipment(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 equipment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.AddPlane.equipment)
}
inline std::string* AddPlane::mutable_equipment() {
  // @@protoc_insertion_point(field_mutable:xpilot.AddPlane.equipment)
  return _internal_mutable_equipment();
}
inline const std::string& AddPlane::_internal_equipment() const {
  return equipment_.Get();
}
inline void AddPlane::_internal_set_equipment(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  equipment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPlane::_internal_mutable_equipment() {
  _has_bits_[0] |= 0x00000004u;
  return equipment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPlane::release_equipment() {
  // @@protoc_insertion_point(field_release:xpilot.AddPlane.equipment)
  if (!_internal_has_equipment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return equipment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPlane::set_allocated_equipment(std::string* equipment) {
  if (equipment != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  equipment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equipment,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.AddPlane.equipment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AddPlane_2eproto
