// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserAircraftConfigData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserAircraftConfigData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserAircraftConfigData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserAircraftConfigData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserAircraftConfigData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserAircraftConfigData_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_UserAircraftConfigData_2eproto_metadata_getter(int index);
namespace xpilot {
class UserAircraftConfigData;
struct UserAircraftConfigDataDefaultTypeInternal;
extern UserAircraftConfigDataDefaultTypeInternal _UserAircraftConfigData_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::UserAircraftConfigData* Arena::CreateMaybeMessage<::xpilot::UserAircraftConfigData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class UserAircraftConfigData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.UserAircraftConfigData) */ {
 public:
  inline UserAircraftConfigData() : UserAircraftConfigData(nullptr) {}
  virtual ~UserAircraftConfigData();
  explicit constexpr UserAircraftConfigData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserAircraftConfigData(const UserAircraftConfigData& from);
  UserAircraftConfigData(UserAircraftConfigData&& from) noexcept
    : UserAircraftConfigData() {
    *this = ::std::move(from);
  }

  inline UserAircraftConfigData& operator=(const UserAircraftConfigData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAircraftConfigData& operator=(UserAircraftConfigData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserAircraftConfigData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAircraftConfigData* internal_default_instance() {
    return reinterpret_cast<const UserAircraftConfigData*>(
               &_UserAircraftConfigData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserAircraftConfigData& a, UserAircraftConfigData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAircraftConfigData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAircraftConfigData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserAircraftConfigData* New() const final {
    return CreateMaybeMessage<UserAircraftConfigData>(nullptr);
  }

  UserAircraftConfigData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAircraftConfigData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAircraftConfigData& from);
  void MergeFrom(const UserAircraftConfigData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAircraftConfigData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.UserAircraftConfigData";
  }
  protected:
  explicit UserAircraftConfigData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_UserAircraftConfigData_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeaconLightsOnFieldNumber = 1,
    kLandingLightsOnFieldNumber = 2,
    kNavLightsOnFieldNumber = 3,
    kStrobeLightsOnFieldNumber = 4,
    kTaxiLightsOnFieldNumber = 5,
    kGearDownFieldNumber = 7,
    kEngine1RunningFieldNumber = 10,
    kEngine2RunningFieldNumber = 11,
    kFlapsFieldNumber = 6,
    kSpeedBrakesFieldNumber = 8,
    kEngineCountFieldNumber = 9,
    kEngine3RunningFieldNumber = 12,
    kEngine4RunningFieldNumber = 13,
    kOnGroundFieldNumber = 14,
  };
  // bool beacon_lights_on = 1;
  bool has_beacon_lights_on() const;
  private:
  bool _internal_has_beacon_lights_on() const;
  public:
  void clear_beacon_lights_on();
  bool beacon_lights_on() const;
  void set_beacon_lights_on(bool value);
  private:
  bool _internal_beacon_lights_on() const;
  void _internal_set_beacon_lights_on(bool value);
  public:

  // bool landing_lights_on = 2;
  bool has_landing_lights_on() const;
  private:
  bool _internal_has_landing_lights_on() const;
  public:
  void clear_landing_lights_on();
  bool landing_lights_on() const;
  void set_landing_lights_on(bool value);
  private:
  bool _internal_landing_lights_on() const;
  void _internal_set_landing_lights_on(bool value);
  public:

  // bool nav_lights_on = 3;
  bool has_nav_lights_on() const;
  private:
  bool _internal_has_nav_lights_on() const;
  public:
  void clear_nav_lights_on();
  bool nav_lights_on() const;
  void set_nav_lights_on(bool value);
  private:
  bool _internal_nav_lights_on() const;
  void _internal_set_nav_lights_on(bool value);
  public:

  // bool strobe_lights_on = 4;
  bool has_strobe_lights_on() const;
  private:
  bool _internal_has_strobe_lights_on() const;
  public:
  void clear_strobe_lights_on();
  bool strobe_lights_on() const;
  void set_strobe_lights_on(bool value);
  private:
  bool _internal_strobe_lights_on() const;
  void _internal_set_strobe_lights_on(bool value);
  public:

  // bool taxi_lights_on = 5;
  bool has_taxi_lights_on() const;
  private:
  bool _internal_has_taxi_lights_on() const;
  public:
  void clear_taxi_lights_on();
  bool taxi_lights_on() const;
  void set_taxi_lights_on(bool value);
  private:
  bool _internal_taxi_lights_on() const;
  void _internal_set_taxi_lights_on(bool value);
  public:

  // bool gear_down = 7;
  bool has_gear_down() const;
  private:
  bool _internal_has_gear_down() const;
  public:
  void clear_gear_down();
  bool gear_down() const;
  void set_gear_down(bool value);
  private:
  bool _internal_gear_down() const;
  void _internal_set_gear_down(bool value);
  public:

  // bool engine1_running = 10;
  bool has_engine1_running() const;
  private:
  bool _internal_has_engine1_running() const;
  public:
  void clear_engine1_running();
  bool engine1_running() const;
  void set_engine1_running(bool value);
  private:
  bool _internal_engine1_running() const;
  void _internal_set_engine1_running(bool value);
  public:

  // bool engine2_running = 11;
  bool has_engine2_running() const;
  private:
  bool _internal_has_engine2_running() const;
  public:
  void clear_engine2_running();
  bool engine2_running() const;
  void set_engine2_running(bool value);
  private:
  bool _internal_engine2_running() const;
  void _internal_set_engine2_running(bool value);
  public:

  // double flaps = 6;
  bool has_flaps() const;
  private:
  bool _internal_has_flaps() const;
  public:
  void clear_flaps();
  double flaps() const;
  void set_flaps(double value);
  private:
  double _internal_flaps() const;
  void _internal_set_flaps(double value);
  public:

  // double speed_brakes = 8;
  bool has_speed_brakes() const;
  private:
  bool _internal_has_speed_brakes() const;
  public:
  void clear_speed_brakes();
  double speed_brakes() const;
  void set_speed_brakes(double value);
  private:
  double _internal_speed_brakes() const;
  void _internal_set_speed_brakes(double value);
  public:

  // int32 engine_count = 9;
  bool has_engine_count() const;
  private:
  bool _internal_has_engine_count() const;
  public:
  void clear_engine_count();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_count() const;
  void set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_count() const;
  void _internal_set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool engine3_running = 12;
  bool has_engine3_running() const;
  private:
  bool _internal_has_engine3_running() const;
  public:
  void clear_engine3_running();
  bool engine3_running() const;
  void set_engine3_running(bool value);
  private:
  bool _internal_engine3_running() const;
  void _internal_set_engine3_running(bool value);
  public:

  // bool engine4_running = 13;
  bool has_engine4_running() const;
  private:
  bool _internal_has_engine4_running() const;
  public:
  void clear_engine4_running();
  bool engine4_running() const;
  void set_engine4_running(bool value);
  private:
  bool _internal_engine4_running() const;
  void _internal_set_engine4_running(bool value);
  public:

  // bool on_ground = 14;
  bool has_on_ground() const;
  private:
  bool _internal_has_on_ground() const;
  public:
  void clear_on_ground();
  bool on_ground() const;
  void set_on_ground(bool value);
  private:
  bool _internal_on_ground() const;
  void _internal_set_on_ground(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.UserAircraftConfigData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool beacon_lights_on_;
  bool landing_lights_on_;
  bool nav_lights_on_;
  bool strobe_lights_on_;
  bool taxi_lights_on_;
  bool gear_down_;
  bool engine1_running_;
  bool engine2_running_;
  double flaps_;
  double speed_brakes_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_count_;
  bool engine3_running_;
  bool engine4_running_;
  bool on_ground_;
  friend struct ::TableStruct_UserAircraftConfigData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserAircraftConfigData

// bool beacon_lights_on = 1;
inline bool UserAircraftConfigData::_internal_has_beacon_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_beacon_lights_on() const {
  return _internal_has_beacon_lights_on();
}
inline void UserAircraftConfigData::clear_beacon_lights_on() {
  beacon_lights_on_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool UserAircraftConfigData::_internal_beacon_lights_on() const {
  return beacon_lights_on_;
}
inline bool UserAircraftConfigData::beacon_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.beacon_lights_on)
  return _internal_beacon_lights_on();
}
inline void UserAircraftConfigData::_internal_set_beacon_lights_on(bool value) {
  _has_bits_[0] |= 0x00000001u;
  beacon_lights_on_ = value;
}
inline void UserAircraftConfigData::set_beacon_lights_on(bool value) {
  _internal_set_beacon_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.beacon_lights_on)
}

// bool landing_lights_on = 2;
inline bool UserAircraftConfigData::_internal_has_landing_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_landing_lights_on() const {
  return _internal_has_landing_lights_on();
}
inline void UserAircraftConfigData::clear_landing_lights_on() {
  landing_lights_on_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool UserAircraftConfigData::_internal_landing_lights_on() const {
  return landing_lights_on_;
}
inline bool UserAircraftConfigData::landing_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.landing_lights_on)
  return _internal_landing_lights_on();
}
inline void UserAircraftConfigData::_internal_set_landing_lights_on(bool value) {
  _has_bits_[0] |= 0x00000002u;
  landing_lights_on_ = value;
}
inline void UserAircraftConfigData::set_landing_lights_on(bool value) {
  _internal_set_landing_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.landing_lights_on)
}

// bool nav_lights_on = 3;
inline bool UserAircraftConfigData::_internal_has_nav_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_nav_lights_on() const {
  return _internal_has_nav_lights_on();
}
inline void UserAircraftConfigData::clear_nav_lights_on() {
  nav_lights_on_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool UserAircraftConfigData::_internal_nav_lights_on() const {
  return nav_lights_on_;
}
inline bool UserAircraftConfigData::nav_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.nav_lights_on)
  return _internal_nav_lights_on();
}
inline void UserAircraftConfigData::_internal_set_nav_lights_on(bool value) {
  _has_bits_[0] |= 0x00000004u;
  nav_lights_on_ = value;
}
inline void UserAircraftConfigData::set_nav_lights_on(bool value) {
  _internal_set_nav_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.nav_lights_on)
}

// bool strobe_lights_on = 4;
inline bool UserAircraftConfigData::_internal_has_strobe_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_strobe_lights_on() const {
  return _internal_has_strobe_lights_on();
}
inline void UserAircraftConfigData::clear_strobe_lights_on() {
  strobe_lights_on_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool UserAircraftConfigData::_internal_strobe_lights_on() const {
  return strobe_lights_on_;
}
inline bool UserAircraftConfigData::strobe_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.strobe_lights_on)
  return _internal_strobe_lights_on();
}
inline void UserAircraftConfigData::_internal_set_strobe_lights_on(bool value) {
  _has_bits_[0] |= 0x00000008u;
  strobe_lights_on_ = value;
}
inline void UserAircraftConfigData::set_strobe_lights_on(bool value) {
  _internal_set_strobe_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.strobe_lights_on)
}

// bool taxi_lights_on = 5;
inline bool UserAircraftConfigData::_internal_has_taxi_lights_on() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_taxi_lights_on() const {
  return _internal_has_taxi_lights_on();
}
inline void UserAircraftConfigData::clear_taxi_lights_on() {
  taxi_lights_on_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool UserAircraftConfigData::_internal_taxi_lights_on() const {
  return taxi_lights_on_;
}
inline bool UserAircraftConfigData::taxi_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.taxi_lights_on)
  return _internal_taxi_lights_on();
}
inline void UserAircraftConfigData::_internal_set_taxi_lights_on(bool value) {
  _has_bits_[0] |= 0x00000010u;
  taxi_lights_on_ = value;
}
inline void UserAircraftConfigData::set_taxi_lights_on(bool value) {
  _internal_set_taxi_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.taxi_lights_on)
}

// double flaps = 6;
inline bool UserAircraftConfigData::_internal_has_flaps() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_flaps() const {
  return _internal_has_flaps();
}
inline void UserAircraftConfigData::clear_flaps() {
  flaps_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double UserAircraftConfigData::_internal_flaps() const {
  return flaps_;
}
inline double UserAircraftConfigData::flaps() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.flaps)
  return _internal_flaps();
}
inline void UserAircraftConfigData::_internal_set_flaps(double value) {
  _has_bits_[0] |= 0x00000100u;
  flaps_ = value;
}
inline void UserAircraftConfigData::set_flaps(double value) {
  _internal_set_flaps(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.flaps)
}

// bool gear_down = 7;
inline bool UserAircraftConfigData::_internal_has_gear_down() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_gear_down() const {
  return _internal_has_gear_down();
}
inline void UserAircraftConfigData::clear_gear_down() {
  gear_down_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool UserAircraftConfigData::_internal_gear_down() const {
  return gear_down_;
}
inline bool UserAircraftConfigData::gear_down() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.gear_down)
  return _internal_gear_down();
}
inline void UserAircraftConfigData::_internal_set_gear_down(bool value) {
  _has_bits_[0] |= 0x00000020u;
  gear_down_ = value;
}
inline void UserAircraftConfigData::set_gear_down(bool value) {
  _internal_set_gear_down(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.gear_down)
}

// double speed_brakes = 8;
inline bool UserAircraftConfigData::_internal_has_speed_brakes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_speed_brakes() const {
  return _internal_has_speed_brakes();
}
inline void UserAircraftConfigData::clear_speed_brakes() {
  speed_brakes_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double UserAircraftConfigData::_internal_speed_brakes() const {
  return speed_brakes_;
}
inline double UserAircraftConfigData::speed_brakes() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.speed_brakes)
  return _internal_speed_brakes();
}
inline void UserAircraftConfigData::_internal_set_speed_brakes(double value) {
  _has_bits_[0] |= 0x00000200u;
  speed_brakes_ = value;
}
inline void UserAircraftConfigData::set_speed_brakes(double value) {
  _internal_set_speed_brakes(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.speed_brakes)
}

// int32 engine_count = 9;
inline bool UserAircraftConfigData::_internal_has_engine_count() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_engine_count() const {
  return _internal_has_engine_count();
}
inline void UserAircraftConfigData::clear_engine_count() {
  engine_count_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAircraftConfigData::_internal_engine_count() const {
  return engine_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserAircraftConfigData::engine_count() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.engine_count)
  return _internal_engine_count();
}
inline void UserAircraftConfigData::_internal_set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  engine_count_ = value;
}
inline void UserAircraftConfigData::set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_count(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.engine_count)
}

// bool engine1_running = 10;
inline bool UserAircraftConfigData::_internal_has_engine1_running() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_engine1_running() const {
  return _internal_has_engine1_running();
}
inline void UserAircraftConfigData::clear_engine1_running() {
  engine1_running_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool UserAircraftConfigData::_internal_engine1_running() const {
  return engine1_running_;
}
inline bool UserAircraftConfigData::engine1_running() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.engine1_running)
  return _internal_engine1_running();
}
inline void UserAircraftConfigData::_internal_set_engine1_running(bool value) {
  _has_bits_[0] |= 0x00000040u;
  engine1_running_ = value;
}
inline void UserAircraftConfigData::set_engine1_running(bool value) {
  _internal_set_engine1_running(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.engine1_running)
}

// bool engine2_running = 11;
inline bool UserAircraftConfigData::_internal_has_engine2_running() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_engine2_running() const {
  return _internal_has_engine2_running();
}
inline void UserAircraftConfigData::clear_engine2_running() {
  engine2_running_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool UserAircraftConfigData::_internal_engine2_running() const {
  return engine2_running_;
}
inline bool UserAircraftConfigData::engine2_running() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.engine2_running)
  return _internal_engine2_running();
}
inline void UserAircraftConfigData::_internal_set_engine2_running(bool value) {
  _has_bits_[0] |= 0x00000080u;
  engine2_running_ = value;
}
inline void UserAircraftConfigData::set_engine2_running(bool value) {
  _internal_set_engine2_running(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.engine2_running)
}

// bool engine3_running = 12;
inline bool UserAircraftConfigData::_internal_has_engine3_running() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_engine3_running() const {
  return _internal_has_engine3_running();
}
inline void UserAircraftConfigData::clear_engine3_running() {
  engine3_running_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool UserAircraftConfigData::_internal_engine3_running() const {
  return engine3_running_;
}
inline bool UserAircraftConfigData::engine3_running() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.engine3_running)
  return _internal_engine3_running();
}
inline void UserAircraftConfigData::_internal_set_engine3_running(bool value) {
  _has_bits_[0] |= 0x00000800u;
  engine3_running_ = value;
}
inline void UserAircraftConfigData::set_engine3_running(bool value) {
  _internal_set_engine3_running(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.engine3_running)
}

// bool engine4_running = 13;
inline bool UserAircraftConfigData::_internal_has_engine4_running() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_engine4_running() const {
  return _internal_has_engine4_running();
}
inline void UserAircraftConfigData::clear_engine4_running() {
  engine4_running_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool UserAircraftConfigData::_internal_engine4_running() const {
  return engine4_running_;
}
inline bool UserAircraftConfigData::engine4_running() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.engine4_running)
  return _internal_engine4_running();
}
inline void UserAircraftConfigData::_internal_set_engine4_running(bool value) {
  _has_bits_[0] |= 0x00001000u;
  engine4_running_ = value;
}
inline void UserAircraftConfigData::set_engine4_running(bool value) {
  _internal_set_engine4_running(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.engine4_running)
}

// bool on_ground = 14;
inline bool UserAircraftConfigData::_internal_has_on_ground() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool UserAircraftConfigData::has_on_ground() const {
  return _internal_has_on_ground();
}
inline void UserAircraftConfigData::clear_on_ground() {
  on_ground_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool UserAircraftConfigData::_internal_on_ground() const {
  return on_ground_;
}
inline bool UserAircraftConfigData::on_ground() const {
  // @@protoc_insertion_point(field_get:xpilot.UserAircraftConfigData.on_ground)
  return _internal_on_ground();
}
inline void UserAircraftConfigData::_internal_set_on_ground(bool value) {
  _has_bits_[0] |= 0x00002000u;
  on_ground_ = value;
}
inline void UserAircraftConfigData::set_on_ground(bool value) {
  _internal_set_on_ground(value);
  // @@protoc_insertion_point(field_set:xpilot.UserAircraftConfigData.on_ground)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserAircraftConfigData_2eproto
