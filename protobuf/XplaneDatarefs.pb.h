// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XplaneDatarefs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_XplaneDatarefs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_XplaneDatarefs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_XplaneDatarefs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_XplaneDatarefs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XplaneDatarefs_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_XplaneDatarefs_2eproto_metadata_getter(int index);
namespace xpilot {
class XplaneDatarefs;
struct XplaneDatarefsDefaultTypeInternal;
extern XplaneDatarefsDefaultTypeInternal _XplaneDatarefs_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::XplaneDatarefs* Arena::CreateMaybeMessage<::xpilot::XplaneDatarefs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class XplaneDatarefs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.XplaneDatarefs) */ {
 public:
  inline XplaneDatarefs() : XplaneDatarefs(nullptr) {}
  virtual ~XplaneDatarefs();
  explicit constexpr XplaneDatarefs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XplaneDatarefs(const XplaneDatarefs& from);
  XplaneDatarefs(XplaneDatarefs&& from) noexcept
    : XplaneDatarefs() {
    *this = ::std::move(from);
  }

  inline XplaneDatarefs& operator=(const XplaneDatarefs& from) {
    CopyFrom(from);
    return *this;
  }
  inline XplaneDatarefs& operator=(XplaneDatarefs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XplaneDatarefs& default_instance() {
    return *internal_default_instance();
  }
  static inline const XplaneDatarefs* internal_default_instance() {
    return reinterpret_cast<const XplaneDatarefs*>(
               &_XplaneDatarefs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XplaneDatarefs& a, XplaneDatarefs& b) {
    a.Swap(&b);
  }
  inline void Swap(XplaneDatarefs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XplaneDatarefs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XplaneDatarefs* New() const final {
    return CreateMaybeMessage<XplaneDatarefs>(nullptr);
  }

  XplaneDatarefs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XplaneDatarefs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XplaneDatarefs& from);
  void MergeFrom(const XplaneDatarefs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XplaneDatarefs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.XplaneDatarefs";
  }
  protected:
  explicit XplaneDatarefs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_XplaneDatarefs_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioComSelectionFieldNumber = 1,
    kCom1FreqFieldNumber = 3,
    kCom1StbyFreqFieldNumber = 4,
    kCom1VolumeFieldNumber = 6,
    kCom1PowerFieldNumber = 2,
    kCom1AudioSelectionFieldNumber = 5,
    kCom2PowerFieldNumber = 7,
    kCom2AudioSelectionFieldNumber = 10,
    kCom2FreqFieldNumber = 8,
    kCom2StbyFreqFieldNumber = 9,
    kCom2VolumeFieldNumber = 11,
    kLatitudeFieldNumber = 13,
    kLongitudeFieldNumber = 14,
    kAltitudeFieldNumber = 15,
    kPressureAltitudeFieldNumber = 16,
    kGroundSpeedFieldNumber = 17,
    kPitchFieldNumber = 18,
    kRollFieldNumber = 19,
    kYawFieldNumber = 20,
    kVelocityLatitudeFieldNumber = 21,
    kVelocityAltitudeFieldNumber = 22,
    kVelocityLongitudeFieldNumber = 23,
    kVelocityPitchFieldNumber = 24,
    kVelocityHeadingFieldNumber = 25,
    kAvionicsPowerOnFieldNumber = 12,
    kTransponderIdentFieldNumber = 29,
    kBeaconLightsOnFieldNumber = 30,
    kLandingLightsOnFieldNumber = 31,
    kTransponderCodeFieldNumber = 27,
    kVelocityBankFieldNumber = 26,
    kTransponderModeFieldNumber = 28,
    kNavLightsOnFieldNumber = 32,
    kStrobeLightsOnFieldNumber = 33,
    kTaxiLightsOnFieldNumber = 34,
    kGearDownFieldNumber = 36,
    kFlapsFieldNumber = 35,
    kSpeedBrakesFieldNumber = 37,
    kEngineCountFieldNumber = 38,
    kEngine1RunningFieldNumber = 39,
    kEngine2RunningFieldNumber = 40,
    kEngine3RunningFieldNumber = 41,
    kEngine4RunningFieldNumber = 42,
    kOnGroundFieldNumber = 43,
    kReplayModeFieldNumber = 44,
  };
  // int32 audio_com_selection = 1;
  bool has_audio_com_selection() const;
  private:
  bool _internal_has_audio_com_selection() const;
  public:
  void clear_audio_com_selection();
  ::PROTOBUF_NAMESPACE_ID::int32 audio_com_selection() const;
  void set_audio_com_selection(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_audio_com_selection() const;
  void _internal_set_audio_com_selection(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 com1_freq = 3;
  bool has_com1_freq() const;
  private:
  bool _internal_has_com1_freq() const;
  public:
  void clear_com1_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 com1_freq() const;
  void set_com1_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_com1_freq() const;
  void _internal_set_com1_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 com1_stby_freq = 4;
  bool has_com1_stby_freq() const;
  private:
  bool _internal_has_com1_stby_freq() const;
  public:
  void clear_com1_stby_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 com1_stby_freq() const;
  void set_com1_stby_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_com1_stby_freq() const;
  void _internal_set_com1_stby_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float com1_volume = 6;
  bool has_com1_volume() const;
  private:
  bool _internal_has_com1_volume() const;
  public:
  void clear_com1_volume();
  float com1_volume() const;
  void set_com1_volume(float value);
  private:
  float _internal_com1_volume() const;
  void _internal_set_com1_volume(float value);
  public:

  // bool com1_power = 2;
  bool has_com1_power() const;
  private:
  bool _internal_has_com1_power() const;
  public:
  void clear_com1_power();
  bool com1_power() const;
  void set_com1_power(bool value);
  private:
  bool _internal_com1_power() const;
  void _internal_set_com1_power(bool value);
  public:

  // bool com1_audio_selection = 5;
  bool has_com1_audio_selection() const;
  private:
  bool _internal_has_com1_audio_selection() const;
  public:
  void clear_com1_audio_selection();
  bool com1_audio_selection() const;
  void set_com1_audio_selection(bool value);
  private:
  bool _internal_com1_audio_selection() const;
  void _internal_set_com1_audio_selection(bool value);
  public:

  // bool com2_power = 7;
  bool has_com2_power() const;
  private:
  bool _internal_has_com2_power() const;
  public:
  void clear_com2_power();
  bool com2_power() const;
  void set_com2_power(bool value);
  private:
  bool _internal_com2_power() const;
  void _internal_set_com2_power(bool value);
  public:

  // bool com2_audio_selection = 10;
  bool has_com2_audio_selection() const;
  private:
  bool _internal_has_com2_audio_selection() const;
  public:
  void clear_com2_audio_selection();
  bool com2_audio_selection() const;
  void set_com2_audio_selection(bool value);
  private:
  bool _internal_com2_audio_selection() const;
  void _internal_set_com2_audio_selection(bool value);
  public:

  // int32 com2_freq = 8;
  bool has_com2_freq() const;
  private:
  bool _internal_has_com2_freq() const;
  public:
  void clear_com2_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 com2_freq() const;
  void set_com2_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_com2_freq() const;
  void _internal_set_com2_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 com2_stby_freq = 9;
  bool has_com2_stby_freq() const;
  private:
  bool _internal_has_com2_stby_freq() const;
  public:
  void clear_com2_stby_freq();
  ::PROTOBUF_NAMESPACE_ID::int32 com2_stby_freq() const;
  void set_com2_stby_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_com2_stby_freq() const;
  void _internal_set_com2_stby_freq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float com2_volume = 11;
  bool has_com2_volume() const;
  private:
  bool _internal_has_com2_volume() const;
  public:
  void clear_com2_volume();
  float com2_volume() const;
  void set_com2_volume(float value);
  private:
  float _internal_com2_volume() const;
  void _internal_set_com2_volume(float value);
  public:

  // double latitude = 13;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 14;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 15;
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // double pressure_altitude = 16;
  bool has_pressure_altitude() const;
  private:
  bool _internal_has_pressure_altitude() const;
  public:
  void clear_pressure_altitude();
  double pressure_altitude() const;
  void set_pressure_altitude(double value);
  private:
  double _internal_pressure_altitude() const;
  void _internal_set_pressure_altitude(double value);
  public:

  // double ground_speed = 17;
  bool has_ground_speed() const;
  private:
  bool _internal_has_ground_speed() const;
  public:
  void clear_ground_speed();
  double ground_speed() const;
  void set_ground_speed(double value);
  private:
  double _internal_ground_speed() const;
  void _internal_set_ground_speed(double value);
  public:

  // double pitch = 18;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double roll = 19;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double yaw = 20;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // double velocity_latitude = 21;
  bool has_velocity_latitude() const;
  private:
  bool _internal_has_velocity_latitude() const;
  public:
  void clear_velocity_latitude();
  double velocity_latitude() const;
  void set_velocity_latitude(double value);
  private:
  double _internal_velocity_latitude() const;
  void _internal_set_velocity_latitude(double value);
  public:

  // double velocity_altitude = 22;
  bool has_velocity_altitude() const;
  private:
  bool _internal_has_velocity_altitude() const;
  public:
  void clear_velocity_altitude();
  double velocity_altitude() const;
  void set_velocity_altitude(double value);
  private:
  double _internal_velocity_altitude() const;
  void _internal_set_velocity_altitude(double value);
  public:

  // double velocity_longitude = 23;
  bool has_velocity_longitude() const;
  private:
  bool _internal_has_velocity_longitude() const;
  public:
  void clear_velocity_longitude();
  double velocity_longitude() const;
  void set_velocity_longitude(double value);
  private:
  double _internal_velocity_longitude() const;
  void _internal_set_velocity_longitude(double value);
  public:

  // double velocity_pitch = 24;
  bool has_velocity_pitch() const;
  private:
  bool _internal_has_velocity_pitch() const;
  public:
  void clear_velocity_pitch();
  double velocity_pitch() const;
  void set_velocity_pitch(double value);
  private:
  double _internal_velocity_pitch() const;
  void _internal_set_velocity_pitch(double value);
  public:

  // double velocity_heading = 25;
  bool has_velocity_heading() const;
  private:
  bool _internal_has_velocity_heading() const;
  public:
  void clear_velocity_heading();
  double velocity_heading() const;
  void set_velocity_heading(double value);
  private:
  double _internal_velocity_heading() const;
  void _internal_set_velocity_heading(double value);
  public:

  // bool avionics_power_on = 12;
  bool has_avionics_power_on() const;
  private:
  bool _internal_has_avionics_power_on() const;
  public:
  void clear_avionics_power_on();
  bool avionics_power_on() const;
  void set_avionics_power_on(bool value);
  private:
  bool _internal_avionics_power_on() const;
  void _internal_set_avionics_power_on(bool value);
  public:

  // bool transponder_ident = 29;
  bool has_transponder_ident() const;
  private:
  bool _internal_has_transponder_ident() const;
  public:
  void clear_transponder_ident();
  bool transponder_ident() const;
  void set_transponder_ident(bool value);
  private:
  bool _internal_transponder_ident() const;
  void _internal_set_transponder_ident(bool value);
  public:

  // bool beacon_lights_on = 30;
  bool has_beacon_lights_on() const;
  private:
  bool _internal_has_beacon_lights_on() const;
  public:
  void clear_beacon_lights_on();
  bool beacon_lights_on() const;
  void set_beacon_lights_on(bool value);
  private:
  bool _internal_beacon_lights_on() const;
  void _internal_set_beacon_lights_on(bool value);
  public:

  // bool landing_lights_on = 31;
  bool has_landing_lights_on() const;
  private:
  bool _internal_has_landing_lights_on() const;
  public:
  void clear_landing_lights_on();
  bool landing_lights_on() const;
  void set_landing_lights_on(bool value);
  private:
  bool _internal_landing_lights_on() const;
  void _internal_set_landing_lights_on(bool value);
  public:

  // int32 transponder_code = 27;
  bool has_transponder_code() const;
  private:
  bool _internal_has_transponder_code() const;
  public:
  void clear_transponder_code();
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_code() const;
  void set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transponder_code() const;
  void _internal_set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double velocity_bank = 26;
  bool has_velocity_bank() const;
  private:
  bool _internal_has_velocity_bank() const;
  public:
  void clear_velocity_bank();
  double velocity_bank() const;
  void set_velocity_bank(double value);
  private:
  double _internal_velocity_bank() const;
  void _internal_set_velocity_bank(double value);
  public:

  // int32 transponder_mode = 28;
  bool has_transponder_mode() const;
  private:
  bool _internal_has_transponder_mode() const;
  public:
  void clear_transponder_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_mode() const;
  void set_transponder_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transponder_mode() const;
  void _internal_set_transponder_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool nav_lights_on = 32;
  bool has_nav_lights_on() const;
  private:
  bool _internal_has_nav_lights_on() const;
  public:
  void clear_nav_lights_on();
  bool nav_lights_on() const;
  void set_nav_lights_on(bool value);
  private:
  bool _internal_nav_lights_on() const;
  void _internal_set_nav_lights_on(bool value);
  public:

  // bool strobe_lights_on = 33;
  bool has_strobe_lights_on() const;
  private:
  bool _internal_has_strobe_lights_on() const;
  public:
  void clear_strobe_lights_on();
  bool strobe_lights_on() const;
  void set_strobe_lights_on(bool value);
  private:
  bool _internal_strobe_lights_on() const;
  void _internal_set_strobe_lights_on(bool value);
  public:

  // bool taxi_lights_on = 34;
  bool has_taxi_lights_on() const;
  private:
  bool _internal_has_taxi_lights_on() const;
  public:
  void clear_taxi_lights_on();
  bool taxi_lights_on() const;
  void set_taxi_lights_on(bool value);
  private:
  bool _internal_taxi_lights_on() const;
  void _internal_set_taxi_lights_on(bool value);
  public:

  // bool gear_down = 36;
  bool has_gear_down() const;
  private:
  bool _internal_has_gear_down() const;
  public:
  void clear_gear_down();
  bool gear_down() const;
  void set_gear_down(bool value);
  private:
  bool _internal_gear_down() const;
  void _internal_set_gear_down(bool value);
  public:

  // double flaps = 35;
  bool has_flaps() const;
  private:
  bool _internal_has_flaps() const;
  public:
  void clear_flaps();
  double flaps() const;
  void set_flaps(double value);
  private:
  double _internal_flaps() const;
  void _internal_set_flaps(double value);
  public:

  // double speed_brakes = 37;
  bool has_speed_brakes() const;
  private:
  bool _internal_has_speed_brakes() const;
  public:
  void clear_speed_brakes();
  double speed_brakes() const;
  void set_speed_brakes(double value);
  private:
  double _internal_speed_brakes() const;
  void _internal_set_speed_brakes(double value);
  public:

  // int32 engine_count = 38;
  bool has_engine_count() const;
  private:
  bool _internal_has_engine_count() const;
  public:
  void clear_engine_count();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_count() const;
  void set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_count() const;
  void _internal_set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool engine1_running = 39;
  bool has_engine1_running() const;
  private:
  bool _internal_has_engine1_running() const;
  public:
  void clear_engine1_running();
  bool engine1_running() const;
  void set_engine1_running(bool value);
  private:
  bool _internal_engine1_running() const;
  void _internal_set_engine1_running(bool value);
  public:

  // bool engine2_running = 40;
  bool has_engine2_running() const;
  private:
  bool _internal_has_engine2_running() const;
  public:
  void clear_engine2_running();
  bool engine2_running() const;
  void set_engine2_running(bool value);
  private:
  bool _internal_engine2_running() const;
  void _internal_set_engine2_running(bool value);
  public:

  // bool engine3_running = 41;
  bool has_engine3_running() const;
  private:
  bool _internal_has_engine3_running() const;
  public:
  void clear_engine3_running();
  bool engine3_running() const;
  void set_engine3_running(bool value);
  private:
  bool _internal_engine3_running() const;
  void _internal_set_engine3_running(bool value);
  public:

  // bool engine4_running = 42;
  bool has_engine4_running() const;
  private:
  bool _internal_has_engine4_running() const;
  public:
  void clear_engine4_running();
  bool engine4_running() const;
  void set_engine4_running(bool value);
  private:
  bool _internal_engine4_running() const;
  void _internal_set_engine4_running(bool value);
  public:

  // bool on_ground = 43;
  bool has_on_ground() const;
  private:
  bool _internal_has_on_ground() const;
  public:
  void clear_on_ground();
  bool on_ground() const;
  void set_on_ground(bool value);
  private:
  bool _internal_on_ground() const;
  void _internal_set_on_ground(bool value);
  public:

  // bool replay_mode = 44;
  bool has_replay_mode() const;
  private:
  bool _internal_has_replay_mode() const;
  public:
  void clear_replay_mode();
  bool replay_mode() const;
  void set_replay_mode(bool value);
  private:
  bool _internal_replay_mode() const;
  void _internal_set_replay_mode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.XplaneDatarefs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 audio_com_selection_;
  ::PROTOBUF_NAMESPACE_ID::int32 com1_freq_;
  ::PROTOBUF_NAMESPACE_ID::int32 com1_stby_freq_;
  float com1_volume_;
  bool com1_power_;
  bool com1_audio_selection_;
  bool com2_power_;
  bool com2_audio_selection_;
  ::PROTOBUF_NAMESPACE_ID::int32 com2_freq_;
  ::PROTOBUF_NAMESPACE_ID::int32 com2_stby_freq_;
  float com2_volume_;
  double latitude_;
  double longitude_;
  double altitude_;
  double pressure_altitude_;
  double ground_speed_;
  double pitch_;
  double roll_;
  double yaw_;
  double velocity_latitude_;
  double velocity_altitude_;
  double velocity_longitude_;
  double velocity_pitch_;
  double velocity_heading_;
  bool avionics_power_on_;
  bool transponder_ident_;
  bool beacon_lights_on_;
  bool landing_lights_on_;
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_code_;
  double velocity_bank_;
  ::PROTOBUF_NAMESPACE_ID::int32 transponder_mode_;
  bool nav_lights_on_;
  bool strobe_lights_on_;
  bool taxi_lights_on_;
  bool gear_down_;
  double flaps_;
  double speed_brakes_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_count_;
  bool engine1_running_;
  bool engine2_running_;
  bool engine3_running_;
  bool engine4_running_;
  bool on_ground_;
  bool replay_mode_;
  friend struct ::TableStruct_XplaneDatarefs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XplaneDatarefs

// int32 audio_com_selection = 1;
inline bool XplaneDatarefs::_internal_has_audio_com_selection() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_audio_com_selection() const {
  return _internal_has_audio_com_selection();
}
inline void XplaneDatarefs::clear_audio_com_selection() {
  audio_com_selection_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::_internal_audio_com_selection() const {
  return audio_com_selection_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::audio_com_selection() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.audio_com_selection)
  return _internal_audio_com_selection();
}
inline void XplaneDatarefs::_internal_set_audio_com_selection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  audio_com_selection_ = value;
}
inline void XplaneDatarefs::set_audio_com_selection(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_audio_com_selection(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.audio_com_selection)
}

// bool com1_power = 2;
inline bool XplaneDatarefs::_internal_has_com1_power() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com1_power() const {
  return _internal_has_com1_power();
}
inline void XplaneDatarefs::clear_com1_power() {
  com1_power_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool XplaneDatarefs::_internal_com1_power() const {
  return com1_power_;
}
inline bool XplaneDatarefs::com1_power() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com1_power)
  return _internal_com1_power();
}
inline void XplaneDatarefs::_internal_set_com1_power(bool value) {
  _has_bits_[0] |= 0x00000010u;
  com1_power_ = value;
}
inline void XplaneDatarefs::set_com1_power(bool value) {
  _internal_set_com1_power(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com1_power)
}

// int32 com1_freq = 3;
inline bool XplaneDatarefs::_internal_has_com1_freq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com1_freq() const {
  return _internal_has_com1_freq();
}
inline void XplaneDatarefs::clear_com1_freq() {
  com1_freq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::_internal_com1_freq() const {
  return com1_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::com1_freq() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com1_freq)
  return _internal_com1_freq();
}
inline void XplaneDatarefs::_internal_set_com1_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  com1_freq_ = value;
}
inline void XplaneDatarefs::set_com1_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_com1_freq(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com1_freq)
}

// int32 com1_stby_freq = 4;
inline bool XplaneDatarefs::_internal_has_com1_stby_freq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com1_stby_freq() const {
  return _internal_has_com1_stby_freq();
}
inline void XplaneDatarefs::clear_com1_stby_freq() {
  com1_stby_freq_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::_internal_com1_stby_freq() const {
  return com1_stby_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::com1_stby_freq() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com1_stby_freq)
  return _internal_com1_stby_freq();
}
inline void XplaneDatarefs::_internal_set_com1_stby_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  com1_stby_freq_ = value;
}
inline void XplaneDatarefs::set_com1_stby_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_com1_stby_freq(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com1_stby_freq)
}

// bool com1_audio_selection = 5;
inline bool XplaneDatarefs::_internal_has_com1_audio_selection() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com1_audio_selection() const {
  return _internal_has_com1_audio_selection();
}
inline void XplaneDatarefs::clear_com1_audio_selection() {
  com1_audio_selection_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool XplaneDatarefs::_internal_com1_audio_selection() const {
  return com1_audio_selection_;
}
inline bool XplaneDatarefs::com1_audio_selection() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com1_audio_selection)
  return _internal_com1_audio_selection();
}
inline void XplaneDatarefs::_internal_set_com1_audio_selection(bool value) {
  _has_bits_[0] |= 0x00000020u;
  com1_audio_selection_ = value;
}
inline void XplaneDatarefs::set_com1_audio_selection(bool value) {
  _internal_set_com1_audio_selection(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com1_audio_selection)
}

// float com1_volume = 6;
inline bool XplaneDatarefs::_internal_has_com1_volume() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com1_volume() const {
  return _internal_has_com1_volume();
}
inline void XplaneDatarefs::clear_com1_volume() {
  com1_volume_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float XplaneDatarefs::_internal_com1_volume() const {
  return com1_volume_;
}
inline float XplaneDatarefs::com1_volume() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com1_volume)
  return _internal_com1_volume();
}
inline void XplaneDatarefs::_internal_set_com1_volume(float value) {
  _has_bits_[0] |= 0x00000008u;
  com1_volume_ = value;
}
inline void XplaneDatarefs::set_com1_volume(float value) {
  _internal_set_com1_volume(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com1_volume)
}

// bool com2_power = 7;
inline bool XplaneDatarefs::_internal_has_com2_power() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com2_power() const {
  return _internal_has_com2_power();
}
inline void XplaneDatarefs::clear_com2_power() {
  com2_power_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool XplaneDatarefs::_internal_com2_power() const {
  return com2_power_;
}
inline bool XplaneDatarefs::com2_power() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com2_power)
  return _internal_com2_power();
}
inline void XplaneDatarefs::_internal_set_com2_power(bool value) {
  _has_bits_[0] |= 0x00000040u;
  com2_power_ = value;
}
inline void XplaneDatarefs::set_com2_power(bool value) {
  _internal_set_com2_power(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com2_power)
}

// int32 com2_freq = 8;
inline bool XplaneDatarefs::_internal_has_com2_freq() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com2_freq() const {
  return _internal_has_com2_freq();
}
inline void XplaneDatarefs::clear_com2_freq() {
  com2_freq_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::_internal_com2_freq() const {
  return com2_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::com2_freq() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com2_freq)
  return _internal_com2_freq();
}
inline void XplaneDatarefs::_internal_set_com2_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  com2_freq_ = value;
}
inline void XplaneDatarefs::set_com2_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_com2_freq(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com2_freq)
}

// int32 com2_stby_freq = 9;
inline bool XplaneDatarefs::_internal_has_com2_stby_freq() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com2_stby_freq() const {
  return _internal_has_com2_stby_freq();
}
inline void XplaneDatarefs::clear_com2_stby_freq() {
  com2_stby_freq_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::_internal_com2_stby_freq() const {
  return com2_stby_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::com2_stby_freq() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com2_stby_freq)
  return _internal_com2_stby_freq();
}
inline void XplaneDatarefs::_internal_set_com2_stby_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  com2_stby_freq_ = value;
}
inline void XplaneDatarefs::set_com2_stby_freq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_com2_stby_freq(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com2_stby_freq)
}

// bool com2_audio_selection = 10;
inline bool XplaneDatarefs::_internal_has_com2_audio_selection() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com2_audio_selection() const {
  return _internal_has_com2_audio_selection();
}
inline void XplaneDatarefs::clear_com2_audio_selection() {
  com2_audio_selection_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool XplaneDatarefs::_internal_com2_audio_selection() const {
  return com2_audio_selection_;
}
inline bool XplaneDatarefs::com2_audio_selection() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com2_audio_selection)
  return _internal_com2_audio_selection();
}
inline void XplaneDatarefs::_internal_set_com2_audio_selection(bool value) {
  _has_bits_[0] |= 0x00000080u;
  com2_audio_selection_ = value;
}
inline void XplaneDatarefs::set_com2_audio_selection(bool value) {
  _internal_set_com2_audio_selection(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com2_audio_selection)
}

// float com2_volume = 11;
inline bool XplaneDatarefs::_internal_has_com2_volume() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_com2_volume() const {
  return _internal_has_com2_volume();
}
inline void XplaneDatarefs::clear_com2_volume() {
  com2_volume_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float XplaneDatarefs::_internal_com2_volume() const {
  return com2_volume_;
}
inline float XplaneDatarefs::com2_volume() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.com2_volume)
  return _internal_com2_volume();
}
inline void XplaneDatarefs::_internal_set_com2_volume(float value) {
  _has_bits_[0] |= 0x00000400u;
  com2_volume_ = value;
}
inline void XplaneDatarefs::set_com2_volume(float value) {
  _internal_set_com2_volume(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.com2_volume)
}

// bool avionics_power_on = 12;
inline bool XplaneDatarefs::_internal_has_avionics_power_on() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_avionics_power_on() const {
  return _internal_has_avionics_power_on();
}
inline void XplaneDatarefs::clear_avionics_power_on() {
  avionics_power_on_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool XplaneDatarefs::_internal_avionics_power_on() const {
  return avionics_power_on_;
}
inline bool XplaneDatarefs::avionics_power_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.avionics_power_on)
  return _internal_avionics_power_on();
}
inline void XplaneDatarefs::_internal_set_avionics_power_on(bool value) {
  _has_bits_[0] |= 0x01000000u;
  avionics_power_on_ = value;
}
inline void XplaneDatarefs::set_avionics_power_on(bool value) {
  _internal_set_avionics_power_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.avionics_power_on)
}

// double latitude = 13;
inline bool XplaneDatarefs::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_latitude() const {
  return _internal_has_latitude();
}
inline void XplaneDatarefs::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double XplaneDatarefs::_internal_latitude() const {
  return latitude_;
}
inline double XplaneDatarefs::latitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.latitude)
  return _internal_latitude();
}
inline void XplaneDatarefs::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000800u;
  latitude_ = value;
}
inline void XplaneDatarefs::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.latitude)
}

// double longitude = 14;
inline bool XplaneDatarefs::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_longitude() const {
  return _internal_has_longitude();
}
inline void XplaneDatarefs::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double XplaneDatarefs::_internal_longitude() const {
  return longitude_;
}
inline double XplaneDatarefs::longitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.longitude)
  return _internal_longitude();
}
inline void XplaneDatarefs::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00001000u;
  longitude_ = value;
}
inline void XplaneDatarefs::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.longitude)
}

// double altitude = 15;
inline bool XplaneDatarefs::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_altitude() const {
  return _internal_has_altitude();
}
inline void XplaneDatarefs::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double XplaneDatarefs::_internal_altitude() const {
  return altitude_;
}
inline double XplaneDatarefs::altitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.altitude)
  return _internal_altitude();
}
inline void XplaneDatarefs::_internal_set_altitude(double value) {
  _has_bits_[0] |= 0x00002000u;
  altitude_ = value;
}
inline void XplaneDatarefs::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.altitude)
}

// double pressure_altitude = 16;
inline bool XplaneDatarefs::_internal_has_pressure_altitude() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_pressure_altitude() const {
  return _internal_has_pressure_altitude();
}
inline void XplaneDatarefs::clear_pressure_altitude() {
  pressure_altitude_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double XplaneDatarefs::_internal_pressure_altitude() const {
  return pressure_altitude_;
}
inline double XplaneDatarefs::pressure_altitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.pressure_altitude)
  return _internal_pressure_altitude();
}
inline void XplaneDatarefs::_internal_set_pressure_altitude(double value) {
  _has_bits_[0] |= 0x00004000u;
  pressure_altitude_ = value;
}
inline void XplaneDatarefs::set_pressure_altitude(double value) {
  _internal_set_pressure_altitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.pressure_altitude)
}

// double ground_speed = 17;
inline bool XplaneDatarefs::_internal_has_ground_speed() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_ground_speed() const {
  return _internal_has_ground_speed();
}
inline void XplaneDatarefs::clear_ground_speed() {
  ground_speed_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double XplaneDatarefs::_internal_ground_speed() const {
  return ground_speed_;
}
inline double XplaneDatarefs::ground_speed() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.ground_speed)
  return _internal_ground_speed();
}
inline void XplaneDatarefs::_internal_set_ground_speed(double value) {
  _has_bits_[0] |= 0x00008000u;
  ground_speed_ = value;
}
inline void XplaneDatarefs::set_ground_speed(double value) {
  _internal_set_ground_speed(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.ground_speed)
}

// double pitch = 18;
inline bool XplaneDatarefs::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_pitch() const {
  return _internal_has_pitch();
}
inline void XplaneDatarefs::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double XplaneDatarefs::_internal_pitch() const {
  return pitch_;
}
inline double XplaneDatarefs::pitch() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.pitch)
  return _internal_pitch();
}
inline void XplaneDatarefs::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00010000u;
  pitch_ = value;
}
inline void XplaneDatarefs::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.pitch)
}

// double roll = 19;
inline bool XplaneDatarefs::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_roll() const {
  return _internal_has_roll();
}
inline void XplaneDatarefs::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double XplaneDatarefs::_internal_roll() const {
  return roll_;
}
inline double XplaneDatarefs::roll() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.roll)
  return _internal_roll();
}
inline void XplaneDatarefs::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00020000u;
  roll_ = value;
}
inline void XplaneDatarefs::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.roll)
}

// double yaw = 20;
inline bool XplaneDatarefs::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_yaw() const {
  return _internal_has_yaw();
}
inline void XplaneDatarefs::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double XplaneDatarefs::_internal_yaw() const {
  return yaw_;
}
inline double XplaneDatarefs::yaw() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.yaw)
  return _internal_yaw();
}
inline void XplaneDatarefs::_internal_set_yaw(double value) {
  _has_bits_[0] |= 0x00040000u;
  yaw_ = value;
}
inline void XplaneDatarefs::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.yaw)
}

// double velocity_latitude = 21;
inline bool XplaneDatarefs::_internal_has_velocity_latitude() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_velocity_latitude() const {
  return _internal_has_velocity_latitude();
}
inline void XplaneDatarefs::clear_velocity_latitude() {
  velocity_latitude_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline double XplaneDatarefs::_internal_velocity_latitude() const {
  return velocity_latitude_;
}
inline double XplaneDatarefs::velocity_latitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.velocity_latitude)
  return _internal_velocity_latitude();
}
inline void XplaneDatarefs::_internal_set_velocity_latitude(double value) {
  _has_bits_[0] |= 0x00080000u;
  velocity_latitude_ = value;
}
inline void XplaneDatarefs::set_velocity_latitude(double value) {
  _internal_set_velocity_latitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.velocity_latitude)
}

// double velocity_altitude = 22;
inline bool XplaneDatarefs::_internal_has_velocity_altitude() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_velocity_altitude() const {
  return _internal_has_velocity_altitude();
}
inline void XplaneDatarefs::clear_velocity_altitude() {
  velocity_altitude_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double XplaneDatarefs::_internal_velocity_altitude() const {
  return velocity_altitude_;
}
inline double XplaneDatarefs::velocity_altitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.velocity_altitude)
  return _internal_velocity_altitude();
}
inline void XplaneDatarefs::_internal_set_velocity_altitude(double value) {
  _has_bits_[0] |= 0x00100000u;
  velocity_altitude_ = value;
}
inline void XplaneDatarefs::set_velocity_altitude(double value) {
  _internal_set_velocity_altitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.velocity_altitude)
}

// double velocity_longitude = 23;
inline bool XplaneDatarefs::_internal_has_velocity_longitude() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_velocity_longitude() const {
  return _internal_has_velocity_longitude();
}
inline void XplaneDatarefs::clear_velocity_longitude() {
  velocity_longitude_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double XplaneDatarefs::_internal_velocity_longitude() const {
  return velocity_longitude_;
}
inline double XplaneDatarefs::velocity_longitude() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.velocity_longitude)
  return _internal_velocity_longitude();
}
inline void XplaneDatarefs::_internal_set_velocity_longitude(double value) {
  _has_bits_[0] |= 0x00200000u;
  velocity_longitude_ = value;
}
inline void XplaneDatarefs::set_velocity_longitude(double value) {
  _internal_set_velocity_longitude(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.velocity_longitude)
}

// double velocity_pitch = 24;
inline bool XplaneDatarefs::_internal_has_velocity_pitch() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_velocity_pitch() const {
  return _internal_has_velocity_pitch();
}
inline void XplaneDatarefs::clear_velocity_pitch() {
  velocity_pitch_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double XplaneDatarefs::_internal_velocity_pitch() const {
  return velocity_pitch_;
}
inline double XplaneDatarefs::velocity_pitch() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.velocity_pitch)
  return _internal_velocity_pitch();
}
inline void XplaneDatarefs::_internal_set_velocity_pitch(double value) {
  _has_bits_[0] |= 0x00400000u;
  velocity_pitch_ = value;
}
inline void XplaneDatarefs::set_velocity_pitch(double value) {
  _internal_set_velocity_pitch(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.velocity_pitch)
}

// double velocity_heading = 25;
inline bool XplaneDatarefs::_internal_has_velocity_heading() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_velocity_heading() const {
  return _internal_has_velocity_heading();
}
inline void XplaneDatarefs::clear_velocity_heading() {
  velocity_heading_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double XplaneDatarefs::_internal_velocity_heading() const {
  return velocity_heading_;
}
inline double XplaneDatarefs::velocity_heading() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.velocity_heading)
  return _internal_velocity_heading();
}
inline void XplaneDatarefs::_internal_set_velocity_heading(double value) {
  _has_bits_[0] |= 0x00800000u;
  velocity_heading_ = value;
}
inline void XplaneDatarefs::set_velocity_heading(double value) {
  _internal_set_velocity_heading(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.velocity_heading)
}

// double velocity_bank = 26;
inline bool XplaneDatarefs::_internal_has_velocity_bank() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_velocity_bank() const {
  return _internal_has_velocity_bank();
}
inline void XplaneDatarefs::clear_velocity_bank() {
  velocity_bank_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline double XplaneDatarefs::_internal_velocity_bank() const {
  return velocity_bank_;
}
inline double XplaneDatarefs::velocity_bank() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.velocity_bank)
  return _internal_velocity_bank();
}
inline void XplaneDatarefs::_internal_set_velocity_bank(double value) {
  _has_bits_[0] |= 0x20000000u;
  velocity_bank_ = value;
}
inline void XplaneDatarefs::set_velocity_bank(double value) {
  _internal_set_velocity_bank(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.velocity_bank)
}

// int32 transponder_code = 27;
inline bool XplaneDatarefs::_internal_has_transponder_code() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_transponder_code() const {
  return _internal_has_transponder_code();
}
inline void XplaneDatarefs::clear_transponder_code() {
  transponder_code_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::_internal_transponder_code() const {
  return transponder_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::transponder_code() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.transponder_code)
  return _internal_transponder_code();
}
inline void XplaneDatarefs::_internal_set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  transponder_code_ = value;
}
inline void XplaneDatarefs::set_transponder_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transponder_code(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.transponder_code)
}

// int32 transponder_mode = 28;
inline bool XplaneDatarefs::_internal_has_transponder_mode() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_transponder_mode() const {
  return _internal_has_transponder_mode();
}
inline void XplaneDatarefs::clear_transponder_mode() {
  transponder_mode_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::_internal_transponder_mode() const {
  return transponder_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::transponder_mode() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.transponder_mode)
  return _internal_transponder_mode();
}
inline void XplaneDatarefs::_internal_set_transponder_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  transponder_mode_ = value;
}
inline void XplaneDatarefs::set_transponder_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transponder_mode(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.transponder_mode)
}

// bool transponder_ident = 29;
inline bool XplaneDatarefs::_internal_has_transponder_ident() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_transponder_ident() const {
  return _internal_has_transponder_ident();
}
inline void XplaneDatarefs::clear_transponder_ident() {
  transponder_ident_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool XplaneDatarefs::_internal_transponder_ident() const {
  return transponder_ident_;
}
inline bool XplaneDatarefs::transponder_ident() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.transponder_ident)
  return _internal_transponder_ident();
}
inline void XplaneDatarefs::_internal_set_transponder_ident(bool value) {
  _has_bits_[0] |= 0x02000000u;
  transponder_ident_ = value;
}
inline void XplaneDatarefs::set_transponder_ident(bool value) {
  _internal_set_transponder_ident(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.transponder_ident)
}

// bool beacon_lights_on = 30;
inline bool XplaneDatarefs::_internal_has_beacon_lights_on() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_beacon_lights_on() const {
  return _internal_has_beacon_lights_on();
}
inline void XplaneDatarefs::clear_beacon_lights_on() {
  beacon_lights_on_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool XplaneDatarefs::_internal_beacon_lights_on() const {
  return beacon_lights_on_;
}
inline bool XplaneDatarefs::beacon_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.beacon_lights_on)
  return _internal_beacon_lights_on();
}
inline void XplaneDatarefs::_internal_set_beacon_lights_on(bool value) {
  _has_bits_[0] |= 0x04000000u;
  beacon_lights_on_ = value;
}
inline void XplaneDatarefs::set_beacon_lights_on(bool value) {
  _internal_set_beacon_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.beacon_lights_on)
}

// bool landing_lights_on = 31;
inline bool XplaneDatarefs::_internal_has_landing_lights_on() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_landing_lights_on() const {
  return _internal_has_landing_lights_on();
}
inline void XplaneDatarefs::clear_landing_lights_on() {
  landing_lights_on_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool XplaneDatarefs::_internal_landing_lights_on() const {
  return landing_lights_on_;
}
inline bool XplaneDatarefs::landing_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.landing_lights_on)
  return _internal_landing_lights_on();
}
inline void XplaneDatarefs::_internal_set_landing_lights_on(bool value) {
  _has_bits_[0] |= 0x08000000u;
  landing_lights_on_ = value;
}
inline void XplaneDatarefs::set_landing_lights_on(bool value) {
  _internal_set_landing_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.landing_lights_on)
}

// bool nav_lights_on = 32;
inline bool XplaneDatarefs::_internal_has_nav_lights_on() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_nav_lights_on() const {
  return _internal_has_nav_lights_on();
}
inline void XplaneDatarefs::clear_nav_lights_on() {
  nav_lights_on_ = false;
  _has_bits_[0] &= ~0x80000000u;
}
inline bool XplaneDatarefs::_internal_nav_lights_on() const {
  return nav_lights_on_;
}
inline bool XplaneDatarefs::nav_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.nav_lights_on)
  return _internal_nav_lights_on();
}
inline void XplaneDatarefs::_internal_set_nav_lights_on(bool value) {
  _has_bits_[0] |= 0x80000000u;
  nav_lights_on_ = value;
}
inline void XplaneDatarefs::set_nav_lights_on(bool value) {
  _internal_set_nav_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.nav_lights_on)
}

// bool strobe_lights_on = 33;
inline bool XplaneDatarefs::_internal_has_strobe_lights_on() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_strobe_lights_on() const {
  return _internal_has_strobe_lights_on();
}
inline void XplaneDatarefs::clear_strobe_lights_on() {
  strobe_lights_on_ = false;
  _has_bits_[1] &= ~0x00000001u;
}
inline bool XplaneDatarefs::_internal_strobe_lights_on() const {
  return strobe_lights_on_;
}
inline bool XplaneDatarefs::strobe_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.strobe_lights_on)
  return _internal_strobe_lights_on();
}
inline void XplaneDatarefs::_internal_set_strobe_lights_on(bool value) {
  _has_bits_[1] |= 0x00000001u;
  strobe_lights_on_ = value;
}
inline void XplaneDatarefs::set_strobe_lights_on(bool value) {
  _internal_set_strobe_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.strobe_lights_on)
}

// bool taxi_lights_on = 34;
inline bool XplaneDatarefs::_internal_has_taxi_lights_on() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_taxi_lights_on() const {
  return _internal_has_taxi_lights_on();
}
inline void XplaneDatarefs::clear_taxi_lights_on() {
  taxi_lights_on_ = false;
  _has_bits_[1] &= ~0x00000002u;
}
inline bool XplaneDatarefs::_internal_taxi_lights_on() const {
  return taxi_lights_on_;
}
inline bool XplaneDatarefs::taxi_lights_on() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.taxi_lights_on)
  return _internal_taxi_lights_on();
}
inline void XplaneDatarefs::_internal_set_taxi_lights_on(bool value) {
  _has_bits_[1] |= 0x00000002u;
  taxi_lights_on_ = value;
}
inline void XplaneDatarefs::set_taxi_lights_on(bool value) {
  _internal_set_taxi_lights_on(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.taxi_lights_on)
}

// double flaps = 35;
inline bool XplaneDatarefs::_internal_has_flaps() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_flaps() const {
  return _internal_has_flaps();
}
inline void XplaneDatarefs::clear_flaps() {
  flaps_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline double XplaneDatarefs::_internal_flaps() const {
  return flaps_;
}
inline double XplaneDatarefs::flaps() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.flaps)
  return _internal_flaps();
}
inline void XplaneDatarefs::_internal_set_flaps(double value) {
  _has_bits_[1] |= 0x00000008u;
  flaps_ = value;
}
inline void XplaneDatarefs::set_flaps(double value) {
  _internal_set_flaps(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.flaps)
}

// bool gear_down = 36;
inline bool XplaneDatarefs::_internal_has_gear_down() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_gear_down() const {
  return _internal_has_gear_down();
}
inline void XplaneDatarefs::clear_gear_down() {
  gear_down_ = false;
  _has_bits_[1] &= ~0x00000004u;
}
inline bool XplaneDatarefs::_internal_gear_down() const {
  return gear_down_;
}
inline bool XplaneDatarefs::gear_down() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.gear_down)
  return _internal_gear_down();
}
inline void XplaneDatarefs::_internal_set_gear_down(bool value) {
  _has_bits_[1] |= 0x00000004u;
  gear_down_ = value;
}
inline void XplaneDatarefs::set_gear_down(bool value) {
  _internal_set_gear_down(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.gear_down)
}

// double speed_brakes = 37;
inline bool XplaneDatarefs::_internal_has_speed_brakes() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_speed_brakes() const {
  return _internal_has_speed_brakes();
}
inline void XplaneDatarefs::clear_speed_brakes() {
  speed_brakes_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline double XplaneDatarefs::_internal_speed_brakes() const {
  return speed_brakes_;
}
inline double XplaneDatarefs::speed_brakes() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.speed_brakes)
  return _internal_speed_brakes();
}
inline void XplaneDatarefs::_internal_set_speed_brakes(double value) {
  _has_bits_[1] |= 0x00000010u;
  speed_brakes_ = value;
}
inline void XplaneDatarefs::set_speed_brakes(double value) {
  _internal_set_speed_brakes(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.speed_brakes)
}

// int32 engine_count = 38;
inline bool XplaneDatarefs::_internal_has_engine_count() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_engine_count() const {
  return _internal_has_engine_count();
}
inline void XplaneDatarefs::clear_engine_count() {
  engine_count_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::_internal_engine_count() const {
  return engine_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XplaneDatarefs::engine_count() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.engine_count)
  return _internal_engine_count();
}
inline void XplaneDatarefs::_internal_set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  engine_count_ = value;
}
inline void XplaneDatarefs::set_engine_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_count(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.engine_count)
}

// bool engine1_running = 39;
inline bool XplaneDatarefs::_internal_has_engine1_running() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_engine1_running() const {
  return _internal_has_engine1_running();
}
inline void XplaneDatarefs::clear_engine1_running() {
  engine1_running_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool XplaneDatarefs::_internal_engine1_running() const {
  return engine1_running_;
}
inline bool XplaneDatarefs::engine1_running() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.engine1_running)
  return _internal_engine1_running();
}
inline void XplaneDatarefs::_internal_set_engine1_running(bool value) {
  _has_bits_[1] |= 0x00000040u;
  engine1_running_ = value;
}
inline void XplaneDatarefs::set_engine1_running(bool value) {
  _internal_set_engine1_running(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.engine1_running)
}

// bool engine2_running = 40;
inline bool XplaneDatarefs::_internal_has_engine2_running() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_engine2_running() const {
  return _internal_has_engine2_running();
}
inline void XplaneDatarefs::clear_engine2_running() {
  engine2_running_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool XplaneDatarefs::_internal_engine2_running() const {
  return engine2_running_;
}
inline bool XplaneDatarefs::engine2_running() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.engine2_running)
  return _internal_engine2_running();
}
inline void XplaneDatarefs::_internal_set_engine2_running(bool value) {
  _has_bits_[1] |= 0x00000080u;
  engine2_running_ = value;
}
inline void XplaneDatarefs::set_engine2_running(bool value) {
  _internal_set_engine2_running(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.engine2_running)
}

// bool engine3_running = 41;
inline bool XplaneDatarefs::_internal_has_engine3_running() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_engine3_running() const {
  return _internal_has_engine3_running();
}
inline void XplaneDatarefs::clear_engine3_running() {
  engine3_running_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool XplaneDatarefs::_internal_engine3_running() const {
  return engine3_running_;
}
inline bool XplaneDatarefs::engine3_running() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.engine3_running)
  return _internal_engine3_running();
}
inline void XplaneDatarefs::_internal_set_engine3_running(bool value) {
  _has_bits_[1] |= 0x00000100u;
  engine3_running_ = value;
}
inline void XplaneDatarefs::set_engine3_running(bool value) {
  _internal_set_engine3_running(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.engine3_running)
}

// bool engine4_running = 42;
inline bool XplaneDatarefs::_internal_has_engine4_running() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_engine4_running() const {
  return _internal_has_engine4_running();
}
inline void XplaneDatarefs::clear_engine4_running() {
  engine4_running_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool XplaneDatarefs::_internal_engine4_running() const {
  return engine4_running_;
}
inline bool XplaneDatarefs::engine4_running() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.engine4_running)
  return _internal_engine4_running();
}
inline void XplaneDatarefs::_internal_set_engine4_running(bool value) {
  _has_bits_[1] |= 0x00000200u;
  engine4_running_ = value;
}
inline void XplaneDatarefs::set_engine4_running(bool value) {
  _internal_set_engine4_running(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.engine4_running)
}

// bool on_ground = 43;
inline bool XplaneDatarefs::_internal_has_on_ground() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_on_ground() const {
  return _internal_has_on_ground();
}
inline void XplaneDatarefs::clear_on_ground() {
  on_ground_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool XplaneDatarefs::_internal_on_ground() const {
  return on_ground_;
}
inline bool XplaneDatarefs::on_ground() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.on_ground)
  return _internal_on_ground();
}
inline void XplaneDatarefs::_internal_set_on_ground(bool value) {
  _has_bits_[1] |= 0x00000400u;
  on_ground_ = value;
}
inline void XplaneDatarefs::set_on_ground(bool value) {
  _internal_set_on_ground(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.on_ground)
}

// bool replay_mode = 44;
inline bool XplaneDatarefs::_internal_has_replay_mode() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool XplaneDatarefs::has_replay_mode() const {
  return _internal_has_replay_mode();
}
inline void XplaneDatarefs::clear_replay_mode() {
  replay_mode_ = false;
  _has_bits_[1] &= ~0x00000800u;
}
inline bool XplaneDatarefs::_internal_replay_mode() const {
  return replay_mode_;
}
inline bool XplaneDatarefs::replay_mode() const {
  // @@protoc_insertion_point(field_get:xpilot.XplaneDatarefs.replay_mode)
  return _internal_replay_mode();
}
inline void XplaneDatarefs::_internal_set_replay_mode(bool value) {
  _has_bits_[1] |= 0x00000800u;
  replay_mode_ = value;
}
inline void XplaneDatarefs::set_replay_mode(bool value) {
  _internal_set_replay_mode(value);
  // @@protoc_insertion_point(field_set:xpilot.XplaneDatarefs.replay_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_XplaneDatarefs_2eproto
