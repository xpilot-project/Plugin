// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ClientEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ClientEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ClientEvent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ClientEvent_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ClientEvent_2eproto_metadata_getter(int index);
namespace xpilot {
class ClientEvent;
struct ClientEventDefaultTypeInternal;
extern ClientEventDefaultTypeInternal _ClientEvent_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::ClientEvent* Arena::CreateMaybeMessage<::xpilot::ClientEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

enum ClientEvent_EventType : int {
  ClientEvent_EventType_UNKNOWN = 0,
  ClientEvent_EventType_PLANE_ADDED_TO_SIM = 1,
  ClientEvent_EventType_ClientEvent_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientEvent_EventType_ClientEvent_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientEvent_EventType_IsValid(int value);
constexpr ClientEvent_EventType ClientEvent_EventType_EventType_MIN = ClientEvent_EventType_UNKNOWN;
constexpr ClientEvent_EventType ClientEvent_EventType_EventType_MAX = ClientEvent_EventType_PLANE_ADDED_TO_SIM;
constexpr int ClientEvent_EventType_EventType_ARRAYSIZE = ClientEvent_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientEvent_EventType_descriptor();
template<typename T>
inline const std::string& ClientEvent_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientEvent_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientEvent_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientEvent_EventType_descriptor(), enum_t_value);
}
inline bool ClientEvent_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientEvent_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientEvent_EventType>(
    ClientEvent_EventType_descriptor(), name, value);
}
// ===================================================================

class ClientEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.ClientEvent) */ {
 public:
  inline ClientEvent() : ClientEvent(nullptr) {}
  virtual ~ClientEvent();
  explicit constexpr ClientEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientEvent(const ClientEvent& from);
  ClientEvent(ClientEvent&& from) noexcept
    : ClientEvent() {
    *this = ::std::move(from);
  }

  inline ClientEvent& operator=(const ClientEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEvent& operator=(ClientEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientEvent* internal_default_instance() {
    return reinterpret_cast<const ClientEvent*>(
               &_ClientEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientEvent& a, ClientEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientEvent* New() const final {
    return CreateMaybeMessage<ClientEvent>(nullptr);
  }

  ClientEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientEvent& from);
  void MergeFrom(const ClientEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.ClientEvent";
  }
  protected:
  explicit ClientEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ClientEvent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientEvent_EventType EventType;
  static constexpr EventType UNKNOWN =
    ClientEvent_EventType_UNKNOWN;
  static constexpr EventType PLANE_ADDED_TO_SIM =
    ClientEvent_EventType_PLANE_ADDED_TO_SIM;
  static inline bool EventType_IsValid(int value) {
    return ClientEvent_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    ClientEvent_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    ClientEvent_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    ClientEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return ClientEvent_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return ClientEvent_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return ClientEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .xpilot.ClientEvent.EventType event = 1;
  void clear_event();
  ::xpilot::ClientEvent_EventType event() const;
  void set_event(::xpilot::ClientEvent_EventType value);
  private:
  ::xpilot::ClientEvent_EventType _internal_event() const;
  void _internal_set_event(::xpilot::ClientEvent_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.ClientEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientEvent

// .xpilot.ClientEvent.EventType event = 1;
inline void ClientEvent::clear_event() {
  event_ = 0;
}
inline ::xpilot::ClientEvent_EventType ClientEvent::_internal_event() const {
  return static_cast< ::xpilot::ClientEvent_EventType >(event_);
}
inline ::xpilot::ClientEvent_EventType ClientEvent::event() const {
  // @@protoc_insertion_point(field_get:xpilot.ClientEvent.event)
  return _internal_event();
}
inline void ClientEvent::_internal_set_event(::xpilot::ClientEvent_EventType value) {
  
  event_ = value;
}
inline void ClientEvent::set_event(::xpilot::ClientEvent_EventType value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:xpilot.ClientEvent.event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xpilot::ClientEvent_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xpilot::ClientEvent_EventType>() {
  return ::xpilot::ClientEvent_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ClientEvent_2eproto
