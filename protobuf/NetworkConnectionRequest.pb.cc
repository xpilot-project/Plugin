// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetworkConnectionRequest.proto

#include "NetworkConnectionRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr NetworkConnectionRequest::NetworkConnectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , selcal_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , observer_mode_(false){}
struct NetworkConnectionRequestDefaultTypeInternal {
  constexpr NetworkConnectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkConnectionRequestDefaultTypeInternal() {}
  union {
    NetworkConnectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkConnectionRequestDefaultTypeInternal _NetworkConnectionRequest_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NetworkConnectionRequest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NetworkConnectionRequest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NetworkConnectionRequest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NetworkConnectionRequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::NetworkConnectionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::NetworkConnectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::NetworkConnectionRequest, callsign_),
  PROTOBUF_FIELD_OFFSET(::xpilot::NetworkConnectionRequest, type_code_),
  PROTOBUF_FIELD_OFFSET(::xpilot::NetworkConnectionRequest, selcal_code_),
  PROTOBUF_FIELD_OFFSET(::xpilot::NetworkConnectionRequest, observer_mode_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::xpilot::NetworkConnectionRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_NetworkConnectionRequest_default_instance_),
};

const char descriptor_table_protodef_NetworkConnectionRequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036NetworkConnectionRequest.proto\022\006xpilot"
  "\"\274\001\n\030NetworkConnectionRequest\022\025\n\010callsig"
  "n\030\001 \001(\tH\000\210\001\001\022\026\n\ttype_code\030\002 \001(\tH\001\210\001\001\022\030\n\013"
  "selcal_code\030\003 \001(\tH\002\210\001\001\022\032\n\robserver_mode\030"
  "\004 \001(\010H\003\210\001\001B\013\n\t_callsignB\014\n\n_type_codeB\016\n"
  "\014_selcal_codeB\020\n\016_observer_modeB\031\252\002\026Vats"
  "im.Xpilot.Protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NetworkConnectionRequest_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetworkConnectionRequest_2eproto = {
  false, false, 266, descriptor_table_protodef_NetworkConnectionRequest_2eproto, "NetworkConnectionRequest.proto", 
  &descriptor_table_NetworkConnectionRequest_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_NetworkConnectionRequest_2eproto::offsets,
  file_level_metadata_NetworkConnectionRequest_2eproto, file_level_enum_descriptors_NetworkConnectionRequest_2eproto, file_level_service_descriptors_NetworkConnectionRequest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_NetworkConnectionRequest_2eproto_getter() {
  return &descriptor_table_NetworkConnectionRequest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_NetworkConnectionRequest_2eproto(&descriptor_table_NetworkConnectionRequest_2eproto);
namespace xpilot {

// ===================================================================

class NetworkConnectionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkConnectionRequest>()._has_bits_);
  static void set_has_callsign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_selcal_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_observer_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NetworkConnectionRequest::NetworkConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.NetworkConnectionRequest)
}
NetworkConnectionRequest::NetworkConnectionRequest(const NetworkConnectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callsign()) {
    callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callsign(), 
      GetArenaForAllocation());
  }
  type_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type_code()) {
    type_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_code(), 
      GetArenaForAllocation());
  }
  selcal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_selcal_code()) {
    selcal_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_selcal_code(), 
      GetArenaForAllocation());
  }
  observer_mode_ = from.observer_mode_;
  // @@protoc_insertion_point(copy_constructor:xpilot.NetworkConnectionRequest)
}

void NetworkConnectionRequest::SharedCtor() {
callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
selcal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
observer_mode_ = false;
}

NetworkConnectionRequest::~NetworkConnectionRequest() {
  // @@protoc_insertion_point(destructor:xpilot.NetworkConnectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkConnectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selcal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkConnectionRequest::ArenaDtor(void* object) {
  NetworkConnectionRequest* _this = reinterpret_cast< NetworkConnectionRequest* >(object);
  (void)_this;
}
void NetworkConnectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkConnectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkConnectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.NetworkConnectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      callsign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      selcal_code_.ClearNonDefaultToEmpty();
    }
  }
  observer_mode_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkConnectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string callsign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.NetworkConnectionRequest.callsign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.NetworkConnectionRequest.type_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string selcal_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_selcal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.NetworkConnectionRequest.selcal_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool observer_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_observer_mode(&has_bits);
          observer_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkConnectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.NetworkConnectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string callsign = 1;
  if (_internal_has_callsign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callsign().data(), static_cast<int>(this->_internal_callsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.NetworkConnectionRequest.callsign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_callsign(), target);
  }

  // optional string type_code = 2;
  if (_internal_has_type_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_code().data(), static_cast<int>(this->_internal_type_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.NetworkConnectionRequest.type_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type_code(), target);
  }

  // optional string selcal_code = 3;
  if (_internal_has_selcal_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selcal_code().data(), static_cast<int>(this->_internal_selcal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.NetworkConnectionRequest.selcal_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_selcal_code(), target);
  }

  // optional bool observer_mode = 4;
  if (_internal_has_observer_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_observer_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.NetworkConnectionRequest)
  return target;
}

size_t NetworkConnectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.NetworkConnectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string callsign = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callsign());
    }

    // optional string type_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type_code());
    }

    // optional string selcal_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_selcal_code());
    }

    // optional bool observer_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkConnectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.NetworkConnectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkConnectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkConnectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.NetworkConnectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.NetworkConnectionRequest)
    MergeFrom(*source);
  }
}

void NetworkConnectionRequest::MergeFrom(const NetworkConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.NetworkConnectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_callsign(from._internal_callsign());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type_code(from._internal_type_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_selcal_code(from._internal_selcal_code());
    }
    if (cached_has_bits & 0x00000008u) {
      observer_mode_ = from.observer_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkConnectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.NetworkConnectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkConnectionRequest::CopyFrom(const NetworkConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.NetworkConnectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConnectionRequest::IsInitialized() const {
  return true;
}

void NetworkConnectionRequest::InternalSwap(NetworkConnectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &callsign_, GetArenaForAllocation(),
      &other->callsign_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_code_, GetArenaForAllocation(),
      &other->type_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &selcal_code_, GetArenaForAllocation(),
      &other->selcal_code_, other->GetArenaForAllocation()
  );
  swap(observer_mode_, other->observer_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConnectionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_NetworkConnectionRequest_2eproto_getter, &descriptor_table_NetworkConnectionRequest_2eproto_once,
      file_level_metadata_NetworkConnectionRequest_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::NetworkConnectionRequest* Arena::CreateMaybeMessage< ::xpilot::NetworkConnectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::NetworkConnectionRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
