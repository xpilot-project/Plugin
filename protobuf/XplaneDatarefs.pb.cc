// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XplaneDatarefs.proto

#include "XplaneDatarefs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr XplaneDatarefs::XplaneDatarefs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_com_selection_(0)
  , com1_freq_(0)
  , com1_stby_freq_(0)
  , com1_volume_(0)
  , com1_power_(false)
  , com1_audio_selection_(false)
  , com2_power_(false)
  , com2_audio_selection_(false)
  , com2_freq_(0)
  , com2_stby_freq_(0)
  , com2_volume_(0)
  , latitude_(0)
  , longitude_(0)
  , altitude_(0)
  , pressure_altitude_(0)
  , ground_speed_(0)
  , pitch_(0)
  , roll_(0)
  , yaw_(0)
  , velocity_latitude_(0)
  , velocity_altitude_(0)
  , velocity_longitude_(0)
  , velocity_pitch_(0)
  , velocity_heading_(0)
  , avionics_power_on_(false)
  , transponder_ident_(false)
  , beacon_lights_on_(false)
  , landing_lights_on_(false)
  , transponder_code_(0)
  , velocity_bank_(0)
  , transponder_mode_(0)
  , nav_lights_on_(false)
  , strobe_lights_on_(false)
  , taxi_lights_on_(false)
  , gear_down_(false)
  , flaps_(0)
  , speed_brakes_(0)
  , engine_count_(0)
  , engine1_running_(false)
  , engine2_running_(false)
  , engine3_running_(false)
  , engine4_running_(false)
  , on_ground_(false)
  , replay_mode_(false){}
struct XplaneDatarefsDefaultTypeInternal {
  constexpr XplaneDatarefsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XplaneDatarefsDefaultTypeInternal() {}
  union {
    XplaneDatarefs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XplaneDatarefsDefaultTypeInternal _XplaneDatarefs_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_XplaneDatarefs_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_XplaneDatarefs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_XplaneDatarefs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_XplaneDatarefs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, audio_com_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com1_power_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com1_freq_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com1_stby_freq_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com1_audio_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com1_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com2_power_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com2_freq_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com2_stby_freq_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com2_audio_selection_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, com2_volume_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, avionics_power_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, latitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, longitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, altitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, pressure_altitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, ground_speed_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, pitch_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, roll_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, yaw_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, velocity_latitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, velocity_altitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, velocity_longitude_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, velocity_pitch_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, velocity_bank_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, transponder_code_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, transponder_mode_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, transponder_ident_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, beacon_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, landing_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, nav_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, strobe_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, taxi_lights_on_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, flaps_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, gear_down_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, speed_brakes_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, engine_count_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, engine1_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, engine2_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, engine3_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, engine4_running_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, on_ground_),
  PROTOBUF_FIELD_OFFSET(::xpilot::XplaneDatarefs, replay_mode_),
  0,
  4,
  1,
  2,
  5,
  3,
  6,
  8,
  9,
  7,
  10,
  24,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  29,
  28,
  30,
  25,
  26,
  27,
  31,
  32,
  33,
  35,
  34,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 49, sizeof(::xpilot::XplaneDatarefs)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_XplaneDatarefs_default_instance_),
};

const char descriptor_table_protodef_XplaneDatarefs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024XplaneDatarefs.proto\022\006xpilot\"\360\017\n\016Xplan"
  "eDatarefs\022 \n\023audio_com_selection\030\001 \001(\005H\000"
  "\210\001\001\022\027\n\ncom1_power\030\002 \001(\010H\001\210\001\001\022\026\n\tcom1_fre"
  "q\030\003 \001(\005H\002\210\001\001\022\033\n\016com1_stby_freq\030\004 \001(\005H\003\210\001"
  "\001\022!\n\024com1_audio_selection\030\005 \001(\010H\004\210\001\001\022\030\n\013"
  "com1_volume\030\006 \001(\002H\005\210\001\001\022\027\n\ncom2_power\030\007 \001"
  "(\010H\006\210\001\001\022\026\n\tcom2_freq\030\010 \001(\005H\007\210\001\001\022\033\n\016com2_"
  "stby_freq\030\t \001(\005H\010\210\001\001\022!\n\024com2_audio_selec"
  "tion\030\n \001(\010H\t\210\001\001\022\030\n\013com2_volume\030\013 \001(\002H\n\210\001"
  "\001\022\036\n\021avionics_power_on\030\014 \001(\010H\013\210\001\001\022\025\n\010lat"
  "itude\030\r \001(\001H\014\210\001\001\022\026\n\tlongitude\030\016 \001(\001H\r\210\001\001"
  "\022\025\n\010altitude\030\017 \001(\001H\016\210\001\001\022\036\n\021pressure_alti"
  "tude\030\020 \001(\001H\017\210\001\001\022\031\n\014ground_speed\030\021 \001(\001H\020\210"
  "\001\001\022\022\n\005pitch\030\022 \001(\001H\021\210\001\001\022\021\n\004roll\030\023 \001(\001H\022\210\001"
  "\001\022\020\n\003yaw\030\024 \001(\001H\023\210\001\001\022\036\n\021velocity_latitude"
  "\030\025 \001(\001H\024\210\001\001\022\036\n\021velocity_altitude\030\026 \001(\001H\025"
  "\210\001\001\022\037\n\022velocity_longitude\030\027 \001(\001H\026\210\001\001\022\033\n\016"
  "velocity_pitch\030\030 \001(\001H\027\210\001\001\022\035\n\020velocity_he"
  "ading\030\031 \001(\001H\030\210\001\001\022\032\n\rvelocity_bank\030\032 \001(\001H"
  "\031\210\001\001\022\035\n\020transponder_code\030\033 \001(\005H\032\210\001\001\022\035\n\020t"
  "ransponder_mode\030\034 \001(\005H\033\210\001\001\022\036\n\021transponde"
  "r_ident\030\035 \001(\010H\034\210\001\001\022\035\n\020beacon_lights_on\030\036"
  " \001(\010H\035\210\001\001\022\036\n\021landing_lights_on\030\037 \001(\010H\036\210\001"
  "\001\022\032\n\rnav_lights_on\030  \001(\010H\037\210\001\001\022\035\n\020strobe_"
  "lights_on\030! \001(\010H \210\001\001\022\033\n\016taxi_lights_on\030\""
  " \001(\010H!\210\001\001\022\022\n\005flaps\030# \001(\001H\"\210\001\001\022\026\n\tgear_do"
  "wn\030$ \001(\010H#\210\001\001\022\031\n\014speed_brakes\030% \001(\001H$\210\001\001"
  "\022\031\n\014engine_count\030& \001(\005H%\210\001\001\022\034\n\017engine1_r"
  "unning\030\' \001(\010H&\210\001\001\022\034\n\017engine2_running\030( \001"
  "(\010H\'\210\001\001\022\034\n\017engine3_running\030) \001(\010H(\210\001\001\022\034\n"
  "\017engine4_running\030* \001(\010H)\210\001\001\022\026\n\ton_ground"
  "\030+ \001(\010H*\210\001\001\022\030\n\013replay_mode\030, \001(\010H+\210\001\001B\026\n"
  "\024_audio_com_selectionB\r\n\013_com1_powerB\014\n\n"
  "_com1_freqB\021\n\017_com1_stby_freqB\027\n\025_com1_a"
  "udio_selectionB\016\n\014_com1_volumeB\r\n\013_com2_"
  "powerB\014\n\n_com2_freqB\021\n\017_com2_stby_freqB\027"
  "\n\025_com2_audio_selectionB\016\n\014_com2_volumeB"
  "\024\n\022_avionics_power_onB\013\n\t_latitudeB\014\n\n_l"
  "ongitudeB\013\n\t_altitudeB\024\n\022_pressure_altit"
  "udeB\017\n\r_ground_speedB\010\n\006_pitchB\007\n\005_rollB"
  "\006\n\004_yawB\024\n\022_velocity_latitudeB\024\n\022_veloci"
  "ty_altitudeB\025\n\023_velocity_longitudeB\021\n\017_v"
  "elocity_pitchB\023\n\021_velocity_headingB\020\n\016_v"
  "elocity_bankB\023\n\021_transponder_codeB\023\n\021_tr"
  "ansponder_modeB\024\n\022_transponder_identB\023\n\021"
  "_beacon_lights_onB\024\n\022_landing_lights_onB"
  "\020\n\016_nav_lights_onB\023\n\021_strobe_lights_onB\021"
  "\n\017_taxi_lights_onB\010\n\006_flapsB\014\n\n_gear_dow"
  "nB\017\n\r_speed_brakesB\017\n\r_engine_countB\022\n\020_"
  "engine1_runningB\022\n\020_engine2_runningB\022\n\020_"
  "engine3_runningB\022\n\020_engine4_runningB\014\n\n_"
  "on_groundB\016\n\014_replay_modeB\031\252\002\026Vatsim.Xpi"
  "lot.Protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_XplaneDatarefs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XplaneDatarefs_2eproto = {
  false, false, 2100, descriptor_table_protodef_XplaneDatarefs_2eproto, "XplaneDatarefs.proto", 
  &descriptor_table_XplaneDatarefs_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_XplaneDatarefs_2eproto::offsets,
  file_level_metadata_XplaneDatarefs_2eproto, file_level_enum_descriptors_XplaneDatarefs_2eproto, file_level_service_descriptors_XplaneDatarefs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_XplaneDatarefs_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_XplaneDatarefs_2eproto);
  return descriptor_table_XplaneDatarefs_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_XplaneDatarefs_2eproto(&descriptor_table_XplaneDatarefs_2eproto);
namespace xpilot {

// ===================================================================

class XplaneDatarefs::_Internal {
 public:
  using HasBits = decltype(std::declval<XplaneDatarefs>()._has_bits_);
  static void set_has_audio_com_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_com1_power(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_com1_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_com1_stby_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_com1_audio_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_com1_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_com2_power(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_com2_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_com2_stby_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_com2_audio_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_com2_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_avionics_power_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pressure_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ground_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_velocity_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_velocity_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_velocity_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_velocity_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_velocity_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_velocity_bank(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_transponder_code(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_transponder_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_transponder_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_beacon_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_landing_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_nav_lights_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_strobe_lights_on(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_taxi_lights_on(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_flaps(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_gear_down(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_speed_brakes(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_engine_count(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_engine1_running(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_engine2_running(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_engine3_running(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_engine4_running(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_on_ground(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_replay_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
};

XplaneDatarefs::XplaneDatarefs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.XplaneDatarefs)
}
XplaneDatarefs::XplaneDatarefs(const XplaneDatarefs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&audio_com_selection_, &from.audio_com_selection_,
    static_cast<size_t>(reinterpret_cast<char*>(&replay_mode_) -
    reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(replay_mode_));
  // @@protoc_insertion_point(copy_constructor:xpilot.XplaneDatarefs)
}

void XplaneDatarefs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_com_selection_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&replay_mode_) -
    reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(replay_mode_));
}

XplaneDatarefs::~XplaneDatarefs() {
  // @@protoc_insertion_point(destructor:xpilot.XplaneDatarefs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XplaneDatarefs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XplaneDatarefs::ArenaDtor(void* object) {
  XplaneDatarefs* _this = reinterpret_cast< XplaneDatarefs* >(object);
  (void)_this;
}
void XplaneDatarefs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XplaneDatarefs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XplaneDatarefs::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.XplaneDatarefs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&audio_com_selection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&com2_audio_selection_) -
        reinterpret_cast<char*>(&audio_com_selection_)) + sizeof(com2_audio_selection_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&com2_freq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ground_speed_) -
        reinterpret_cast<char*>(&com2_freq_)) + sizeof(ground_speed_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&velocity_heading_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(velocity_heading_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&avionics_power_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nav_lights_on_) -
        reinterpret_cast<char*>(&avionics_power_on_)) + sizeof(nav_lights_on_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&strobe_lights_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine2_running_) -
        reinterpret_cast<char*>(&strobe_lights_on_)) + sizeof(engine2_running_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&engine3_running_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replay_mode_) -
        reinterpret_cast<char*>(&engine3_running_)) + sizeof(replay_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XplaneDatarefs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 audio_com_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_audio_com_selection(&_has_bits_);
          audio_com_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com1_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_com1_power(&_has_bits_);
          com1_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 com1_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_com1_freq(&_has_bits_);
          com1_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 com1_stby_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_com1_stby_freq(&_has_bits_);
          com1_stby_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com1_audio_selection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_com1_audio_selection(&_has_bits_);
          com1_audio_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float com1_volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_com1_volume(&_has_bits_);
          com1_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool com2_power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_com2_power(&_has_bits_);
          com2_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 com2_freq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_com2_freq(&_has_bits_);
          com2_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 com2_stby_freq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_com2_stby_freq(&_has_bits_);
          com2_stby_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool com2_audio_selection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_com2_audio_selection(&_has_bits_);
          com2_audio_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float com2_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_com2_volume(&_has_bits_);
          com2_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool avionics_power_on = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_avionics_power_on(&_has_bits_);
          avionics_power_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_latitude(&_has_bits_);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_longitude(&_has_bits_);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_altitude(&_has_bits_);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pressure_altitude = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_pressure_altitude(&_has_bits_);
          pressure_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ground_speed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_ground_speed(&_has_bits_);
          ground_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_pitch(&_has_bits_);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double roll = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_roll(&_has_bits_);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yaw = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_yaw(&_has_bits_);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_latitude = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_velocity_latitude(&_has_bits_);
          velocity_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_altitude = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_velocity_altitude(&_has_bits_);
          velocity_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_longitude = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_velocity_longitude(&_has_bits_);
          velocity_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_pitch = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_velocity_pitch(&_has_bits_);
          velocity_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_heading = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_velocity_heading(&_has_bits_);
          velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double velocity_bank = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_velocity_bank(&_has_bits_);
          velocity_bank_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 transponder_code = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_transponder_code(&_has_bits_);
          transponder_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transponder_mode = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_transponder_mode(&_has_bits_);
          transponder_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transponder_ident = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_transponder_ident(&_has_bits_);
          transponder_ident_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool beacon_lights_on = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_beacon_lights_on(&_has_bits_);
          beacon_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool landing_lights_on = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_landing_lights_on(&_has_bits_);
          landing_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nav_lights_on = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_nav_lights_on(&_has_bits_);
          nav_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strobe_lights_on = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_strobe_lights_on(&_has_bits_);
          strobe_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool taxi_lights_on = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_taxi_lights_on(&_has_bits_);
          taxi_lights_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double flaps = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_flaps(&_has_bits_);
          flaps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool gear_down = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gear_down(&_has_bits_);
          gear_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double speed_brakes = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_speed_brakes(&_has_bits_);
          speed_brakes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 engine_count = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_engine_count(&_has_bits_);
          engine_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine1_running = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_engine1_running(&_has_bits_);
          engine1_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine2_running = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_engine2_running(&_has_bits_);
          engine2_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine3_running = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_engine3_running(&_has_bits_);
          engine3_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool engine4_running = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_engine4_running(&_has_bits_);
          engine4_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool on_ground = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_on_ground(&_has_bits_);
          on_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool replay_mode = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_replay_mode(&_has_bits_);
          replay_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XplaneDatarefs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.XplaneDatarefs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 audio_com_selection = 1;
  if (_internal_has_audio_com_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_audio_com_selection(), target);
  }

  // bool com1_power = 2;
  if (_internal_has_com1_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_com1_power(), target);
  }

  // int32 com1_freq = 3;
  if (_internal_has_com1_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_com1_freq(), target);
  }

  // int32 com1_stby_freq = 4;
  if (_internal_has_com1_stby_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_com1_stby_freq(), target);
  }

  // bool com1_audio_selection = 5;
  if (_internal_has_com1_audio_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_com1_audio_selection(), target);
  }

  // float com1_volume = 6;
  if (_internal_has_com1_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_com1_volume(), target);
  }

  // bool com2_power = 7;
  if (_internal_has_com2_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_com2_power(), target);
  }

  // int32 com2_freq = 8;
  if (_internal_has_com2_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_com2_freq(), target);
  }

  // int32 com2_stby_freq = 9;
  if (_internal_has_com2_stby_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_com2_stby_freq(), target);
  }

  // bool com2_audio_selection = 10;
  if (_internal_has_com2_audio_selection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_com2_audio_selection(), target);
  }

  // float com2_volume = 11;
  if (_internal_has_com2_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_com2_volume(), target);
  }

  // bool avionics_power_on = 12;
  if (_internal_has_avionics_power_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_avionics_power_on(), target);
  }

  // double latitude = 13;
  if (_internal_has_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_latitude(), target);
  }

  // double longitude = 14;
  if (_internal_has_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_longitude(), target);
  }

  // double altitude = 15;
  if (_internal_has_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_altitude(), target);
  }

  // double pressure_altitude = 16;
  if (_internal_has_pressure_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_pressure_altitude(), target);
  }

  // double ground_speed = 17;
  if (_internal_has_ground_speed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_ground_speed(), target);
  }

  // double pitch = 18;
  if (_internal_has_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_pitch(), target);
  }

  // double roll = 19;
  if (_internal_has_roll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_roll(), target);
  }

  // double yaw = 20;
  if (_internal_has_yaw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_yaw(), target);
  }

  // double velocity_latitude = 21;
  if (_internal_has_velocity_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_velocity_latitude(), target);
  }

  // double velocity_altitude = 22;
  if (_internal_has_velocity_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_velocity_altitude(), target);
  }

  // double velocity_longitude = 23;
  if (_internal_has_velocity_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_velocity_longitude(), target);
  }

  // double velocity_pitch = 24;
  if (_internal_has_velocity_pitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_velocity_pitch(), target);
  }

  // double velocity_heading = 25;
  if (_internal_has_velocity_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_velocity_heading(), target);
  }

  // double velocity_bank = 26;
  if (_internal_has_velocity_bank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_velocity_bank(), target);
  }

  // int32 transponder_code = 27;
  if (_internal_has_transponder_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_transponder_code(), target);
  }

  // int32 transponder_mode = 28;
  if (_internal_has_transponder_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_transponder_mode(), target);
  }

  // bool transponder_ident = 29;
  if (_internal_has_transponder_ident()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_transponder_ident(), target);
  }

  // bool beacon_lights_on = 30;
  if (_internal_has_beacon_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_beacon_lights_on(), target);
  }

  // bool landing_lights_on = 31;
  if (_internal_has_landing_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_landing_lights_on(), target);
  }

  // bool nav_lights_on = 32;
  if (_internal_has_nav_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_nav_lights_on(), target);
  }

  // bool strobe_lights_on = 33;
  if (_internal_has_strobe_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_strobe_lights_on(), target);
  }

  // bool taxi_lights_on = 34;
  if (_internal_has_taxi_lights_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_taxi_lights_on(), target);
  }

  // double flaps = 35;
  if (_internal_has_flaps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_flaps(), target);
  }

  // bool gear_down = 36;
  if (_internal_has_gear_down()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_gear_down(), target);
  }

  // double speed_brakes = 37;
  if (_internal_has_speed_brakes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_speed_brakes(), target);
  }

  // int32 engine_count = 38;
  if (_internal_has_engine_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_engine_count(), target);
  }

  // bool engine1_running = 39;
  if (_internal_has_engine1_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_engine1_running(), target);
  }

  // bool engine2_running = 40;
  if (_internal_has_engine2_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_engine2_running(), target);
  }

  // bool engine3_running = 41;
  if (_internal_has_engine3_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_engine3_running(), target);
  }

  // bool engine4_running = 42;
  if (_internal_has_engine4_running()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_engine4_running(), target);
  }

  // bool on_ground = 43;
  if (_internal_has_on_ground()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_on_ground(), target);
  }

  // bool replay_mode = 44;
  if (_internal_has_replay_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_replay_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.XplaneDatarefs)
  return target;
}

size_t XplaneDatarefs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.XplaneDatarefs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // int32 audio_com_selection = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_audio_com_selection());
    }

    // int32 com1_freq = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com1_freq());
    }

    // int32 com1_stby_freq = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com1_stby_freq());
    }

    // float com1_volume = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // bool com1_power = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // bool com1_audio_selection = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // bool com2_power = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // bool com2_audio_selection = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // int32 com2_freq = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com2_freq());
    }

    // int32 com2_stby_freq = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_com2_stby_freq());
    }

    // float com2_volume = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // double latitude = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // double longitude = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // double altitude = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // double pressure_altitude = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // double ground_speed = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // double pitch = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // double roll = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // double yaw = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // double velocity_latitude = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // double velocity_altitude = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // double velocity_longitude = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // double velocity_pitch = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // double velocity_heading = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // bool avionics_power_on = 12;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // bool transponder_ident = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // bool beacon_lights_on = 30;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // bool landing_lights_on = 31;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // int32 transponder_code = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transponder_code());
    }

    // double velocity_bank = 26;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // int32 transponder_mode = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transponder_mode());
    }

    // bool nav_lights_on = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // bool strobe_lights_on = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // bool taxi_lights_on = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // bool gear_down = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // double flaps = 35;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // double speed_brakes = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // int32 engine_count = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_engine_count());
    }

    // bool engine1_running = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // bool engine2_running = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // bool engine3_running = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // bool engine4_running = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // bool on_ground = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // bool replay_mode = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XplaneDatarefs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.XplaneDatarefs)
  GOOGLE_DCHECK_NE(&from, this);
  const XplaneDatarefs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XplaneDatarefs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.XplaneDatarefs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.XplaneDatarefs)
    MergeFrom(*source);
  }
}

void XplaneDatarefs::MergeFrom(const XplaneDatarefs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.XplaneDatarefs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      audio_com_selection_ = from.audio_com_selection_;
    }
    if (cached_has_bits & 0x00000002u) {
      com1_freq_ = from.com1_freq_;
    }
    if (cached_has_bits & 0x00000004u) {
      com1_stby_freq_ = from.com1_stby_freq_;
    }
    if (cached_has_bits & 0x00000008u) {
      com1_volume_ = from.com1_volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      com1_power_ = from.com1_power_;
    }
    if (cached_has_bits & 0x00000020u) {
      com1_audio_selection_ = from.com1_audio_selection_;
    }
    if (cached_has_bits & 0x00000040u) {
      com2_power_ = from.com2_power_;
    }
    if (cached_has_bits & 0x00000080u) {
      com2_audio_selection_ = from.com2_audio_selection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      com2_freq_ = from.com2_freq_;
    }
    if (cached_has_bits & 0x00000200u) {
      com2_stby_freq_ = from.com2_stby_freq_;
    }
    if (cached_has_bits & 0x00000400u) {
      com2_volume_ = from.com2_volume_;
    }
    if (cached_has_bits & 0x00000800u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00001000u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00002000u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00004000u) {
      pressure_altitude_ = from.pressure_altitude_;
    }
    if (cached_has_bits & 0x00008000u) {
      ground_speed_ = from.ground_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00020000u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00040000u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00080000u) {
      velocity_latitude_ = from.velocity_latitude_;
    }
    if (cached_has_bits & 0x00100000u) {
      velocity_altitude_ = from.velocity_altitude_;
    }
    if (cached_has_bits & 0x00200000u) {
      velocity_longitude_ = from.velocity_longitude_;
    }
    if (cached_has_bits & 0x00400000u) {
      velocity_pitch_ = from.velocity_pitch_;
    }
    if (cached_has_bits & 0x00800000u) {
      velocity_heading_ = from.velocity_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      avionics_power_on_ = from.avionics_power_on_;
    }
    if (cached_has_bits & 0x02000000u) {
      transponder_ident_ = from.transponder_ident_;
    }
    if (cached_has_bits & 0x04000000u) {
      beacon_lights_on_ = from.beacon_lights_on_;
    }
    if (cached_has_bits & 0x08000000u) {
      landing_lights_on_ = from.landing_lights_on_;
    }
    if (cached_has_bits & 0x10000000u) {
      transponder_code_ = from.transponder_code_;
    }
    if (cached_has_bits & 0x20000000u) {
      velocity_bank_ = from.velocity_bank_;
    }
    if (cached_has_bits & 0x40000000u) {
      transponder_mode_ = from.transponder_mode_;
    }
    if (cached_has_bits & 0x80000000u) {
      nav_lights_on_ = from.nav_lights_on_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      strobe_lights_on_ = from.strobe_lights_on_;
    }
    if (cached_has_bits & 0x00000002u) {
      taxi_lights_on_ = from.taxi_lights_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_down_ = from.gear_down_;
    }
    if (cached_has_bits & 0x00000008u) {
      flaps_ = from.flaps_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_brakes_ = from.speed_brakes_;
    }
    if (cached_has_bits & 0x00000020u) {
      engine_count_ = from.engine_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      engine1_running_ = from.engine1_running_;
    }
    if (cached_has_bits & 0x00000080u) {
      engine2_running_ = from.engine2_running_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      engine3_running_ = from.engine3_running_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine4_running_ = from.engine4_running_;
    }
    if (cached_has_bits & 0x00000400u) {
      on_ground_ = from.on_ground_;
    }
    if (cached_has_bits & 0x00000800u) {
      replay_mode_ = from.replay_mode_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void XplaneDatarefs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.XplaneDatarefs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XplaneDatarefs::CopyFrom(const XplaneDatarefs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.XplaneDatarefs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XplaneDatarefs::IsInitialized() const {
  return true;
}

void XplaneDatarefs::InternalSwap(XplaneDatarefs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XplaneDatarefs, replay_mode_)
      + sizeof(XplaneDatarefs::replay_mode_)
      - PROTOBUF_FIELD_OFFSET(XplaneDatarefs, audio_com_selection_)>(
          reinterpret_cast<char*>(&audio_com_selection_),
          reinterpret_cast<char*>(&other->audio_com_selection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XplaneDatarefs::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::XplaneDatarefs* Arena::CreateMaybeMessage< ::xpilot::XplaneDatarefs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::XplaneDatarefs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
