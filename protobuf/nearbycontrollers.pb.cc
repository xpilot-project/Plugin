// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NearbyControllers.proto

#include "NearbyControllers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace xpilot {
constexpr NearbyControllers_Controller::NearbyControllers_Controller(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callsign_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , frequency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xplane_frequency_(0){}
struct NearbyControllers_ControllerDefaultTypeInternal {
  constexpr NearbyControllers_ControllerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NearbyControllers_ControllerDefaultTypeInternal() {}
  union {
    NearbyControllers_Controller _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NearbyControllers_ControllerDefaultTypeInternal _NearbyControllers_Controller_default_instance_;
constexpr NearbyControllers::NearbyControllers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct NearbyControllersDefaultTypeInternal {
  constexpr NearbyControllersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NearbyControllersDefaultTypeInternal() {}
  union {
    NearbyControllers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NearbyControllersDefaultTypeInternal _NearbyControllers_default_instance_;
}  // namespace xpilot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NearbyControllers_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NearbyControllers_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NearbyControllers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NearbyControllers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::xpilot::NearbyControllers_Controller, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::xpilot::NearbyControllers_Controller, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::NearbyControllers_Controller, callsign_),
  PROTOBUF_FIELD_OFFSET(::xpilot::NearbyControllers_Controller, xplane_frequency_),
  PROTOBUF_FIELD_OFFSET(::xpilot::NearbyControllers_Controller, frequency_),
  PROTOBUF_FIELD_OFFSET(::xpilot::NearbyControllers_Controller, real_name_),
  0,
  3,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xpilot::NearbyControllers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xpilot::NearbyControllers, list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::xpilot::NearbyControllers_Controller)},
  { 13, -1, sizeof(::xpilot::NearbyControllers)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_NearbyControllers_Controller_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xpilot::_NearbyControllers_default_instance_),
};

const char descriptor_table_protodef_NearbyControllers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027NearbyControllers.proto\022\006xpilot\"\372\001\n\021Ne"
  "arbyControllers\0222\n\004list\030\001 \003(\0132$.xpilot.N"
  "earbyControllers.Controller\032\260\001\n\nControll"
  "er\022\025\n\010callsign\030\001 \001(\tH\000\210\001\001\022\035\n\020xplane_freq"
  "uency\030\002 \001(\005H\001\210\001\001\022\026\n\tfrequency\030\003 \001(\tH\002\210\001\001"
  "\022\026\n\treal_name\030\004 \001(\tH\003\210\001\001B\013\n\t_callsignB\023\n"
  "\021_xplane_frequencyB\014\n\n_frequencyB\014\n\n_rea"
  "l_nameB\031\252\002\026Vatsim.Xpilot.Protobufb\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NearbyControllers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NearbyControllers_2eproto = {
  false, false, 321, descriptor_table_protodef_NearbyControllers_2eproto, "NearbyControllers.proto", 
  &descriptor_table_NearbyControllers_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_NearbyControllers_2eproto::offsets,
  file_level_metadata_NearbyControllers_2eproto, file_level_enum_descriptors_NearbyControllers_2eproto, file_level_service_descriptors_NearbyControllers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_NearbyControllers_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NearbyControllers_2eproto);
  return descriptor_table_NearbyControllers_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_NearbyControllers_2eproto(&descriptor_table_NearbyControllers_2eproto);
namespace xpilot {

// ===================================================================

class NearbyControllers_Controller::_Internal {
 public:
  using HasBits = decltype(std::declval<NearbyControllers_Controller>()._has_bits_);
  static void set_has_callsign(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xplane_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NearbyControllers_Controller::NearbyControllers_Controller(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.NearbyControllers.Controller)
}
NearbyControllers_Controller::NearbyControllers_Controller(const NearbyControllers_Controller& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callsign()) {
    callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_callsign(), 
      GetArena());
  }
  frequency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_frequency()) {
    frequency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frequency(), 
      GetArena());
  }
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_real_name()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArena());
  }
  xplane_frequency_ = from.xplane_frequency_;
  // @@protoc_insertion_point(copy_constructor:xpilot.NearbyControllers.Controller)
}

void NearbyControllers_Controller::SharedCtor() {
callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
frequency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xplane_frequency_ = 0;
}

NearbyControllers_Controller::~NearbyControllers_Controller() {
  // @@protoc_insertion_point(destructor:xpilot.NearbyControllers.Controller)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NearbyControllers_Controller::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frequency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NearbyControllers_Controller::ArenaDtor(void* object) {
  NearbyControllers_Controller* _this = reinterpret_cast< NearbyControllers_Controller* >(object);
  (void)_this;
}
void NearbyControllers_Controller::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NearbyControllers_Controller::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NearbyControllers_Controller::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.NearbyControllers.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      callsign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      frequency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      real_name_.ClearNonDefaultToEmpty();
    }
  }
  xplane_frequency_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NearbyControllers_Controller::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string callsign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.NearbyControllers.Controller.callsign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xplane_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_xplane_frequency(&has_bits);
          xplane_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_frequency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.NearbyControllers.Controller.frequency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string real_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xpilot.NearbyControllers.Controller.real_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NearbyControllers_Controller::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.NearbyControllers.Controller)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string callsign = 1;
  if (_internal_has_callsign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_callsign().data(), static_cast<int>(this->_internal_callsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.NearbyControllers.Controller.callsign");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_callsign(), target);
  }

  // int32 xplane_frequency = 2;
  if (_internal_has_xplane_frequency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xplane_frequency(), target);
  }

  // string frequency = 3;
  if (_internal_has_frequency()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frequency().data(), static_cast<int>(this->_internal_frequency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.NearbyControllers.Controller.frequency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frequency(), target);
  }

  // string real_name = 4;
  if (_internal_has_real_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xpilot.NearbyControllers.Controller.real_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_real_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.NearbyControllers.Controller)
  return target;
}

size_t NearbyControllers_Controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.NearbyControllers.Controller)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string callsign = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callsign());
    }

    // string frequency = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frequency());
    }

    // string real_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // int32 xplane_frequency = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_xplane_frequency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearbyControllers_Controller::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.NearbyControllers.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  const NearbyControllers_Controller* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearbyControllers_Controller>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.NearbyControllers.Controller)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.NearbyControllers.Controller)
    MergeFrom(*source);
  }
}

void NearbyControllers_Controller::MergeFrom(const NearbyControllers_Controller& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.NearbyControllers.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_callsign(from._internal_callsign());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_frequency(from._internal_frequency());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000008u) {
      xplane_frequency_ = from.xplane_frequency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NearbyControllers_Controller::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.NearbyControllers.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearbyControllers_Controller::CopyFrom(const NearbyControllers_Controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.NearbyControllers.Controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearbyControllers_Controller::IsInitialized() const {
  return true;
}

void NearbyControllers_Controller::InternalSwap(NearbyControllers_Controller* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  callsign_.Swap(&other->callsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frequency_.Swap(&other->frequency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  real_name_.Swap(&other->real_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xplane_frequency_, other->xplane_frequency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearbyControllers_Controller::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NearbyControllers::_Internal {
 public:
};

NearbyControllers::NearbyControllers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:xpilot.NearbyControllers)
}
NearbyControllers::NearbyControllers(const NearbyControllers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xpilot.NearbyControllers)
}

void NearbyControllers::SharedCtor() {
}

NearbyControllers::~NearbyControllers() {
  // @@protoc_insertion_point(destructor:xpilot.NearbyControllers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NearbyControllers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NearbyControllers::ArenaDtor(void* object) {
  NearbyControllers* _this = reinterpret_cast< NearbyControllers* >(object);
  (void)_this;
}
void NearbyControllers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NearbyControllers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NearbyControllers::Clear() {
// @@protoc_insertion_point(message_clear_start:xpilot.NearbyControllers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NearbyControllers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .xpilot.NearbyControllers.Controller list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NearbyControllers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xpilot.NearbyControllers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xpilot.NearbyControllers.Controller list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xpilot.NearbyControllers)
  return target;
}

size_t NearbyControllers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xpilot.NearbyControllers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xpilot.NearbyControllers.Controller list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearbyControllers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xpilot.NearbyControllers)
  GOOGLE_DCHECK_NE(&from, this);
  const NearbyControllers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearbyControllers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xpilot.NearbyControllers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xpilot.NearbyControllers)
    MergeFrom(*source);
  }
}

void NearbyControllers::MergeFrom(const NearbyControllers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xpilot.NearbyControllers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void NearbyControllers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xpilot.NearbyControllers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearbyControllers::CopyFrom(const NearbyControllers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xpilot.NearbyControllers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearbyControllers::IsInitialized() const {
  return true;
}

void NearbyControllers::InternalSwap(NearbyControllers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearbyControllers::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xpilot::NearbyControllers_Controller* Arena::CreateMaybeMessage< ::xpilot::NearbyControllers_Controller >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::NearbyControllers_Controller >(arena);
}
template<> PROTOBUF_NOINLINE ::xpilot::NearbyControllers* Arena::CreateMaybeMessage< ::xpilot::NearbyControllers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::xpilot::NearbyControllers >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
