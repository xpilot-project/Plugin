// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetworkConnectionRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NetworkConnectionRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NetworkConnectionRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NetworkConnectionRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NetworkConnectionRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetworkConnectionRequest_2eproto;
namespace xpilot {
class NetworkConnectionRequest;
struct NetworkConnectionRequestDefaultTypeInternal;
extern NetworkConnectionRequestDefaultTypeInternal _NetworkConnectionRequest_default_instance_;
}  // namespace xpilot
PROTOBUF_NAMESPACE_OPEN
template<> ::xpilot::NetworkConnectionRequest* Arena::CreateMaybeMessage<::xpilot::NetworkConnectionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xpilot {

// ===================================================================

class NetworkConnectionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xpilot.NetworkConnectionRequest) */ {
 public:
  inline NetworkConnectionRequest() : NetworkConnectionRequest(nullptr) {}
  ~NetworkConnectionRequest() override;
  explicit constexpr NetworkConnectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkConnectionRequest(const NetworkConnectionRequest& from);
  NetworkConnectionRequest(NetworkConnectionRequest&& from) noexcept
    : NetworkConnectionRequest() {
    *this = ::std::move(from);
  }

  inline NetworkConnectionRequest& operator=(const NetworkConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkConnectionRequest& operator=(NetworkConnectionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkConnectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkConnectionRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkConnectionRequest*>(
               &_NetworkConnectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkConnectionRequest& a, NetworkConnectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkConnectionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkConnectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkConnectionRequest* New() const final {
    return new NetworkConnectionRequest();
  }

  NetworkConnectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkConnectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkConnectionRequest& from);
  void MergeFrom(const NetworkConnectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkConnectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xpilot.NetworkConnectionRequest";
  }
  protected:
  explicit NetworkConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallsignFieldNumber = 1,
    kTypeCodeFieldNumber = 2,
    kSelcalCodeFieldNumber = 3,
    kObserverModeFieldNumber = 4,
  };
  // optional string callsign = 1;
  bool has_callsign() const;
  private:
  bool _internal_has_callsign() const;
  public:
  void clear_callsign();
  const std::string& callsign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_callsign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_callsign();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // optional string type_code = 2;
  bool has_type_code() const;
  private:
  bool _internal_has_type_code() const;
  public:
  void clear_type_code();
  const std::string& type_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_type_code();
  void set_allocated_type_code(std::string* type_code);
  private:
  const std::string& _internal_type_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_code(const std::string& value);
  std::string* _internal_mutable_type_code();
  public:

  // optional string selcal_code = 3;
  bool has_selcal_code() const;
  private:
  bool _internal_has_selcal_code() const;
  public:
  void clear_selcal_code();
  const std::string& selcal_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selcal_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selcal_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_selcal_code();
  void set_allocated_selcal_code(std::string* selcal_code);
  private:
  const std::string& _internal_selcal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selcal_code(const std::string& value);
  std::string* _internal_mutable_selcal_code();
  public:

  // optional bool observer_mode = 4;
  bool has_observer_mode() const;
  private:
  bool _internal_has_observer_mode() const;
  public:
  void clear_observer_mode();
  bool observer_mode() const;
  void set_observer_mode(bool value);
  private:
  bool _internal_observer_mode() const;
  void _internal_set_observer_mode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xpilot.NetworkConnectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selcal_code_;
  bool observer_mode_;
  friend struct ::TableStruct_NetworkConnectionRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkConnectionRequest

// optional string callsign = 1;
inline bool NetworkConnectionRequest::_internal_has_callsign() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkConnectionRequest::has_callsign() const {
  return _internal_has_callsign();
}
inline void NetworkConnectionRequest::clear_callsign() {
  callsign_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkConnectionRequest::callsign() const {
  // @@protoc_insertion_point(field_get:xpilot.NetworkConnectionRequest.callsign)
  return _internal_callsign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkConnectionRequest::set_callsign(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.NetworkConnectionRequest.callsign)
}
inline std::string* NetworkConnectionRequest::mutable_callsign() {
  // @@protoc_insertion_point(field_mutable:xpilot.NetworkConnectionRequest.callsign)
  return _internal_mutable_callsign();
}
inline const std::string& NetworkConnectionRequest::_internal_callsign() const {
  return callsign_.Get();
}
inline void NetworkConnectionRequest::_internal_set_callsign(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  callsign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetworkConnectionRequest::_internal_mutable_callsign() {
  _has_bits_[0] |= 0x00000001u;
  return callsign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetworkConnectionRequest::release_callsign() {
  // @@protoc_insertion_point(field_release:xpilot.NetworkConnectionRequest.callsign)
  if (!_internal_has_callsign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return callsign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetworkConnectionRequest::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.NetworkConnectionRequest.callsign)
}

// optional string type_code = 2;
inline bool NetworkConnectionRequest::_internal_has_type_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkConnectionRequest::has_type_code() const {
  return _internal_has_type_code();
}
inline void NetworkConnectionRequest::clear_type_code() {
  type_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkConnectionRequest::type_code() const {
  // @@protoc_insertion_point(field_get:xpilot.NetworkConnectionRequest.type_code)
  return _internal_type_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkConnectionRequest::set_type_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 type_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.NetworkConnectionRequest.type_code)
}
inline std::string* NetworkConnectionRequest::mutable_type_code() {
  // @@protoc_insertion_point(field_mutable:xpilot.NetworkConnectionRequest.type_code)
  return _internal_mutable_type_code();
}
inline const std::string& NetworkConnectionRequest::_internal_type_code() const {
  return type_code_.Get();
}
inline void NetworkConnectionRequest::_internal_set_type_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetworkConnectionRequest::_internal_mutable_type_code() {
  _has_bits_[0] |= 0x00000002u;
  return type_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetworkConnectionRequest::release_type_code() {
  // @@protoc_insertion_point(field_release:xpilot.NetworkConnectionRequest.type_code)
  if (!_internal_has_type_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetworkConnectionRequest::set_allocated_type_code(std::string* type_code) {
  if (type_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.NetworkConnectionRequest.type_code)
}

// optional string selcal_code = 3;
inline bool NetworkConnectionRequest::_internal_has_selcal_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkConnectionRequest::has_selcal_code() const {
  return _internal_has_selcal_code();
}
inline void NetworkConnectionRequest::clear_selcal_code() {
  selcal_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetworkConnectionRequest::selcal_code() const {
  // @@protoc_insertion_point(field_get:xpilot.NetworkConnectionRequest.selcal_code)
  return _internal_selcal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkConnectionRequest::set_selcal_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 selcal_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xpilot.NetworkConnectionRequest.selcal_code)
}
inline std::string* NetworkConnectionRequest::mutable_selcal_code() {
  // @@protoc_insertion_point(field_mutable:xpilot.NetworkConnectionRequest.selcal_code)
  return _internal_mutable_selcal_code();
}
inline const std::string& NetworkConnectionRequest::_internal_selcal_code() const {
  return selcal_code_.Get();
}
inline void NetworkConnectionRequest::_internal_set_selcal_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  selcal_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetworkConnectionRequest::_internal_mutable_selcal_code() {
  _has_bits_[0] |= 0x00000004u;
  return selcal_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetworkConnectionRequest::release_selcal_code() {
  // @@protoc_insertion_point(field_release:xpilot.NetworkConnectionRequest.selcal_code)
  if (!_internal_has_selcal_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return selcal_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetworkConnectionRequest::set_allocated_selcal_code(std::string* selcal_code) {
  if (selcal_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  selcal_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selcal_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:xpilot.NetworkConnectionRequest.selcal_code)
}

// optional bool observer_mode = 4;
inline bool NetworkConnectionRequest::_internal_has_observer_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkConnectionRequest::has_observer_mode() const {
  return _internal_has_observer_mode();
}
inline void NetworkConnectionRequest::clear_observer_mode() {
  observer_mode_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool NetworkConnectionRequest::_internal_observer_mode() const {
  return observer_mode_;
}
inline bool NetworkConnectionRequest::observer_mode() const {
  // @@protoc_insertion_point(field_get:xpilot.NetworkConnectionRequest.observer_mode)
  return _internal_observer_mode();
}
inline void NetworkConnectionRequest::_internal_set_observer_mode(bool value) {
  _has_bits_[0] |= 0x00000008u;
  observer_mode_ = value;
}
inline void NetworkConnectionRequest::set_observer_mode(bool value) {
  _internal_set_observer_mode(value);
  // @@protoc_insertion_point(field_set:xpilot.NetworkConnectionRequest.observer_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xpilot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NetworkConnectionRequest_2eproto
